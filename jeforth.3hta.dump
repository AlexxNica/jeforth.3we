       



FigTaiwan


jeforth.3hta
 
Revision 1.00
 Top on JScript v10.0.17241
 Source code http://github.com/hcchengithub/jeforth.3we
 Program path file:///C:/Users/8304018.WKSCN/Dropbox/learnings/github/jeforth.3we/jeforth.hta#endofinputbox




OK 0 here dump
00000: 0 (number)
00001: (space) ( -- " " ) Put a space on TOS. (object)
00002: . ( sth -- ) Print number or string on TOS. (object)
00003: RET (null)
00004: ' ( <name> -- Word ) Tick, get word name from TIB, leave the Word object on TOS. (object)
00005: , ( n -- ) Compile TOS to dictionary. (object)
00006: RET (null)
00007: r> ( -- n ) Pop the return stack (object)
00008: dup ( a -- a a ) Duplicate TOS. (object)
00009: @ ( a -- n ) 從位址 a 取出 n (object)
00010: , ( n -- ) Compile TOS to dictionary. (object)
00011: 1+ ( a -- a++ ) a += 1 (object)
00012: >r ( n -- ) Push n into the return stack. (object)
00013: RET (null)
00014: BL ( -- "\s" ) RegEx white space. (object)
00015: word ( "delimiter" -- "token" <delimiter> ) Get next "token" from TIB. (object)
00016: (create) ( "name" -- ) Create a code word that has a dummy xt, not added into wordhash{} yet (object)
00017: reveal ( -- ) Add the last word into wordhash (object)
00018: colon-word ( -- ) Decorate the last() as a colon word. (object)
00019: compile ( -- ) Compile the next word at dictionary[ip] to dictionary[here]. (object)
00020: doVar ( -- a ) 取隨後位址 a , runtime of created words (object)
00021: RET (null)
00022: BL ( -- "\s" ) RegEx white space. (object)
00023: word ( "delimiter" -- "token" <delimiter> ) Get next "token" from TIB. (object)
00024: (marker) ( "name" -- ) Create marker "name". Run "name" to forget itself and all newers. (object)
00025: RET (null)
00026: over ( a b -- a b a ) Stack operation. (object)
00027: over ( a b -- a b a ) Stack operation. (object)
00028: RET (null)
00029: function(){push(literal)/*(number)-1 */} (function)
00030: * ( a b -- a*b ) Multiplex. (object)
00031: RET (null)
00032: -rot ( w1 w2 w3 -- w3 w1 w2 )  (object)
00033: over ( a b -- a b a ) Stack operation. (object)
00034: max ( a b -- max(a,b) ) The maximum. (object)
00035: -rot ( w1 w2 w3 -- w3 w1 w2 )  (object)
00036: min ( a b -- min(a,b) ) The minimum. (object)
00037: = ( a b -- a=b ) 經轉換後比較 a 是否等於 b, "123" = 123. (object)
00038: RET (null)
00039: ' ( <name> -- Word ) Tick, get word name from TIB, leave the Word object on TOS. (object)
00040: literal ( n -- ) Compile TOS as an anonymous constant (object)
00041: RET (null)
00042: here ( -- a ) 系統 dictionary 編碼位址 a (object)
00043: + ( a b -- a+b) Add two numbers or concatenate two strings. (object)
00044: here! ( a -- ) 設定系統 dictionary 編碼位址 (object)
00045: RET (null)
00046: compile ( -- ) Compile the next word at dictionary[ip] to dictionary[here]. (object)
00047: >r ( n -- ) Push n into the return stack. (object)
00048: here ( -- a ) 系統 dictionary 編碼位址 a (object)
00049: RET (null)
00050: here ( -- a ) 系統 dictionary 編碼位址 a (object)
00051: RET (null)
00052: compile ( -- ) Compile the next word at dictionary[ip] to dictionary[here]. (object)
00053: 0branch ( n -- ) 若 n!==0 就將當前 ip 內數值當作 ip, 否則將 ip 進位 *** 20111224 sam (object)
00054: , ( n -- ) Compile TOS to dictionary. (object)
00055: RET (null)
00056: compile ( -- ) Compile the next word at dictionary[ip] to dictionary[here]. (object)
00057: branch ( -- ) 將當前 ip 內數值當作 ip *** 20111224 sam (object)
00058: , ( n -- ) Compile TOS to dictionary. (object)
00059: RET (null)
00060: compile ( -- ) Compile the next word at dictionary[ip] to dictionary[here]. (object)
00061: 0branch ( n -- ) 若 n!==0 就將當前 ip 內數值當作 ip, 否則將 ip 進位 *** 20111224 sam (object)
00062: here ( -- a ) 系統 dictionary 編碼位址 a (object)
00063: function(){push(literal)/*(number)0 */} (function)
00064: , ( n -- ) Compile TOS to dictionary. (object)
00065: RET (null)
00066: compile ( -- ) Compile the next word at dictionary[ip] to dictionary[here]. (object)
00067: branch ( -- ) 將當前 ip 內數值當作 ip *** 20111224 sam (object)
00068: here ( -- a ) 系統 dictionary 編碼位址 a (object)
00069: function(){push(literal)/*(number)0 */} (function)
00070: , ( n -- ) Compile TOS to dictionary. (object)
00071: RET (null)
00072: again ( a -- ) begin..again, (object)
00073: here ( -- a ) 系統 dictionary 編碼位址 a (object)
00074: swap ( a b -- b a ) stack operation (object)
00075: ! ( n a -- ) 將 n 存入位址 a (object)
00076: RET (null)
00077: here ( -- a ) 系統 dictionary 編碼位址 a (object)
00078: swap ( a b -- b a ) stack operation (object)
00079: ! ( n a -- ) 將 n 存入位址 a (object)
00080: RET (null)
00081: drop ( x -- ) Remove TOS. (object)
00082: ahead ( -- a ) aft internal use (object)
00083: begin ( -- a ) begin..again, begin..until, begin..while..until..then, begin..while..repeat (object)
00084: swap ( a b -- b a ) stack operation (object)
00085: RET (null)
00086: ahead ( -- a ) aft internal use (object)
00087: swap ( a b -- b a ) stack operation (object)
00088: then ( a -- ) if..then..else (object)
00089: RET (null)
00090: if ( -- a ) if..then..else (object)
00091: swap ( a b -- b a ) stack operation (object)
00092: RET (null)
00093: BL ( -- "\s" ) RegEx white space. (object)
00094: word ( "delimiter" -- "token" <delimiter> ) Get next "token" from TIB. (object)
00095: compiling ( -- boolean ) Get system state (object)
00096: 0branch ( n -- ) 若 n!==0 就將當前 ip 內數值當作 ip, 否則將 ip 進位 *** 20111224 sam (object)
00097: 99 (number)
00098: literal ( n -- ) Compile TOS as an anonymous constant (object)
00099: RET (null)
00100: dup ( a -- a a ) Duplicate TOS. (object)
00101: 0branch ( n -- ) 若 n!==0 就將當前 ip 內數值當作 ip, 否則將 ip 進位 *** 20111224 sam (object)
00102: 104 (number)
00103: dup ( a -- a a ) Duplicate TOS. (object)
00104: RET (null)
00105: create ( <name> -- ) Create a new word. The new word is a variable by default. (object)
00106: function(){push(literal)/*(number)0 */} (function)
00107: , ( n -- ) Compile TOS to dictionary. (object)
00108: function(){last().type='colon-variable'} (function)
00109: RET (null)
00110: swap ( a b -- b a ) stack operation (object)
00111: over ( a b -- a b a ) Stack operation. (object)
00112: @ ( a -- n ) 從位址 a 取出 n (object)
00113: swap ( a b -- b a ) stack operation (object)
00114: + ( a b -- a+b) Add two numbers or concatenate two strings. (object)
00115: swap ( a b -- b a ) stack operation (object)
00116: ! ( n a -- ) 將 n 存入位址 a (object)
00117: RET (null)
00118: @ ( a -- n ) 從位址 a 取出 n (object)
00119: . ( sth -- ) Print number or string on TOS. (object)
00120: RET (null)
00121: swap ( a b -- b a ) stack operation (object)
00122: function(){push(literal)/*(number)0 */} (function)
00123: max ( a b -- max(a,b) ) The maximum. (object)
00124: dup ( a -- a a ) Duplicate TOS. (object)
00125: 0= ( a -- f ) 比較 a 是否等於 0 (object)
00126: 0branch ( n -- ) 若 n!==0 就將當前 ip 內數值當作 ip, 否則將 ip 進位 *** 20111224 sam (object)
00127: 129 (number)
00128: EXIT (string)
00129: >r ( n -- ) Push n into the return stack. (object)
00130: dup ( a -- a a ) Duplicate TOS. (object)
00131: . ( sth -- ) Print number or string on TOS. (object)
00132: doNext ( ?? ) next's runtime. (object)
00133: 130 (number)
00134: drop ( x -- ) Remove TOS. (object)
00135: RET (null)
00136: (space) ( -- " " ) Put a space on TOS. (object)
00137: chars ( n str -- ) Print str n times. (object)
00138: RET (null)
00139: function(){push(literal)/*(string)\) */} (function)
00140: word ( "delimiter" -- "token" <delimiter> ) Get next "token" from TIB. (object)
00141: . ( sth -- ) Print number or string on TOS. (object)
00142: BL ( -- "\s" ) RegEx white space. (object)
00143: word ( "delimiter" -- "token" <delimiter> ) Get next "token" from TIB. (object)
00144: drop ( x -- ) Remove TOS. (object)
00145: RET (null)
00146: function(){push(literal)/*(string)" */} (function)
00147: word ( "delimiter" -- "token" <delimiter> ) Get next "token" from TIB. (object)
00148: compiling ( -- boolean ) Get system state (object)
00149: 0branch ( n -- ) 若 n!==0 就將當前 ip 內數值當作 ip, 否則將 ip 進位 *** 20111224 sam (object)
00150: 156 (number)
00151: literal ( n -- ) Compile TOS as an anonymous constant (object)
00152: compile ( -- ) Compile the next word at dictionary[ip] to dictionary[here]. (object)
00153: . ( sth -- ) Print number or string on TOS. (object)
00154: branch ( -- ) 將當前 ip 內數值當作 ip *** 20111224 sam (object)
00155: 157 (number)
00156: . ( sth -- ) Print number or string on TOS. (object)
00157: BL ( -- "\s" ) RegEx white space. (object)
00158: word ( "delimiter" -- "token" <delimiter> ) Get next "token" from TIB. (object)
00159: drop ( x -- ) Remove TOS. (object)
00160: RET (null)
00161: function(){push(literal)/*(string)' */} (function)
00162: word ( "delimiter" -- "token" <delimiter> ) Get next "token" from TIB. (object)
00163: compiling ( -- boolean ) Get system state (object)
00164: 0branch ( n -- ) 若 n!==0 就將當前 ip 內數值當作 ip, 否則將 ip 進位 *** 20111224 sam (object)
00165: 171 (number)
00166: literal ( n -- ) Compile TOS as an anonymous constant (object)
00167: compile ( -- ) Compile the next word at dictionary[ip] to dictionary[here]. (object)
00168: . ( sth -- ) Print number or string on TOS. (object)
00169: branch ( -- ) 將當前 ip 內數值當作 ip *** 20111224 sam (object)
00170: 172 (number)
00171: . ( sth -- ) Print number or string on TOS. (object)
00172: BL ( -- "\s" ) RegEx white space. (object)
00173: word ( "delimiter" -- "token" <delimiter> ) Get next "token" from TIB. (object)
00174: drop ( x -- ) Remove TOS. (object)
00175: RET (null)
00176: function(){push(literal)/*(string)" */} (function)
00177: word ( "delimiter" -- "token" <delimiter> ) Get next "token" from TIB. (object)
00178: compiling ( -- boolean ) Get system state (object)
00179: 0branch ( n -- ) 若 n!==0 就將當前 ip 內數值當作 ip, 否則將 ip 進位 *** 20111224 sam (object)
00180: 182 (number)
00181: literal ( n -- ) Compile TOS as an anonymous constant (object)
00182: BL ( -- "\s" ) RegEx white space. (object)
00183: word ( "delimiter" -- "token" <delimiter> ) Get next "token" from TIB. (object)
00184: drop ( x -- ) Remove TOS. (object)
00185: RET (null)
00186: function(){push(literal)/*(string)' */} (function)
00187: word ( "delimiter" -- "token" <delimiter> ) Get next "token" from TIB. (object)
00188: compiling ( -- boolean ) Get system state (object)
00189: 0branch ( n -- ) 若 n!==0 就將當前 ip 內數值當作 ip, 否則將 ip 進位 *** 20111224 sam (object)
00190: 192 (number)
00191: literal ( n -- ) Compile TOS as an anonymous constant (object)
00192: BL ( -- "\s" ) RegEx white space. (object)
00193: word ( "delimiter" -- "token" <delimiter> ) Get next "token" from TIB. (object)
00194: drop ( x -- ) Remove TOS. (object)
00195: RET (null)
00196: function(){push(literal)/*(string)` */} (function)
00197: word ( "delimiter" -- "token" <delimiter> ) Get next "token" from TIB. (object)
00198: compiling ( -- boolean ) Get system state (object)
00199: 0branch ( n -- ) 若 n!==0 就將當前 ip 內數值當作 ip, 否則將 ip 進位 *** 20111224 sam (object)
00200: 202 (number)
00201: literal ( n -- ) Compile TOS as an anonymous constant (object)
00202: BL ( -- "\s" ) RegEx white space. (object)
00203: word ( "delimiter" -- "token" <delimiter> ) Get next "token" from TIB. (object)
00204: drop ( x -- ) Remove TOS. (object)
00205: RET (null)
00206: ret ( -- ) Mark at the end of a colon word. (object)
00207: r> ( -- n ) Pop the return stack (object)
00208: function(){push(last().cfa)} (function)
00209: ! ( n a -- ) 將 n 存入位址 a (object)
00210: RET (null)
00211: function(){push(tos().length)} (function)
00212: RET (null)
00213: accept ( -- str T|F ) Read a line from terminal. A fake before I/O ready. (object)
00214: 0branch ( n -- ) 若 n!==0 就將當前 ip 內數值當作 ip, 否則將 ip 進位 *** 20111224 sam (object)
00215: 220 (number)
00216: function(){tib=pop();ntib=0} (function)
00217: function(){push(literal)/*(number)1 */} (function)
00218: branch ( -- ) 將當前 ip 內數值當作 ip *** 20111224 sam (object)
00219: 221 (number)
00220: function(){push(literal)/*(number)0 */} (function)
00221: RET (null)
00222: function(){push(literal)/*(number)1 */} (function)
00223: BL ( -- "\s" ) RegEx white space. (object)
00224: word ( "delimiter" -- "token" <delimiter> ) Get next "token" from TIB. (object)
00225: count ( string -- string length ) Get length of the given string (object)
00226: 0branch ( n -- ) 若 n!==0 就將當前 ip 內數值當作 ip, 否則將 ip 進位 *** 20111224 sam (object)
00227: 263 (number)
00228: dup ( a -- a a ) Duplicate TOS. (object)
00229: function(){push(literal)/*(string)[if] */} (function)
00230: = ( a b -- a=b ) 經轉換後比較 a 是否等於 b, "123" = 123. (object)
00231: 0branch ( n -- ) 若 n!==0 就將當前 ip 內數值當作 ip, 否則將 ip 進位 *** 20111224 sam (object)
00232: 237 (number)
00233: drop ( x -- ) Remove TOS. (object)
00234: 1+ ( a -- a++ ) a += 1 (object)
00235: branch ( -- ) 將當前 ip 內數值當作 ip *** 20111224 sam (object)
00236: 255 (number)
00237: dup ( a -- a a ) Duplicate TOS. (object)
00238: function(){push(literal)/*(string)[else] */} (function)
00239: = ( a b -- a=b ) 經轉換後比較 a 是否等於 b, "123" = 123. (object)
00240: 0branch ( n -- ) 若 n!==0 就將當前 ip 內數值當作 ip, 否則將 ip 進位 *** 20111224 sam (object)
00241: 250 (number)
00242: drop ( x -- ) Remove TOS. (object)
00243: 1- ( a -- a-1 ) TOS - 1 (object)
00244: dup ( a -- a a ) Duplicate TOS. (object)
00245: 0branch ( n -- ) 若 n!==0 就將當前 ip 內數值當作 ip, 否則將 ip 進位 *** 20111224 sam (object)
00246: 248 (number)
00247: 1+ ( a -- a++ ) a += 1 (object)
00248: branch ( -- ) 將當前 ip 內數值當作 ip *** 20111224 sam (object)
00249: 255 (number)
00250: function(){push(literal)/*(string)[then] */} (function)
00251: = ( a b -- a=b ) 經轉換後比較 a 是否等於 b, "123" = 123. (object)
00252: 0branch ( n -- ) 若 n!==0 就將當前 ip 內數值當作 ip, 否則將 ip 進位 *** 20111224 sam (object)
00253: 255 (number)
00254: 1- ( a -- a-1 ) TOS - 1 (object)
00255: ?dup ( w -- w w | 0 ) Dup TOS if it is not 0|""|false. (object)
00256: 0branch ( n -- ) 若 n!==0 就將當前 ip 內數值當作 ip, 否則將 ip 進位 *** 20111224 sam (object)
00257: 260 (number)
00258: branch ( -- ) 將當前 ip 內數值當作 ip *** 20111224 sam (object)
00259: 261 (number)
00260: EXIT (string)
00261: branch ( -- ) 將當前 ip 內數值當作 ip *** 20111224 sam (object)
00262: 223 (number)
00263: drop ( x -- ) Remove TOS. (object)
00264: refill ( -- flag ) Reload TIB from stdin. return 0 means no input or EOF (object)
00265: not ( x == !x ) Logical not. Capital NOT is for bitwise. (object)
00266: 0branch ( n -- ) 若 n!==0 就將當前 ip 內數值當作 ip, 否則將 ip 進位 *** 20111224 sam (object)
00267: 223 (number)
00268: drop ( x -- ) Remove TOS. (object)
00269: RET (null)
00270: 0branch ( n -- ) 若 n!==0 就將當前 ip 內數值當作 ip, 否則將 ip 進位 *** 20111224 sam (object)
00271: 274 (number)
00272: branch ( -- ) 將當前 ip 內數值當作 ip *** 20111224 sam (object)
00273: 275 (number)
00274: [else] ( -- ) 考慮中間的 nested 結構，把下一個 [then] 之前的東西都丟掉。 (object)
00275: RET (null)
00276: RET (null)
00277: BL ( -- "\s" ) RegEx white space. (object)
00278: word ( "delimiter" -- "token" <delimiter> ) Get next "token" from TIB. (object)
00279: compiling ( -- boolean ) Get system state (object)
00280: 0branch ( n -- ) 若 n!==0 就將當前 ip 內數值當作 ip, 否則將 ip 進位 *** 20111224 sam (object)
00281: 286 (number)
00282: jsFunc ( "statements" -- function ) Compile JavaScript to a function() that returns last statement (object)
00283: , ( n -- ) Compile TOS to dictionary. (object)
00284: branch ( -- ) 將當前 ip 內數值當作 ip *** 20111224 sam (object)
00285: 287 (number)
00286: jsEval ( <string> -- result ) Evaluate the given JavaScript statements, return the last statement's value. (object)
00287: RET (null)
00288: BL ( -- "\s" ) RegEx white space. (object)
00289: word ( "delimiter" -- "token" <delimiter> ) Get next "token" from TIB. (object)
00290: compiling ( -- boolean ) Get system state (object)
00291: 0branch ( n -- ) 若 n!==0 就將當前 ip 內數值當作 ip, 否則將 ip 進位 *** 20111224 sam (object)
00292: 297 (number)
00293: jsFuncNo ( "statements" -- function ) Compile JavaScript to a function() (object)
00294: , ( n -- ) Compile TOS to dictionary. (object)
00295: branch ( -- ) 將當前 ip 內數值當作 ip *** 20111224 sam (object)
00296: 298 (number)
00297: jsEvalNo ( <string> -- ) Evaluate the given JavaScript statements, w/o return value. (object)
00298: RET (null)
00299: BL ( -- "\s" ) RegEx white space. (object)
00300: word ( "delimiter" -- "token" <delimiter> ) Get next "token" from TIB. (object)
00301: function(){push(tos().charAt(0)=='['||tos().charAt(0)=='(')} (function)
00302: 0branch ( n -- ) 若 n!==0 就將當前 ip 內數值當作 ip, 否則將 ip 進位 *** 20111224 sam (object)
00303: 307 (number)
00304: function(){push(literal)/*(string)pop() */} (function)
00305: branch ( -- ) 將當前 ip 內數值當作 ip *** 20111224 sam (object)
00306: 308 (number)
00307: function(){push(literal)/*(string)pop(). */} (function)
00308: swap ( a b -- b a ) stack operation (object)
00309: + ( a b -- a+b) Add two numbers or concatenate two strings. (object)
00310: compiling ( -- boolean ) Get system state (object)
00311: 0branch ( n -- ) 若 n!==0 就將當前 ip 內數值當作 ip, 否則將 ip 進位 *** 20111224 sam (object)
00312: 317 (number)
00313: jsFuncNo ( "statements" -- function ) Compile JavaScript to a function() (object)
00314: , ( n -- ) Compile TOS to dictionary. (object)
00315: branch ( -- ) 將當前 ip 內數值當作 ip *** 20111224 sam (object)
00316: 318 (number)
00317: jsEvalNo ( <string> -- ) Evaluate the given JavaScript statements, w/o return value. (object)
00318: RET (null)
00319: BL ( -- "\s" ) RegEx white space. (object)
00320: word ( "delimiter" -- "token" <delimiter> ) Get next "token" from TIB. (object)
00321: function(){push(tos().charAt(0)=='['||tos().charAt(0)=='(')} (function)
00322: 0branch ( n -- ) 若 n!==0 就將當前 ip 內數值當作 ip, 否則將 ip 進位 *** 20111224 sam (object)
00323: 327 (number)
00324: function(){push(literal)/*(string)pop() */} (function)
00325: branch ( -- ) 將當前 ip 內數值當作 ip *** 20111224 sam (object)
00326: 328 (number)
00327: function(){push(literal)/*(string)pop(). */} (function)
00328: swap ( a b -- b a ) stack operation (object)
00329: + ( a b -- a+b) Add two numbers or concatenate two strings. (object)
00330: compiling ( -- boolean ) Get system state (object)
00331: 0branch ( n -- ) 若 n!==0 就將當前 ip 內數值當作 ip, 否則將 ip 進位 *** 20111224 sam (object)
00332: 337 (number)
00333: jsFunc ( "statements" -- function ) Compile JavaScript to a function() that returns last statement (object)
00334: , ( n -- ) Compile TOS to dictionary. (object)
00335: branch ( -- ) 將當前 ip 內數值當作 ip *** 20111224 sam (object)
00336: 338 (number)
00337: jsEval ( <string> -- result ) Evaluate the given JavaScript statements, return the last statement's value. (object)
00338: RET (null)
00339: function(){push(nextstring(/\(|\)/).str)} (function)
00340: drop ( x -- ) Remove TOS. (object)
00341: function(){push(tib[ntib++])} (function)
00342: function(){push(literal)/*(string)( */} (function)
00343: = ( a b -- a=b ) 經轉換後比較 a 是否等於 b, "123" = 123. (object)
00344: 0branch ( n -- ) 若 n!==0 就將當前 ip 內數值當作 ip, 否則將 ip 進位 *** 20111224 sam (object)
00345: 350 (number)
00346: function(){push(literal)/*(object)( ( <str> -- ) Ignore the comment down to ')', can be nested but must be balanced */} (function)
00347: dup ( a -- a a ) Duplicate TOS. (object)
00348: execute ( Word|"name"|address|empty -- ... ) Execute the given word or the last() if stack is empty. (object)
00349: execute ( Word|"name"|address|empty -- ... ) Execute the given word or the last() if stack is empty. (object)
00350: RET (null)
00351: ' ( <name> -- Word ) Tick, get word name from TIB, leave the Word object on TOS. (object)
00352: compiling ( -- boolean ) Get system state (object)
00353: 0branch ( n -- ) 若 n!==0 就將當前 ip 內數值當作 ip, 否則將 ip 進位 *** 20111224 sam (object)
00354: 360 (number)
00355: literal ( n -- ) Compile TOS as an anonymous constant (object)
00356: compile ( -- ) Compile the next word at dictionary[ip] to dictionary[here]. (object)
00357: doTo ( n Word -- ) Run time of 'to' command. (object)
00358: branch ( -- ) 將當前 ip 內數值當作 ip *** 20111224 sam (object)
00359: 361 (number)
00360: doTo ( n Word -- ) Run time of 'to' command. (object)
00361: RET (null)
00362: function(){panic('\n'+pop()+'\n')} (function)
00363: abort ( -- ) Reset the forth system. (object)
00364: RET (null)
00365: function(){push(literal)/*(string)" */} (function)
00366: word ( "delimiter" -- "token" <delimiter> ) Get next "token" from TIB. (object)
00367: literal ( n -- ) Compile TOS as an anonymous constant (object)
00368: BL ( -- "\s" ) RegEx white space. (object)
00369: word ( "delimiter" -- "token" <delimiter> ) Get next "token" from TIB. (object)
00370: drop ( x -- ) Remove TOS. (object)
00371: compile ( -- ) Compile the next word at dictionary[ip] to dictionary[here]. (object)
00372: "msg"abort ( "errormsg" -- ) Panic with error message and abort the forth VM (object)
00373: RET (null)
00374: 0branch ( n -- ) 若 n!==0 就將當前 ip 內數值當作 ip, 否則將 ip 進位 *** 20111224 sam (object)
00375: 379 (number)
00376: "msg"abort ( "errormsg" -- ) Panic with error message and abort the forth VM (object)
00377: branch ( -- ) 將當前 ip 內數值當作 ip *** 20111224 sam (object)
00378: 380 (number)
00379: drop ( x -- ) Remove TOS. (object)
00380: RET (null)
00381: function(){push(literal)/*(string)" */} (function)
00382: word ( "delimiter" -- "token" <delimiter> ) Get next "token" from TIB. (object)
00383: literal ( n -- ) Compile TOS as an anonymous constant (object)
00384: BL ( -- "\s" ) RegEx white space. (object)
00385: word ( "delimiter" -- "token" <delimiter> ) Get next "token" from TIB. (object)
00386: drop ( x -- ) Remove TOS. (object)
00387: compile ( -- ) Compile the next word at dictionary[ip] to dictionary[here]. (object)
00388: swap ( a b -- b a ) stack operation (object)
00389: compile ( -- ) Compile the next word at dictionary[ip] to dictionary[here]. (object)
00390: "msg"?abort ( "errormsg" flag -- ) Conditional panic with error message and abort the forth VM (object)
00391: RET (null)
00392: function(){push(literal)/*(string)</text> */} (function)
00393: word ( "delimiter" -- "token" <delimiter> ) Get next "token" from TIB. (object)
00394: RET (null)
00395: compiling ( -- boolean ) Get system state (object)
00396: 0branch ( n -- ) 若 n!==0 就將當前 ip 內數值當作 ip, 否則將 ip 進位 *** 20111224 sam (object)
00397: 399 (number)
00398: literal ( n -- ) Compile TOS as an anonymous constant (object)
00399: RET (null)
00400: function(){push(literal)/*(object)<comment> ( <comemnt> -- ) Can be nested */} (function)
00401: function(){pop().level+=1} (function)
00402: function(){push(literal)/*(string)<comment>|</comment> */} (function)
00403: word ( "delimiter" -- "token" <delimiter> ) Get next "token" from TIB. (object)
00404: drop ( x -- ) Remove TOS. (object)
00405: RET (null)
00406: function(){push(literal)/*(object)<comment> ( <comemnt> -- ) Can be nested */} (function)
00407: function(){push(tos().level>1)} (function)
00408: swap ( a b -- b a ) stack operation (object)
00409: function(){tos().level=Math.max(0,pop().level-2)} (function)
00410: 0branch ( n -- ) 若 n!==0 就將當前 ip 內數值當作 ip, 否則將 ip 進位 *** 20111224 sam (object)
00411: 413 (number)
00412: <comment> ( <comemnt> -- ) Can be nested (object)
00413: RET (null)
00414: function(){push(literal)/*(string)</js>|</jsV>|</jsN>|</jsRaw> */} (function)
00415: word ( "delimiter" -- "token" <delimiter> ) Get next "token" from TIB. (object)
00416: RET (null)
00417: compiling ( -- boolean ) Get system state (object)
00418: 0branch ( n -- ) 若 n!==0 就將當前 ip 內數值當作 ip, 否則將 ip 進位 *** 20111224 sam (object)
00419: 424 (number)
00420: jsFuncNo ( "statements" -- function ) Compile JavaScript to a function() (object)
00421: , ( n -- ) Compile TOS to dictionary. (object)
00422: branch ( -- ) 將當前 ip 內數值當作 ip *** 20111224 sam (object)
00423: 425 (number)
00424: jsEvalNo ( <string> -- ) Evaluate the given JavaScript statements, w/o return value. (object)
00425: RET (null)
00426: compiling ( -- boolean ) Get system state (object)
00427: 0branch ( n -- ) 若 n!==0 就將當前 ip 內數值當作 ip, 否則將 ip 進位 *** 20111224 sam (object)
00428: 433 (number)
00429: jsFunc ( "statements" -- function ) Compile JavaScript to a function() that returns last statement (object)
00430: , ( n -- ) Compile TOS to dictionary. (object)
00431: branch ( -- ) 將當前 ip 內數值當作 ip *** 20111224 sam (object)
00432: 434 (number)
00433: jsEval ( <string> -- result ) Evaluate the given JavaScript statements, return the last statement's value. (object)
00434: RET (null)
00435: BL ( -- "\s" ) RegEx white space. (object)
00436: word ( "delimiter" -- "token" <delimiter> ) Get next "token" from TIB. (object)
00437: (create) ( "name" -- ) Create a code word that has a dummy xt, not added into wordhash{} yet (object)
00438: function(){ 
                                last().type = "constant"; 
                                var s = 'var f;f=function(){push(g["' 
                                                + last().name 
                                                + '"])}'; 
                                last().xt = eval(s); 
                                g[last().name] = pop(); 
                                } (function)
00439: reveal ( -- ) Add the last word into wordhash (object)
00440: RET (null)
00441: constant ( n <name> -- ) Create a 'constnat', Don't use " in <name>. (object)
00442: last ( -- word ) Get the word that was last defined. (object)
00443: function(){pop().type='value'} (function)
00444: RET (null)
00445: ' ( <name> -- Word ) Tick, get word name from TIB, leave the Word object on TOS. (object)
00446: function(){if (tos().type!="value") panic("Error! Assigning to a none-value.\n",'error') } (function)
00447: compiling ( -- boolean ) Get system state (object)
00448: 0branch ( n -- ) 若 n!==0 就將當前 ip 內數值當作 ip, 否則將 ip 進位 *** 20111224 sam (object)
00449: 454 (number)
00450: function(){var s='var f;f=function(){/* to */ g["'+pop().name+'"]=pop()}';push(eval(s))} (function)
00451: , ( n -- ) Compile TOS to dictionary. (object)
00452: branch ( -- ) 將當前 ip 內數值當作 ip *** 20111224 sam (object)
00453: 455 (number)
00454: function(){g[pop().name]=pop()} (function)
00455: RET (null)
00456: function(){push(literal)/*(object)sleep ( mS -- ) Suspend to idle, resume after mS. Can be 'stopSleeping'. */} (function)
00457: function(){
                                        function resume() { 
                                                if (!me.timeoutId) return; // 萬一想提前結束時其實已經 timeout 過了則不做事。 
                                               tib = tibwas; ntib = ntibwas; me.timeoutId = null; 
                                                outer(ipwas); // resume to the below ending 'ret' and then go through the TIB. 
                                        } 
                                        var tibwas=tib, ntibwas=ntib, ipwas=ip, me=pop(), delay=pop(); 
                                        me.resume = resume; // So resume can be triggered from outside 
                                        if (me.timeoutId) { 
                                                panic("Error! double 'sleep' not allowed, use 'nap' instead.\n",true) 
                                        } else { 
                                                tib = ""; ntib = ip = 0; // ip = 0 reserve rstack, suspend the forth VM 
                                                me.timeoutId = mySetTimeout(resume,delay); 
                                        } 
                                } (function)
00458: RET (null)
00459: function(){
                                        var tibwas=tib, ntibwas=ntib, ipwas=ip, delay=pop(); 
                                        tib = ""; ntib = ip = 0; // ip = 0 reserve rstack, suspend the forth VM 
                                        mySetTimeout(resume,delay); 
                                        function resume() { 
                                                tib = tibwas; ntib = ntibwas; 
                                                outer(ipwas); // resume to the below ending 'ret' and then go through the TIB. 
                                        } 
                                } (function)
00460: RET (null)
00461: function(){print("\n")} (function)
00462: function(){push(literal)/*(number)1 */} (function)
00463: nap ( mS -- ) Suspend to idle, resume after mS. Multiple nap is allowed. (object)
00464: RET (null)
00465: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
00466: function(){push(literal)/*(string)J a v a S c r i p t   C o n s o l e */} (function)
00467: . ( sth -- ) Print number or string on TOS. (object)
00468: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
00469: function(){push(literal)/*(string)Usage: js: if(kvm.debug){kvm.jsc.prompt='msg';eval(kvm.jsc.xt)} */} (function)
00470: . ( sth -- ) Print number or string on TOS. (object)
00471: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
00472: function(){if(1){kvm.jsc.prompt="jsc>";eval(kvm.jsc.xt)}} (function)
00473: RET (null)
00474: function(){push(parseInt(pop()))} (function)
00475: RET (null)
00476: function(){push(Math.random())} (function)
00477: RET (null)
00478: RET (null)
00479: 1+ ( a -- a++ ) a += 1 (object)
00480: function(){push(stack.splice(stack.length-tos(),pop()))} (function)
00481: drop ( x -- ) Remove TOS. (object)
00482: RET (null)
00483: BL ( -- "\s" ) RegEx white space. (object)
00484: word ( "delimiter" -- "token" <delimiter> ) Get next "token" from TIB. (object)
00485: (ASCII) ( str -- ASCII ) Get a character's ASCII code. (object)
00486: compiling ( -- boolean ) Get system state (object)
00487: 0branch ( n -- ) 若 n!==0 就將當前 ip 內數值當作 ip, 否則將 ip 進位 *** 20111224 sam (object)
00488: 490 (number)
00489: literal ( n -- ) Compile TOS as an anonymous constant (object)
00490: RET (null)
00491: "" ( -- "" ) empty string. (object)
00492: function(){push(literal)/*(string)forth */} (function)
00493: function(){push(literal)/*(string)\n|\r */} (function)
00494: word ( "delimiter" -- "token" <delimiter> ) Get next "token" from TIB. (object)
00495: (words) ( "option" "word-list" "pattern" -- word[] ) Get an array of words, name/help/comments screened by pattern. (object)
00496: function(){
                                        var word_list = pop(); 
                                        var w = ""; 
                                        for (var i=0; i<word_list.length; i++) w += word_list[i].name + " "; 
                                        print(w); 
                                } (function)
00497: RET (null)
00498: function(){push(tos().length)} (function)
00499: 0branch ( n -- ) 若 n!==0 就將當前 ip 內數值當作 ip, 否則將 ip 進位 *** 20111224 sam (object)
00500: 509 (number)
00501: function(){push(literal)/*(string)forth */} (function)
00502: swap ( a b -- b a ) stack operation (object)
00503: "" ( -- "" ) empty string. (object)
00504: -rot ( w1 w2 w3 -- w3 w1 w2 )  (object)
00505: (words) ( "option" "word-list" "pattern" -- word[] ) Get an array of words, name/help/comments screened by pattern. (object)
00506: function(){
                                                var word_list = pop(); 
                                                for (var i=0; i<word_list.length; i++) { 
                                                        print(word_list[i]+"\n"); 
                                                        if (typeof(word_list[i].comment) != "undefined") print(" "+word_list[i].comment+"\n"); 
                                                } 
                                        } (function)
00507: branch ( -- ) 將當前 ip 內數值當作 ip *** 20111224 sam (object)
00508: 513 (number)
00509: function(){push(literal)/*(string)
                                                Enter          : Focus to the input box 
                                                help <pattern> : Print help message of matched words 
                                                see <word>     : See details of the word 
                                                jsc            : JavaScript console 
                                         */} (function)
00510: function(){push(pop().replace(/^[ \t]*/gm,'  '))} (function)
00511: . ( sth -- ) Print number or string on TOS. (object)
00512: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
00513: RET (null)
00514: function(){push(literal)/*(string)\n|\r */} (function)
00515: word ( "delimiter" -- "token" <delimiter> ) Get next "token" from TIB. (object)
00516: (help) ( "patther" -- ) Print help message of screened words (object)
00517: RET (null)
00518: function(){push(kvm.path.slice(0))} (function)
00519: over ( a b -- a b a ) Stack operation. (object)
00520: readTextFile ( "pathname" -- string ) Return a string, "" if failed (object)
00521: function(){push(tos()!="")} (function)
00522: 0branch ( n -- ) 若 n!==0 就將當前 ip 內數值當作 ip, 否則將 ip 進位 *** 20111224 sam (object)
00523: 527 (number)
00524: nip ( a b -- b )  (object)
00525: nip ( a b -- b )  (object)
00526: EXIT (string)
00527: drop ( x -- ) Remove TOS. (object)
00528: function(){push(tos().length)} (function)
00529: >r ( n -- ) Push n into the return stack. (object)
00530: branch ( -- ) 將當前 ip 內數值當作 ip *** 20111224 sam (object)
00531: 543 (number)
00532: function(){push(tos().pop()+'/'+tos(1))} (function)
00533: readTextFile ( "pathname" -- string ) Return a string, "" if failed (object)
00534: function(){push(tos()!="")} (function)
00535: 0branch ( n -- ) 若 n!==0 就將當前 ip 內數值當作 ip, 否則將 ip 進位 *** 20111224 sam (object)
00536: 542 (number)
00537: nip ( a b -- b )  (object)
00538: nip ( a b -- b )  (object)
00539: r> ( -- n ) Pop the return stack (object)
00540: drop ( x -- ) Remove TOS. (object)
00541: EXIT (string)
00542: drop ( x -- ) Remove TOS. (object)
00543: doNext ( ?? ) next's runtime. (object)
00544: 532 (number)
00545: drop ( x -- ) Remove TOS. (object)
00546: "" ( -- "" ) empty string. (object)
00547: swap ( a b -- b a ) stack operation (object)
00548: function(){panic("Error! File " + pop() + " not found!\n",true) } (function)
00549: RET (null)
00550: readTextFile ( "pathname" -- string ) Return a string, "" if failed (object)
00551: function(){eval(pop())} (function)
00552: RET (null)
00553: BL ( -- "\s" ) RegEx white space. (object)
00554: word ( "delimiter" -- "token" <delimiter> ) Get next "token" from TIB. (object)
00555: sinclude.js ( "pathname" -- ) Include JavaScript source file (object)
00556: RET (null)
00557: readTextFileAuto ( "pathname" -- string ) Search and read, panic if failed. (object)
00558: function(){push(tos().indexOf("source-code-header")!=-1)} (function)
00559: 0branch ( n -- ) 若 n!==0 就將當前 ip 內數值當作 ip, 否則將 ip 進位 *** 20111224 sam (object)
00560: 564 (number)
00561: function(){push(literal)/*(string) 
                                                \ 跟 source-code-header 成對的尾部 
                                               <selftest> 
                                                js> tick('<selftest>').masterMarker tib.insert 
                                                </selftest> 
                                                js> tick('<selftest>').enabled [if] js> tick('<selftest>').buffer tib.insert [then] 
                                                js: tick('<selftest>').buffer="" \ recycle the memory 
                                                \ --EOF-- 
                                        */} (function)
00562: swap ( a b -- b a ) stack operation (object)
00563: function(){var ss = pop();ss = (ss+'x').slice(0,ss.search(/\\\s*--EOF--/));push(ss += pop())} (function)
00564: function(){push('\n'+pop()+'\n')} (function)
00565: tib.insert ( "string" -- ) Insert the "string" into TIB (object)
00566: RET (null)
00567: BL ( -- "\s" ) RegEx white space. (object)
00568: word ( "delimiter" -- "token" <delimiter> ) Get next "token" from TIB. (object)
00569: sinclude ( "pathname" -- ... ) Lodad the given forth source file. (object)
00570: RET (null)
00571: function(){push(literal)/*(string)
                                        ?skip2 --EOF-- \ skip it if already included 
                                        dup .( Including ) . cr char -- over over + + 
                                        js: tick('<selftest>').masterMarker=tos()+"selftest--"; 
                                        also forth definitions (marker) (vocabulary) 
                                        last execute definitions 
                                        <selftest> 
                                                js> tick('<selftest>').masterMarker (marker) 
                                                include kernel/selftest.f 
                                        </selftest> 
                                 */} (function)
00572: tib.insert ( "string" -- ) Insert the "string" into TIB (object)
00573: RET (null)
00574: decimal ( -- ) 設定數值以十進制印出 *** 20111224 sam (object)
00575: dup ( a -- a a ) Duplicate TOS. (object)
00576: function(){push(literal)/*(number)5 */} (function)
00577: .0r ( num|str n -- ) Right adjusted print num|str in n characters (FigTaiwan SamSuanChen) (object)
00578: function(){push(literal)/*(string):  */} (function)
00579: . ( sth -- ) Print number or string on TOS. (object)
00580: dup ( a -- a a ) Duplicate TOS. (object)
00581: (?) ( a -- ) print value of the variable consider ret and exit (object)
00582: function(){push(literal)/*(string) ( */} (function)
00583: . ( sth -- ) Print number or string on TOS. (object)
00584: function(){push(mytypeof(dictionary[pop()]))} (function)
00585: . ( sth -- ) Print number or string on TOS. (object)
00586: function(){push(literal)/*(string)) */} (function)
00587: . ( sth -- ) Print number or string on TOS. (object)
00588: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
00589: RET (null)
00590: >r ( n -- ) Push n into the return stack. (object)
00591: dup ( a -- a a ) Duplicate TOS. (object)
00592: (dump) ( addr -- ) dump one cell of dictionary (object)
00593: 1+ ( a -- a++ ) a += 1 (object)
00594: doNext ( ?? ) next's runtime. (object)
00595: 591 (number)
00596: RET (null)
00597: function(){push(literal)/*(object)d ( <addr> -- ) dump dictionary */} (function)
00598: BL ( -- "\s" ) RegEx white space. (object)
00599: word ( "delimiter" -- "token" <delimiter> ) Get next "token" from TIB. (object)
00600: count ( string -- string length ) Get length of the given string (object)
00601: 0= ( a -- f ) 比較 a 是否等於 0 (object)
00602: 0branch ( n -- ) 若 n!==0 就將當前 ip 內數值當作 ip, 否則將 ip 進位 *** 20111224 sam (object)
00603: 608 (number)
00604: drop ( x -- ) Remove TOS. (object)
00605: function(){push(tos().lastaddress)} (function)
00606: branch ( -- ) 將當前 ip 內數值當作 ip *** 20111224 sam (object)
00607: 609 (number)
00608: function(){push(parseInt(pop()))} (function)
00609: function(){push(literal)/*(number)20 */} (function)
00610: dump ( addr length -- addr' ) dump dictionary (object)
00611: function(){pop(1).lastaddress=pop()} (function)
00612: RET (null)
00613: ' ( <name> -- Word ) Tick, get word name from TIB, leave the Word object on TOS. (object)
00614: (see) ( thing -- ) See into the given word, object, array, ... anything. (object)
00615: RET (null)
00616: function(){push(literal)/*(string)*debug*  */} (function)
00617: swap ( a b -- b a ) stack operation (object)
00618: + ( a b -- a+b) Add two numbers or concatenate two strings. (object)
00619: function(){push(literal)/*(string)  */} (function)
00620: + ( a b -- a+b) Add two numbers or concatenate two strings. (object)
00621: function(){kvm.prompt=pop()} (function)
00622: suspend ( -- ) Suspend the forth VM to wait for the I/O. (object)
00623: RET (null)
00624: BL ( -- "\s" ) RegEx white space. (object)
00625: word ( "delimiter" -- "token" <delimiter> ) Get next "token" from TIB. (object)
00626: compiling ( -- boolean ) Get system state (object)
00627: 0branch ( n -- ) 若 n!==0 就將當前 ip 內數值當作 ip, 否則將 ip 進位 *** 20111224 sam (object)
00628: 634 (number)
00629: literal ( n -- ) Compile TOS as an anonymous constant (object)
00630: compile ( -- ) Compile the next word at dictionary[ip] to dictionary[here]. (object)
00631: (*debug*) ( "prompt" -- ) Forth debug console. 'q' to exit. (object)
00632: branch ( -- ) 將當前 ip 內數值當作 ip *** 20111224 sam (object)
00633: 635 (number)
00634: (*debug*) ( "prompt" -- ) Forth debug console. 'q' to exit. (object)
00635: RET (null)
00636: function(){order[Math.max(1,order.length-1)]=pop()} (function)
00637: rescan-word-hash ( -- ) Rescan all word-lists in the order[] to rebuild wordhash{} (object)
00638: RET (null)
00639: >r ( n -- ) Push n into the return stack. (object)
00640: function(){var name=rtos(),flag=false; for(var vid in words) if(vid==name) {flag=true;break};push(flag)} (function)
00641: 0branch ( n -- ) 若 n!==0 就將當前 ip 內數值當作 ip, 否則將 ip 進位 *** 20111224 sam (object)
00642: 649 (number)
00643: function(){push(literal)/*(string)Error! redefine vocabulary ' */} (function)
00644: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
00645: + ( a b -- a+b) Add two numbers or concatenate two strings. (object)
00646: function(){push(literal)/*(string)' is not allowed. */} (function)
00647: + ( a b -- a+b) Add two numbers or concatenate two strings. (object)
00648: "msg"abort ( "errormsg" -- ) Panic with error message and abort the forth VM (object)
00649: r> ( -- n ) Pop the return stack (object)
00650: (create) ( "name" -- ) Create a code word that has a dummy xt, not added into wordhash{} yet (object)
00651: reveal ( -- ) Add the last word into wordhash (object)
00652: colon-word ( -- ) Decorate the last() as a colon word. (object)
00653: function(){push(last().name)} (function)
00654: dup ( a -- a a ) Duplicate TOS. (object)
00655: function(){push(literal)/*(number)0 */} (function)
00656: , ( n -- ) Compile TOS to dictionary. (object)
00657: , ( n -- ) Compile TOS to dictionary. (object)
00658: dup ( a -- a a ) Duplicate TOS. (object)
00659: function(){words[pop()]=[];words[pop()].push(0)} (function)
00660: function(){last().type='colon-vocabulary'} (function)
00661: does> ( -- ) redirect the last new colon word.xt to after does> (object)
00662: r> ( -- n ) Pop the return stack (object)
00663: @ ( a -- n ) 從位址 a 取出 n (object)
00664: set-context ( "vid" -- ) Set the word list that is searched first. (object)
00665: rescan-word-hash ( -- ) Rescan all word-lists in the order[] to rebuild wordhash{} (object)
00666: RET (null)
00667: BL ( -- "\s" ) RegEx white space. (object)
00668: word ( "delimiter" -- "token" <delimiter> ) Get next "token" from TIB. (object)
00669: (vocabulary) ( "name" -- ) create a new word list. (object)
00670: RET (null)
00671: function(){order=order.slice(0,1)} (function)
00672: rescan-word-hash ( -- ) Rescan all word-lists in the order[] to rebuild wordhash{} (object)
00673: RET (null)
00674: function(){push(order.length>1)} (function)
00675: 0branch ( n -- ) 若 n!==0 就將當前 ip 內數值當作 ip, 否則將 ip 進位 *** 20111224 sam (object)
00676: 679 (number)
00677: forth-wordlist ( -- "forth" ) The vid of forth-wordlist. (object)
00678: set-context ( "vid" -- ) Set the word list that is searched first. (object)
00679: RET (null)
00680: function(){push(literal)/*(string)search:  */} (function)
00681: . ( sth -- ) Print number or string on TOS. (object)
00682: get-order ( -- order-array ) Get the vocabulary order array (object)
00683: . ( sth -- ) Print number or string on TOS. (object)
00684: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
00685: function(){push(literal)/*(string)define:  */} (function)
00686: . ( sth -- ) Print number or string on TOS. (object)
00687: get-current ( -- "vid" ) Return vid, new word's destination word list name. (object)
00688: . ( sth -- ) Print number or string on TOS. (object)
00689: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
00690: RET (null)
00691: get-context ( -- "vid" ) Get the word list that is searched first.  (object)
00692: set-current ( "vid" -- ) Set the new word's destination word list name. (object)
00693: RET (null)
00694: function(){push(words)} (function)
00695: obj>keys ( obj -- keys[] ) Get all keys of an object. (object)
00696: RET (null)
00697: function(){push(literal)/*(string)vocs:  */} (function)
00698: . ( sth -- ) Print number or string on TOS. (object)
00699: get-vocs ( -- vocs[] ) Get all vocabulary names. (object)
00700: . ( sth -- ) Print number or string on TOS. (object)
00701: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
00702: RET (null)
00703: get-vocs ( -- vocs[] ) Get all vocabulary names. (object)
00704: isMember ( value group -- key|index T|F ) Return key or index if value exists. (object)
00705: RET (null)
00706: BL ( -- "\s" ) RegEx white space. (object)
00707: word ( "delimiter" -- "token" <delimiter> ) Get next "token" from TIB. (object)
00708: dup ( a -- a a ) Duplicate TOS. (object)
00709: (') ( "name" -- Word ) name>Word like tick but the name is from TOS. (object)
00710: function(){push(tos().vid)} (function)
00711: function(){push(current)} (function)
00712: = ( a b -- a=b ) 經轉換後比較 a 是否等於 b, "123" = 123. (object)
00713: 0branch ( n -- ) 若 n!==0 就將當前 ip 內數值當作 ip, 否則將 ip 進位 *** 20111224 sam (object)
00714: 722 (number)
00715: function(){push(words[current].length-pop().wid)} (function)
00716: >r ( n -- ) Push n into the return stack. (object)
00717: (forget) ( -- ) Forget the last word (object)
00718: doNext ( ?? ) next's runtime. (object)
00719: 717 (number)
00720: branch ( -- ) 將當前 ip 內數值當作 ip *** 20111224 sam (object)
00721: 733 (number)
00722: drop ( x -- ) Remove TOS. (object)
00723: function(){push(literal)/*(string)Oooops! ' */} (function)
00724: . ( sth -- ) Print number or string on TOS. (object)
00725: . ( sth -- ) Print number or string on TOS. (object)
00726: function(){push(literal)/*(string)' not found in the current vocabulary,  */} (function)
00727: . ( sth -- ) Print number or string on TOS. (object)
00728: current ( -- "vid" ) current is alias of get-current, get the compilation word list's vid name. (object)
00729: . ( sth -- ) Print number or string on TOS. (object)
00730: function(){push(literal)/*(string). */} (function)
00731: . ( sth -- ) Print number or string on TOS. (object)
00732: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
00733: RET (null)
00734: BL ( -- "\s" ) RegEx white space. (object)
00735: word ( "delimiter" -- "token" <delimiter> ) Get next "token" from TIB. (object)
00736: (marker) ( "name" -- ) Create a word named <name>. Run <name> to forget itself and all newers. (object)
00737: RET (null)
00738: function(){push(literal)/*(string)\n|\r */} (function)
00739: word ( "delimiter" -- "token" <delimiter> ) Get next "token" from TIB. (object)
00740: (help) ( "pattern" -- ) Print help message of screened words (object)
00741: RET (null)
00742: dup ( a -- a a ) Duplicate TOS. (object)
00743: (') ( "name" -- Word ) name>Word like tick but the name is from TOS. (object)
00744: BL ( -- "\s" ) RegEx white space. (object)
00745: word ( "delimiter" -- "token" <delimiter> ) Get next "token" from TIB. (object)
00746: swap ( a b -- b a ) stack operation (object)
00747: 0branch ( n -- ) 若 n!==0 就將當前 ip 內數值當作 ip, 否則將 ip 進位 *** 20111224 sam (object)
00748: 756 (number)
00749: word ( "delimiter" -- "token" <delimiter> ) Get next "token" from TIB. (object)
00750: drop ( x -- ) Remove TOS. (object)
00751: BL ( -- "\s" ) RegEx white space. (object)
00752: word ( "delimiter" -- "token" <delimiter> ) Get next "token" from TIB. (object)
00753: drop ( x -- ) Remove TOS. (object)
00754: branch ( -- ) 將當前 ip 內數值當作 ip *** 20111224 sam (object)
00755: 756 (number)
00756: drop ( x -- ) Remove TOS. (object)
00757: RET (null)
00758: 662 (number)
00759: html5.f (string)
00760: RET (null)
00761: function(){push(document.createElement(pop()))} (function)
00762: RET (null)
00763: function(){push(document.getElementById(pop()))} (function)
00764: RET (null)
00765: function(){pop(2).setAttribute(pop(1),pop())} (function)
00766: RET (null)
00767: function(){push(pop(1).getAttribute(pop()))} (function)
00768: RET (null)
00769: function(){pop(1).appendChild(pop())} (function)
00770: RET (null)
00771: function(){tos().parentElement.replaceChild(pop(1),pop())} (function)
00772: RET (null)
00773: function(){tos().parentElement.insertBefore(pop(1),pop())} (function)
00774: RET (null)
00775: function(){push(tos().nextElementSibling)} (function)
00776: 0branch ( n -- ) 若 n!==0 就將當前 ip 內數值當作 ip, 否則將 ip 進位 *** 20111224 sam (object)
00777: 782 (number)
00778: function(){push(pop().nextElementSibling)} (function)
00779: function(){tos().parentElement.insertBefore(pop(1),pop())} (function)
00780: branch ( -- ) 將當前 ip 內數值當作 ip *** 20111224 sam (object)
00781: 783 (number)
00782: function(){pop().parentElement.insertBefore(pop(1))} (function)
00783: RET (null)
00784: function(){push(pop().lastChild)} (function)
00785: RET (null)
00786: function(){push(pop().lastElementChild)} (function)
00787: RET (null)
00788: function(){tos().parentNode.removeChild(pop())} (function)
00789: RET (null)
00790: function(){push(document.getElementsByTagName('head')[0])} (function)
00791: RET (null)
00792: function(){push(document.getElementsByTagName('body')[0])} (function)
00793: RET (null)
00794: function(){push(document.getElementById('outputbox'))} (function)
00795: RET (null)
00796: function(){push($(pop()).append(pop())[0])} (function)
00797: lastChild ( parent -- element ) Get the last child of the given element. (object)
00798: RET (null)
00799: function(){push(literal)/*(string)\s*(</e>|</o>|</h>) */} (function)
00800: word ( "delimiter" -- "token" <delimiter> ) Get next "token" from TIB. (object)
00801: compiling ( -- boolean ) Get system state (object)
00802: 0branch ( n -- ) 若 n!==0 就將當前 ip 內數值當作 ip, 否則將 ip 進位 *** 20111224 sam (object)
00803: 805 (number)
00804: literal ( n -- ) Compile TOS as an anonymous constant (object)
00805: RET (null)
00806: function(){push(literal)/*(string)#outputbox */} (function)
00807: compiling ( -- boolean ) Get system state (object)
00808: 0branch ( n -- ) 若 n!==0 就將當前 ip 內數值當作 ip, 否則將 ip 進位 *** 20111224 sam (object)
00809: 815 (number)
00810: literal ( n -- ) Compile TOS as an anonymous constant (object)
00811: compile ( -- ) Compile the next word at dictionary[ip] to dictionary[here]. (object)
00812: doElement ( "html" "jqSelector" -- element ) Run time of <e>,<h> or the likes. (object)
00813: branch ( -- ) 將當前 ip 內數值當作 ip *** 20111224 sam (object)
00814: 816 (number)
00815: doElement ( "html" "jqSelector" -- element ) Run time of <e>,<h> or the likes. (object)
00816: RET (null)
00817: function(){push(literal)/*(string)head */} (function)
00818: compiling ( -- boolean ) Get system state (object)
00819: 0branch ( n -- ) 若 n!==0 就將當前 ip 內數值當作 ip, 否則將 ip 進位 *** 20111224 sam (object)
00820: 826 (number)
00821: literal ( n -- ) Compile TOS as an anonymous constant (object)
00822: compile ( -- ) Compile the next word at dictionary[ip] to dictionary[here]. (object)
00823: doElement ( "html" "jqSelector" -- element ) Run time of <e>,<h> or the likes. (object)
00824: branch ( -- ) 將當前 ip 內數值當作 ip *** 20111224 sam (object)
00825: 827 (number)
00826: doElement ( "html" "jqSelector" -- element ) Run time of <e>,<h> or the likes. (object)
00827: RET (null)
00828: compiling ( -- boolean ) Get system state (object)
00829: 0branch ( n -- ) 若 n!==0 就將當前 ip 內數值當作 ip, 否則將 ip 進位 *** 20111224 sam (object)
00830: 837 (number)
00831: compile ( -- ) Compile the next word at dictionary[ip] to dictionary[here]. (object)
00832: swap ( a b -- b a ) stack operation (object)
00833: compile ( -- ) Compile the next word at dictionary[ip] to dictionary[here]. (object)
00834: doElement ( "html" "jqSelector" -- element ) Run time of <e>,<h> or the likes. (object)
00835: branch ( -- ) 將當前 ip 內數值當作 ip *** 20111224 sam (object)
00836: 839 (number)
00837: swap ( a b -- b a ) stack operation (object)
00838: doElement ( "html" "jqSelector" -- element ) Run time of <e>,<h> or the likes. (object)
00839: RET (null)
00840: function(){push(window.open(pop(1),pop()))} (function)
00841: RET (null)
00842: function(){push(literal)/*(string)input */} (function)
00843: createElement ( <element> -- element ) Create an HTML element w/o instance yet (object)
00844: dup ( a -- a a ) Duplicate TOS. (object)
00845: function(){push(literal)/*(string)type */} (function)
00846: function(){push(literal)/*(string)file */} (function)
00847: setAttribute ( oElement "attr" "value" -- ) Set an attribute to an element (object)
00848: function(){$(tos()).hide()} (function)
00849: eleBody ( -- element ) Get <body> element (object)
00850: over ( a b -- a b a ) Stack operation. (object)
00851: appendChild ( parent element -- ) Append an element to the parent element (object)
00852: function(){tos().click();push(tos().value)} (function)
00853: swap ( a b -- b a ) stack operation (object)
00854: removeElement ( element -- ) Remove an element (object)
00855: RET (null)
00856: function(){push(literal)/*(string)<input type=file> */} (function)
00857: function(){push(literal)/*(string)#outputbox */} (function)
00858: doElement ( "html" "jqSelector" -- element ) Run time of <e>,<h> or the likes. (object)
00859: RET (null)
00860: function(){push(literal)/*(string)<input type=radio> */} (function)
00861: function(){push(literal)/*(string)#outputbox */} (function)
00862: doElement ( "html" "jqSelector" -- element ) Run time of <e>,<h> or the likes. (object)
00863: dup ( a -- a a ) Duplicate TOS. (object)
00864: >r ( n -- ) Push n into the return stack. (object)
00865: swap ( a b -- b a ) stack operation (object)
00866: over ( a b -- a b a ) Stack operation. (object)
00867: function(){push(literal)/*(string)name */} (function)
00868: rot ( w1 w2 w3 -- w2 w3 w1 )  (object)
00869: setAttribute ( oElement "attr" "value" -- ) Set an attribute to an element (object)
00870: swap ( a b -- b a ) stack operation (object)
00871: function(){push(literal)/*(string)value */} (function)
00872: swap ( a b -- b a ) stack operation (object)
00873: setAttribute ( oElement "attr" "value" -- ) Set an attribute to an element (object)
00874: r> ( -- n ) Pop the return stack (object)
00875: RET (null)
00876: function(){push(pop().previousSibling)} (function)
00877: RET (null)
00878: function(){push(pop().nextSibling)} (function)
00879: RET (null)
00880: function(){push(typeof(tos())!='object')} (function)
00881: 0branch ( n -- ) 若 n!==0 就將當前 ip 內數值當作 ip, 否則將 ip 進位 *** 20111224 sam (object)
00882: 889 (number)
00883: . ( sth -- ) Print number or string on TOS. (object)
00884: function(){push(literal)/*(string) is not a HTML-Element! */} (function)
00885: . ( sth -- ) Print number or string on TOS. (object)
00886: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
00887: [] ( -- [] ) empty array. (object)
00888: EXIT (string)
00889: function(){push(pop().firstChild)} (function)
00890: ?dup ( w -- w w | 0 ) Dup TOS if it is not 0|""|false. (object)
00891: 0branch ( n -- ) 若 n!==0 就將當前 ip 內數值當作 ip, 否則將 ip 進位 *** 20111224 sam (object)
00892: 895 (number)
00893: branch ( -- ) 將當前 ip 內數值當作 ip *** 20111224 sam (object)
00894: 897 (number)
00895: [] ( -- [] ) empty array. (object)
00896: EXIT (string)
00897: [] ( -- [] ) empty array. (object)
00898: swap ( a b -- b a ) stack operation (object)
00899: function(){tos(1).push(tos());push(pop().nextSibling)} (function)
00900: dup ( a -- a a ) Duplicate TOS. (object)
00901: not ( x == !x ) Logical not. Capital NOT is for bitwise. (object)
00902: 0branch ( n -- ) 若 n!==0 就將當前 ip 內數值當作 ip, 否則將 ip 進位 *** 20111224 sam (object)
00903: 899 (number)
00904: drop ( x -- ) Remove TOS. (object)
00905: RET (null)
00906: swap ( a b -- b a ) stack operation (object)
00907: function(){push(pop().firstChild)} (function)
00908: ?dup ( w -- w w | 0 ) Dup TOS if it is not 0|""|false. (object)
00909: 0branch ( n -- ) 若 n!==0 就將當前 ip 內數值當作 ip, 否則將 ip 進位 *** 20111224 sam (object)
00910: 913 (number)
00911: branch ( -- ) 將當前 ip 內數值當作 ip *** 20111224 sam (object)
00912: 916 (number)
00913: drop ( x -- ) Remove TOS. (object)
00914: [] ( -- [] ) empty array. (object)
00915: EXIT (string)
00916: [] ( -- [] ) empty array. (object)
00917: -rot ( w1 w2 w3 -- w3 w1 w2 )  (object)
00918: swap ( a b -- b a ) stack operation (object)
00919: >r ( n -- ) Push n into the return stack. (object)
00920: function(){tos(1).push(tos());push(pop().nextSibling)} (function)
00921: dup ( a -- a a ) Duplicate TOS. (object)
00922: 0branch ( n -- ) 若 n!==0 就將當前 ip 內數值當作 ip, 否則將 ip 進位 *** 20111224 sam (object)
00923: 926 (number)
00924: branch ( -- ) 將當前 ip 內數值當作 ip *** 20111224 sam (object)
00925: 930 (number)
00926: r> ( -- n ) Pop the return stack (object)
00927: drop ( x -- ) Remove TOS. (object)
00928: function(){push(literal)/*(number)0 */} (function)
00929: >r ( n -- ) Push n into the return stack. (object)
00930: doNext ( ?? ) next's runtime. (object)
00931: 920 (number)
00932: drop ( x -- ) Remove TOS. (object)
00933: RET (null)
00934: swap ( a b -- b a ) stack operation (object)
00935: function(){push(pop().lastChild)} (function)
00936: ?dup ( w -- w w | 0 ) Dup TOS if it is not 0|""|false. (object)
00937: 0branch ( n -- ) 若 n!==0 就將當前 ip 內數值當作 ip, 否則將 ip 進位 *** 20111224 sam (object)
00938: 941 (number)
00939: branch ( -- ) 將當前 ip 內數值當作 ip *** 20111224 sam (object)
00940: 944 (number)
00941: drop ( x -- ) Remove TOS. (object)
00942: [] ( -- [] ) empty array. (object)
00943: EXIT (string)
00944: [] ( -- [] ) empty array. (object)
00945: -rot ( w1 w2 w3 -- w3 w1 w2 )  (object)
00946: swap ( a b -- b a ) stack operation (object)
00947: >r ( n -- ) Push n into the return stack. (object)
00948: function(){tos(1).unshift(tos());push(pop().previousSibling)} (function)
00949: dup ( a -- a a ) Duplicate TOS. (object)
00950: 0branch ( n -- ) 若 n!==0 就將當前 ip 內數值當作 ip, 否則將 ip 進位 *** 20111224 sam (object)
00951: 954 (number)
00952: branch ( -- ) 將當前 ip 內數值當作 ip *** 20111224 sam (object)
00953: 958 (number)
00954: r> ( -- n ) Pop the return stack (object)
00955: drop ( x -- ) Remove TOS. (object)
00956: function(){push(literal)/*(number)0 */} (function)
00957: >r ( n -- ) Push n into the return stack. (object)
00958: doNext ( ?? ) next's runtime. (object)
00959: 948 (number)
00960: drop ( x -- ) Remove TOS. (object)
00961: RET (null)
00962: 662 (number)
00963: element.f (string)
00964: RET (null)
00965: ce-history ( -- array ) Visited current-element history (object)
00966: function(){pop().push(pop())} (function)
00967: RET (null)
00968: ce-history ( -- array ) Visited current-element history (object)
00969: function(){push(pop().length)} (function)
00970: 0branch ( n -- ) 若 n!==0 就將當前 ip 內數值當作 ip, 否則將 ip 進位 *** 20111224 sam (object)
00971: 974 (number)
00972: branch ( -- ) 將當前 ip 內數值當作 ip *** 20111224 sam (object)
00973: 976 (number)
00974: function(){push(window.document)} (function)
00975: ce! ( element -- ) Set current-element (object)
00976: ce-history ( -- array ) Visited current-element history (object)
00977: function(){push(tos()[pop().length-1])} (function)
00978: function(){push(typeof(tos())=='object'&&tos().parentNode)} (function)
00979: 0branch ( n -- ) 若 n!==0 就將當前 ip 內數值當作 ip, 否則將 ip 進位 *** 20111224 sam (object)
00980: 983 (number)
00981: branch ( -- ) 將當前 ip 內數值當作 ip *** 20111224 sam (object)
00982: 991 (number)
00983: function(){push(tos()==window.document)} (function)
00984: 0branch ( n -- ) 若 n!==0 就將當前 ip 內數值當作 ip, 否則將 ip 進位 *** 20111224 sam (object)
00985: 988 (number)
00986: branch ( -- ) 將當前 ip 內數值當作 ip *** 20111224 sam (object)
00987: 991 (number)
00988: drop ( x -- ) Remove TOS. (object)
00989: ce-history ( -- array ) Visited current-element history (object)
00990: function(){tos().pop();push(tos()[pop().length-1])} (function)
00991: RET (null)
00992: dup ( a -- a a ) Duplicate TOS. (object)
00993: children ( ele -- array ) All children of the element (object)
00994: function(){ 
                        var i=0, a=pop(), element=pop(); if (typeof(element)=='object') { 
                                print(node(element)+'\n'); 
                                for(; i<a.length; i++){ 
                                        push(i);fortheval('5 .r'); 
                                        print(" : " + node(a[i]) + '\n'); 
                                } 
                        } 
                        function attr(ele,att) { 
                                var v = ""; 
                                if (ele.getAttribute && ele.getAttribute(att)) { 
                                        v = att + "='" + ele.getAttribute(att) + "'; "; 
                                } 
                                return v; 
                        } 
                        function text(len, s) { 
                                 return (s.replace(/\s+/gm,' ').slice(0,100-len) + '...'); 
                        } 
                        function node(ele){ 
                                var s = ele.toString() + ' '; 
                                s += attr(ele,'id') + attr(ele,'class') + attr(ele,'name'); 
                                if (ele.innerHTML) s += 'innerHTML=' + text(s.length+10,ele.innerHTML); 
                                else if (ele.textContent) s += text(s.length,ele.textContent); 
                                return s; 
                        } 
                } (function)
00995: RET (null)
00996: ce@ ( -- element ) Get current-element (object)
00997: function(){push(typeof(pop())=='object')} (function)
00998: 0branch ( n -- ) 若 n!==0 就將當前 ip 內數值當作 ip, 否則將 ip 進位 *** 20111224 sam (object)
00999: 1020 (number)
01000: function(){push(tos()=='..')} (function)
01001: 0branch ( n -- ) 若 n!==0 就將當前 ip 內數值當作 ip, 否則將 ip 進位 *** 20111224 sam (object)
01002: 1008 (number)
01003: drop ( x -- ) Remove TOS. (object)
01004: ce@ ( -- element ) Get current-element (object)
01005: function(){push(pop().parentNode)} (function)
01006: branch ( -- ) 將當前 ip 內數值當作 ip *** 20111224 sam (object)
01007: 1018 (number)
01008: ce@ ( -- element ) Get current-element (object)
01009: children ( ele -- array ) All children of the element (object)
01010: function(){push(parseInt(tos(1))<tos().length)} (function)
01011: 0branch ( n -- ) 若 n!==0 就將當前 ip 內數值當作 ip, 否則將 ip 進位 *** 20111224 sam (object)
01012: 1016 (number)
01013: function(){push(pop()[parseInt(pop())])} (function)
01014: branch ( -- ) 將當前 ip 內數值當作 ip *** 20111224 sam (object)
01015: 1018 (number)
01016: 2drop ( ... a b -- ... ) (object)
01017: ce@ ( -- element ) Get current-element (object)
01018: branch ( -- ) 將當前 ip 內數值當作 ip *** 20111224 sam (object)
01019: 1022 (number)
01020: drop ( x -- ) Remove TOS. (object)
01021: false ( -- false ) boolean false. (object)
01022: function(){push(Boolean(tos()))} (function)
01023: 0branch ( n -- ) 若 n!==0 就將當前 ip 內數值當作 ip, 否則將 ip 進位 *** 20111224 sam (object)
01024: 1027 (number)
01025: branch ( -- ) 將當前 ip 內數值當作 ip *** 20111224 sam (object)
01026: 1029 (number)
01027: drop ( x -- ) Remove TOS. (object)
01028: function(){push(window.document)} (function)
01029: ce! ( element -- ) Set current-element (object)
01030: ce@ ( -- element ) Get current-element (object)
01031: RET (null)
01032: BL ( -- "\s" ) RegEx white space. (object)
01033: word ( "delimiter" -- "token" <delimiter> ) Get next "token" from TIB. (object)
01034: ?dup ( w -- w w | 0 ) Dup TOS if it is not 0|""|false. (object)
01035: 0branch ( n -- ) 若 n!==0 就將當前 ip 內數值當作 ip, 否則將 ip 進位 *** 20111224 sam (object)
01036: 1040 (number)
01037: (ce) ( index -- ce@ ) change current-element to current-element[index] or '..' to parent element. (object)
01038: branch ( -- ) 將當前 ip 內數值當作 ip *** 20111224 sam (object)
01039: 1041 (number)
01040: ce@ ( -- element ) Get current-element (object)
01041: se ( element -- ) See the element (object)
01042: RET (null)
01043: ce-history ( -- array ) Visited current-element history (object)
01044: function(){pop().pop()} (function)
01045: ce@ ( -- element ) Get current-element (object)
01046: se ( element -- ) See the element (object)
01047: RET (null)
01048: children ( ele -- array ) All children of the element (object)
01049: function(){ 
                        for(var a=pop(),i=a.length-1; i>=0; i--) { 
                                if (a[i].toString()=='[object Text]'||a[i].toString()=='[object HTMLBRElement]') { 
                                        push(a[i]); 
                                        execute('removeElement'); 
                                } 
                        } 
                } (function)
01050: RET (null)
01051: ce@ ( -- element ) Get current-element (object)
01052: (er) ( element -- ) Erase children of [object Text] (object)
01053: RET (null)
01054: 662 (number)
01055: platform.f (string)
01056: RET (null)
01057: function(){push(confirm("Really want to restart?"))} (function)
01058: RET (null)
01059: function(){push(literal)/*(string)Input box EditMode =  */} (function)
01060: . ( sth -- ) Print number or string on TOS. (object)
01061: function(){push(kvm.EditMode=Boolean(kvm.EditMode^true))} (function)
01062: dup ( a -- a a ) Duplicate TOS. (object)
01063: . ( sth -- ) Print number or string on TOS. (object)
01064: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
01065: 0branch ( n -- ) 若 n!==0 就將當前 ip 內數值當作 ip, 否則將 ip 進位 *** 20111224 sam (object)
01066: 1070 (number)
01067: function(){push(literal)/*(string)textarea:focus { border: 0px solid; background:#FFE0E0; } */} (function)
01068: branch ( -- ) 將當前 ip 內數值當作 ip *** 20111224 sam (object)
01069: 1071 (number)
01070: function(){push(literal)/*(string)textarea:focus { border: 0px solid; background:#E0E0E0; } */} (function)
01071: function(){push(styleTextareaFocus.innerHTML=pop())} (function)
01072: function(){jump2endofinputbox.click();inputbox.focus();} (function)
01073: false ( -- false ) boolean false. (object)
01074: RET (null)
01075: function(){document.getElementById("inputbox").value=""} (function)
01076: false ( -- false ) boolean false. (object)
01077: RET (null)
01078: function(){push(kvm.EditMode && !event.ctrlKey)} (function)
01079: 0branch ( n -- ) 若 n!==0 就將當前 ip 內數值當作 ip, 否則將 ip 進位 *** 20111224 sam (object)
01080: 1084 (number)
01081: true ( -- true ) boolean true. (object)
01082: branch ( -- ) 將當前 ip 內數值當作 ip *** 20111224 sam (object)
01083: 1086 (number)
01084: function(){document.getElementById("inputbox").value=kvm.cmdhistory.up();} (function)
01085: false ( -- false ) boolean false. (object)
01086: RET (null)
01087: function(){push(kvm.EditMode && !event.ctrlKey)} (function)
01088: 0branch ( n -- ) 若 n!==0 就將當前 ip 內數值當作 ip, 否則將 ip 進位 *** 20111224 sam (object)
01089: 1093 (number)
01090: true ( -- true ) boolean true. (object)
01091: branch ( -- ) 將當前 ip 內數值當作 ip *** 20111224 sam (object)
01092: 1095 (number)
01093: function(){document.getElementById("inputbox").value=kvm.cmdhistory.down();} (function)
01094: false ( -- false ) boolean false. (object)
01095: RET (null)
01096: function(){push(inputbox.value)} (function)
01097: 0branch ( n -- ) 若 n!==0 就將當前 ip 內數值當作 ip, 否則將 ip 進位 *** 20111224 sam (object)
01098: 1102 (number)
01099: true ( -- true ) boolean true. (object)
01100: branch ( -- ) 將當前 ip 內數值當作 ip *** 20111224 sam (object)
01101: 1195 (number)
01102: function(){push(event==null||event.altKey)} (function)
01103: 0branch ( n -- ) 若 n!==0 就將當前 ip 內數值當作 ip, 否則將 ip 進位 *** 20111224 sam (object)
01104: 1144 (number)
01105: function(){push(event==null||event.shiftKey)} (function)
01106: 0branch ( n -- ) 若 n!==0 就將當前 ip 內數值當作 ip, 否則將 ip 進位 *** 20111224 sam (object)
01107: 1111 (number)
01108: function(){push(literal)/*(number)30 */} (function)
01109: branch ( -- ) 將當前 ip 內數值當作 ip *** 20111224 sam (object)
01110: 1112 (number)
01111: function(){push(literal)/*(number)1 */} (function)
01112: >r ( n -- ) Push n into the return stack. (object)
01113: function(){push(event&&event.ctrlKey)} (function)
01114: 0branch ( n -- ) 若 n!==0 就將當前 ip 內數值當作 ip, 否則將 ip 進位 *** 20111224 sam (object)
01115: 1123 (number)
01116: function(){push(outputbox.firstChild)} (function)
01117: ?dup ( w -- w w | 0 ) Dup TOS if it is not 0|""|false. (object)
01118: 0branch ( n -- ) 若 n!==0 就將當前 ip 內數值當作 ip, 否則將 ip 進位 *** 20111224 sam (object)
01119: 1121 (number)
01120: removeElement ( element -- ) Remove an element (object)
01121: branch ( -- ) 將當前 ip 內數值當作 ip *** 20111224 sam (object)
01122: 1140 (number)
01123: function(){push(outputbox.firstChild)} (function)
01124: ?dup ( w -- w w | 0 ) Dup TOS if it is not 0|""|false. (object)
01125: 0branch ( n -- ) 若 n!==0 就將當前 ip 內數值當作 ip, 否則將 ip 進位 *** 20111224 sam (object)
01126: 1140 (number)
01127: function(){push(tos().nodeName)} (function)
01128: function(){push(literal)/*(string)BR */} (function)
01129: = ( a b -- a=b ) 經轉換後比較 a 是否等於 b, "123" = 123. (object)
01130: function(){push(tos(1).nodeName)} (function)
01131: function(){push(literal)/*(string)#text */} (function)
01132: = ( a b -- a=b ) 經轉換後比較 a 是否等於 b, "123" = 123. (object)
01133: or ( a b == a or b ) Logical or. See also '||' and 'OR'. (object)
01134: 0branch ( n -- ) 若 n!==0 就將當前 ip 內數值當作 ip, 否則將 ip 進位 *** 20111224 sam (object)
01135: 1139 (number)
01136: removeElement ( element -- ) Remove an element (object)
01137: branch ( -- ) 將當前 ip 內數值當作 ip *** 20111224 sam (object)
01138: 1140 (number)
01139: drop ( x -- ) Remove TOS. (object)
01140: doNext ( ?? ) next's runtime. (object)
01141: 1113 (number)
01142: branch ( -- ) 將當前 ip 內數值當作 ip *** 20111224 sam (object)
01143: 1194 (number)
01144: function(){push(outputbox.lastChild)} (function)
01145: ?dup ( w -- w w | 0 ) Dup TOS if it is not 0|""|false. (object)
01146: 0branch ( n -- ) 若 n!==0 就將當前 ip 內數值當作 ip, 否則將 ip 進位 *** 20111224 sam (object)
01147: 1157 (number)
01148: function(){push(tos().nodeName)} (function)
01149: function(){push(literal)/*(string)BR */} (function)
01150: = ( a b -- a=b ) 經轉換後比較 a 是否等於 b, "123" = 123. (object)
01151: 0branch ( n -- ) 若 n!==0 就將當前 ip 內數值當作 ip, 否則將 ip 進位 *** 20111224 sam (object)
01152: 1156 (number)
01153: removeElement ( element -- ) Remove an element (object)
01154: branch ( -- ) 將當前 ip 內數值當作 ip *** 20111224 sam (object)
01155: 1157 (number)
01156: drop ( x -- ) Remove TOS. (object)
01157: function(){push(event==null||event.shiftKey)} (function)
01158: 0branch ( n -- ) 若 n!==0 就將當前 ip 內數值當作 ip, 否則將 ip 進位 *** 20111224 sam (object)
01159: 1163 (number)
01160: function(){push(literal)/*(number)30 */} (function)
01161: branch ( -- ) 將當前 ip 內數值當作 ip *** 20111224 sam (object)
01162: 1164 (number)
01163: function(){push(literal)/*(number)1 */} (function)
01164: >r ( n -- ) Push n into the return stack. (object)
01165: function(){push(event&&event.ctrlKey)} (function)
01166: 0branch ( n -- ) 若 n!==0 就將當前 ip 內數值當作 ip, 否則將 ip 進位 *** 20111224 sam (object)
01167: 1175 (number)
01168: function(){push(outputbox.lastChild)} (function)
01169: ?dup ( w -- w w | 0 ) Dup TOS if it is not 0|""|false. (object)
01170: 0branch ( n -- ) 若 n!==0 就將當前 ip 內數值當作 ip, 否則將 ip 進位 *** 20111224 sam (object)
01171: 1173 (number)
01172: removeElement ( element -- ) Remove an element (object)
01173: branch ( -- ) 將當前 ip 內數值當作 ip *** 20111224 sam (object)
01174: 1192 (number)
01175: function(){push(outputbox.lastChild)} (function)
01176: ?dup ( w -- w w | 0 ) Dup TOS if it is not 0|""|false. (object)
01177: 0branch ( n -- ) 若 n!==0 就將當前 ip 內數值當作 ip, 否則將 ip 進位 *** 20111224 sam (object)
01178: 1192 (number)
01179: function(){push(tos().nodeName)} (function)
01180: function(){push(literal)/*(string)BR */} (function)
01181: = ( a b -- a=b ) 經轉換後比較 a 是否等於 b, "123" = 123. (object)
01182: function(){push(tos(1).nodeName)} (function)
01183: function(){push(literal)/*(string)#text */} (function)
01184: = ( a b -- a=b ) 經轉換後比較 a 是否等於 b, "123" = 123. (object)
01185: or ( a b == a or b ) Logical or. See also '||' and 'OR'. (object)
01186: 0branch ( n -- ) 若 n!==0 就將當前 ip 內數值當作 ip, 否則將 ip 進位 *** 20111224 sam (object)
01187: 1191 (number)
01188: removeElement ( element -- ) Remove an element (object)
01189: branch ( -- ) 將當前 ip 內數值當作 ip *** 20111224 sam (object)
01190: 1192 (number)
01191: drop ( x -- ) Remove TOS. (object)
01192: doNext ( ?? ) next's runtime. (object)
01193: 1165 (number)
01194: false ( -- false ) boolean false. (object)
01195: RET (null)
01196: function(){push(literal)/*(string)\n|\r */} (function)
01197: word ( "delimiter" -- "token" <delimiter> ) Get next "token" from TIB. (object)
01198: function(){push(tos().length)} (function)
01199: 0branch ( n -- ) 若 n!==0 就將當前 ip 內數值當作 ip, 否則將 ip 進位 *** 20111224 sam (object)
01200: 1204 (number)
01201: (help) ( "pattern" -- ) Print help message of screened words (object)
01202: branch ( -- ) 將當前 ip 內數值當作 ip *** 20111224 sam (object)
01203: 1208 (number)
01204: function(){push(literal)/*(string)
                                                F2    : Toggle input box EditMode 
                                                F4    : Copy marked string to input box 
                                                F5    : Restart jeforth.3htm 
                                                F9    : Smaller input box 
                                                F10   : Bigger input box 
                                                Esc   : Clear the input box 
                                                Enter : Focus on the input box 
                                                Ctrl+ : Bigger font size 
                                                Ctrl- : Smaller font size 
                                                Backspace : Refer to "help -N {backSpace}" for details 

                                                help <pattern> : Refer to "help -N (help)" for details 
                                                see <word>     : See details of the word 
                                                jsc            : JavaScript console 
                                         */} (function)
01205: function(){push(pop().replace(/^[ \t]*/gm,'\t'))} (function)
01206: . ( sth -- ) Print number or string on TOS. (object)
01207: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
01208: RET (null)
01209: 662 (number)
01210: vb.f (string)
01211: RET (null)
01212: function(){push(literal)/*(string)</vb> */} (function)
01213: word ( "delimiter" -- "token" <delimiter> ) Get next "token" from TIB. (object)
01214: compiling ( -- boolean ) Get system state (object)
01215: 0branch ( n -- ) 若 n!==0 就將當前 ip 內數值當作 ip, 否則將 ip 進位 *** 20111224 sam (object)
01216: 1218 (number)
01217: literal ( n -- ) Compile TOS as an anonymous constant (object)
01218: RET (null)
01219: compiling ( -- boolean ) Get system state (object)
01220: 0branch ( n -- ) 若 n!==0 就將當前 ip 內數值當作 ip, 否則將 ip 進位 *** 20111224 sam (object)
01221: 1226 (number)
01222: compile ( -- ) Compile the next word at dictionary[ip] to dictionary[here]. (object)
01223: vbExecute ( "string" -- ) Execute the given vbs statements, you need to push return value in your program. (object)
01224: branch ( -- ) 將當前 ip 內數值當作 ip *** 20111224 sam (object)
01225: 1227 (number)
01226: vbExecute ( "string" -- ) Execute the given vbs statements, you need to push return value in your program. (object)
01227: RET (null)
01228: BL ( -- "\s" ) RegEx white space. (object)
01229: word ( "delimiter" -- "token" <delimiter> ) Get next "token" from TIB. (object)
01230: compiling ( -- boolean ) Get system state (object)
01231: 0branch ( n -- ) 若 n!==0 就將當前 ip 內數值當作 ip, 否則將 ip 進位 *** 20111224 sam (object)
01232: 1238 (number)
01233: literal ( n -- ) Compile TOS as an anonymous constant (object)
01234: compile ( -- ) Compile the next word at dictionary[ip] to dictionary[here]. (object)
01235: vbExecute ( "string" -- ) Execute the given vbs statements, you need to push return value in your program. (object)
01236: branch ( -- ) 將當前 ip 內數值當作 ip *** 20111224 sam (object)
01237: 1239 (number)
01238: vbExecute ( "string" -- ) Execute the given vbs statements, you need to push return value in your program. (object)
01239: RET (null)
01240: BL ( -- "\s" ) RegEx white space. (object)
01241: word ( "delimiter" -- "token" <delimiter> ) Get next "token" from TIB. (object)
01242: compiling ( -- boolean ) Get system state (object)
01243: 0branch ( n -- ) 若 n!==0 就將當前 ip 內數值當作 ip, 否則將 ip 進位 *** 20111224 sam (object)
01244: 1250 (number)
01245: literal ( n -- ) Compile TOS as an anonymous constant (object)
01246: compile ( -- ) Compile the next word at dictionary[ip] to dictionary[here]. (object)
01247: vbEval ( "string" -- result ) Evaluate the given vbs statements return value on TOS. (object)
01248: branch ( -- ) 將當前 ip 內數值當作 ip *** 20111224 sam (object)
01249: 1251 (number)
01250: vbEval ( "string" -- result ) Evaluate the given vbs statements return value on TOS. (object)
01251: RET (null)
01252: function(){ 
                                                if(stack.length==0 || isNaN(tos())) push(0); 
                                                kvm.process.terminate(pop()); 
                                        } (function)
01253: RET (null)
01254: dup ( a -- a a ) Duplicate TOS. (object)
01255: null ( -- null ) Get a null value. (object)
01256: = ( a b -- a=b ) 經轉換後比較 a 是否等於 b, "123" = 123. (object)
01257: 0branch ( n -- ) 若 n!==0 就將當前 ip 內數值當作 ip, 否則將 ip 進位 *** 20111224 sam (object)
01258: 1261 (number)
01259: branch ( -- ) 將當前 ip 內數值當作 ip *** 20111224 sam (object)
01260: 1262 (number)
01261: function(){push(pop().toArray())} (function)
01262: . ( sth -- ) Print number or string on TOS. (object)
01263: RET (null)
01264: 662 (number)
01265: wsh.f (string)
01266: RET (null)
01267: function(){push(WshShell.run(pop(),5,true))} (function)
01268: RET (null)
01269: function(){push(literal)/*(string)\n|\r */} (function)
01270: word ( "delimiter" -- "token" <delimiter> ) Get next "token" from TIB. (object)
01271: (run) ( "command-line" -- errorlevel ) Run anything like Win-R does and wait for the return. (object)
01272: RET (null)
01273: function(){WshShell.run(pop(),5,false) } (function)
01274: RET (null)
01275: function(){push(literal)/*(string)\n|\r */} (function)
01276: word ( "delimiter" -- "token" <delimiter> ) Get next "token" from TIB. (object)
01277: (fork) ( "command-line" -- ) Fork anything like Win-R does, fire and forget, no return value. (object)
01278: RET (null)
01279: function(){push(literal)/*(string)cmd /c  */} (function)
01280: swap ( a b -- b a ) stack operation (object)
01281: + ( a b -- a+b) Add two numbers or concatenate two strings. (object)
01282: (run) ( "command-line" -- errorlevel ) Run anything like Win-R does and wait for the return. (object)
01283: RET (null)
01284: function(){push(literal)/*(string)\n|\r */} (function)
01285: word ( "delimiter" -- "token" <delimiter> ) Get next "token" from TIB. (object)
01286: function(){push(literal)/*(string)cmd /k  */} (function)
01287: swap ( a b -- b a ) stack operation (object)
01288: + ( a b -- a+b) Add two numbers or concatenate two strings. (object)
01289: (run) ( "command-line" -- errorlevel ) Run anything like Win-R does and wait for the return. (object)
01290: RET (null)
01291: function(){push(kvm.fso.FileExists(pop()))} (function)
01292: RET (null)
01293: GetAbsolutePathName ( "path-name" -- "path-name" ) Get complete and unambiguous path from a provided path specification (object)
01294: function(){push(literal)/*(string)\ */} (function)
01295: + ( a b -- a+b) Add two numbers or concatenate two strings. (object)
01296: RET (null)
01297: >r ( n -- ) Push n into the return stack. (object)
01298: full-path ( "short-path" -- "fullpath" ) Get full path string of the given short path, w/o error check. (object)
01299: r> ( -- n ) Pop the return stack (object)
01300: + ( a b -- a+b) Add two numbers or concatenate two strings. (object)
01301: RET (null)
01302: function(){push(literal)/*(string)kvm.push(Timer) */} (function)
01303: vbExecute ( "string" -- ) Execute the given vbs statements, you need to push return value in your program. (object)
01304: RET (null)
01305: 662 (number)
01306: env.f (string)
01307: RET (null)
01308: WshSysEnv ( ?? ) No help message. Use // to add one. (object)
01309: function(){push(pop().Item(nexttoken()))} (function)
01310: RET (null)
01311: WshSysEnv ( ?? ) No help message. Use // to add one. (object)
01312: function(){push(pop().Item(pop())=pop())} (function)
01313: RET (null)
01314: WshSysEnv ( ?? ) No help message. Use // to add one. (object)
01315: function(){push(pop().Item(pop()))} (function)
01316: RET (null)
01317: WshProcEnv ( ?? ) No help message. Use // to add one. (object)
01318: function(){push(pop().Item(nexttoken()))} (function)
01319: RET (null)
01320: WshProcEnv ( ?? ) No help message. Use // to add one. (object)
01321: function(){push(pop().Item(pop()))} (function)
01322: RET (null)
01323: WshProcEnv ( ?? ) No help message. Use // to add one. (object)
01324: function(){push(pop().Item(pop())=pop())} (function)
01325: RET (null)
01326: WshUserEnv ( ?? ) No help message. Use // to add one. (object)
01327: function(){push(pop().Item(nexttoken()))} (function)
01328: RET (null)
01329: WshUserEnv ( ?? ) No help message. Use // to add one. (object)
01330: function(){push(pop().Item(pop()))} (function)
01331: RET (null)
01332: WshUserEnv ( ?? ) No help message. Use // to add one. (object)
01333: function(){push(pop().Item(pop())=pop())} (function)
01334: RET (null)
01335: function(){push(WshShell.expandenvironmentstrings(pop()))} (function)
01336: RET (null)
01337: function(){push(literal)/*(string) sys-env NUMBER_OF_PROCESSORS   =  */} (function)
01338: . ( sth -- ) Print number or string on TOS. (object)
01339: function(){push(literal)/*(string)NUMBER_OF_PROCESSORS */} (function)
01340: sys-env@ ( "name" -- value ) Get value from a System environment variable (object)
01341: . ( sth -- ) Print number or string on TOS. (object)
01342: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
01343: function(){push(literal)/*(string) sys-env OS                     =  */} (function)
01344: . ( sth -- ) Print number or string on TOS. (object)
01345: function(){push(literal)/*(string)OS */} (function)
01346: sys-env@ ( "name" -- value ) Get value from a System environment variable (object)
01347: . ( sth -- ) Print number or string on TOS. (object)
01348: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
01349: function(){push(literal)/*(string) sys-env PATH                   =  */} (function)
01350: . ( sth -- ) Print number or string on TOS. (object)
01351: function(){push(literal)/*(string)PATH */} (function)
01352: sys-env@ ( "name" -- value ) Get value from a System environment variable (object)
01353: . ( sth -- ) Print number or string on TOS. (object)
01354: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
01355: function(){push(literal)/*(string) sys-env PATHEXT                =  */} (function)
01356: . ( sth -- ) Print number or string on TOS. (object)
01357: function(){push(literal)/*(string)PATHEXT */} (function)
01358: sys-env@ ( "name" -- value ) Get value from a System environment variable (object)
01359: . ( sth -- ) Print number or string on TOS. (object)
01360: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
01361: function(){push(literal)/*(string) sys-env PROCESSOR_ARCHITECTURE =  */} (function)
01362: . ( sth -- ) Print number or string on TOS. (object)
01363: function(){push(literal)/*(string)PROCESSOR_ARCHITECTURE */} (function)
01364: sys-env@ ( "name" -- value ) Get value from a System environment variable (object)
01365: . ( sth -- ) Print number or string on TOS. (object)
01366: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
01367: function(){push(literal)/*(string) sys-env PROCESSOR_IDENTIFIER   =  */} (function)
01368: . ( sth -- ) Print number or string on TOS. (object)
01369: function(){push(literal)/*(string)PROCESSOR_IDENTIFIER */} (function)
01370: sys-env@ ( "name" -- value ) Get value from a System environment variable (object)
01371: . ( sth -- ) Print number or string on TOS. (object)
01372: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
01373: function(){push(literal)/*(string) sys-env PROCESSOR_LEVEL        =  */} (function)
01374: . ( sth -- ) Print number or string on TOS. (object)
01375: function(){push(literal)/*(string)PROCESSOR_LEVEL */} (function)
01376: sys-env@ ( "name" -- value ) Get value from a System environment variable (object)
01377: . ( sth -- ) Print number or string on TOS. (object)
01378: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
01379: function(){push(literal)/*(string) sys-env PROCESSOR_REVISION     =  */} (function)
01380: . ( sth -- ) Print number or string on TOS. (object)
01381: function(){push(literal)/*(string)PROCESSOR_REVISION */} (function)
01382: sys-env@ ( "name" -- value ) Get value from a System environment variable (object)
01383: . ( sth -- ) Print number or string on TOS. (object)
01384: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
01385: function(){push(literal)/*(string)proc-env ALLUSERSPROFILE        =  */} (function)
01386: . ( sth -- ) Print number or string on TOS. (object)
01387: function(){push(literal)/*(string)ALLUSERSPROFILE */} (function)
01388: proc-env@ ( "name" -- value ) Get value from a Process environment variable (object)
01389: . ( sth -- ) Print number or string on TOS. (object)
01390: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
01391: function(){push(literal)/*(string)proc-env APPDATA                =  */} (function)
01392: . ( sth -- ) Print number or string on TOS. (object)
01393: function(){push(literal)/*(string)APPDATA */} (function)
01394: proc-env@ ( "name" -- value ) Get value from a Process environment variable (object)
01395: . ( sth -- ) Print number or string on TOS. (object)
01396: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
01397: function(){push(literal)/*(string)proc-env COMMONPROGRAMFILES     =  */} (function)
01398: . ( sth -- ) Print number or string on TOS. (object)
01399: function(){push(literal)/*(string)COMMONPROGRAMFILES */} (function)
01400: proc-env@ ( "name" -- value ) Get value from a Process environment variable (object)
01401: . ( sth -- ) Print number or string on TOS. (object)
01402: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
01403: function(){push(literal)/*(string)proc-env COMMONPROGRAMFILES(X86)=  */} (function)
01404: . ( sth -- ) Print number or string on TOS. (object)
01405: function(){push(literal)/*(string)COMMONPROGRAMFILES(X86) */} (function)
01406: proc-env@ ( "name" -- value ) Get value from a Process environment variable (object)
01407: . ( sth -- ) Print number or string on TOS. (object)
01408: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
01409: function(){push(literal)/*(string)proc-env COMMONPROGRAMW6432     =  */} (function)
01410: . ( sth -- ) Print number or string on TOS. (object)
01411: function(){push(literal)/*(string)COMMONPROGRAMW6432 */} (function)
01412: proc-env@ ( "name" -- value ) Get value from a Process environment variable (object)
01413: . ( sth -- ) Print number or string on TOS. (object)
01414: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
01415: function(){push(literal)/*(string)proc-env COMPUTERNAME           =  */} (function)
01416: . ( sth -- ) Print number or string on TOS. (object)
01417: function(){push(literal)/*(string)COMPUTERNAME */} (function)
01418: proc-env@ ( "name" -- value ) Get value from a Process environment variable (object)
01419: . ( sth -- ) Print number or string on TOS. (object)
01420: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
01421: function(){push(literal)/*(string)proc-env COMSPEC                =  */} (function)
01422: . ( sth -- ) Print number or string on TOS. (object)
01423: function(){push(literal)/*(string)COMSPEC */} (function)
01424: proc-env@ ( "name" -- value ) Get value from a Process environment variable (object)
01425: . ( sth -- ) Print number or string on TOS. (object)
01426: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
01427: function(){push(literal)/*(string)proc-env HOMEDRIVE              =  */} (function)
01428: . ( sth -- ) Print number or string on TOS. (object)
01429: function(){push(literal)/*(string)HOMEDRIVE */} (function)
01430: proc-env@ ( "name" -- value ) Get value from a Process environment variable (object)
01431: . ( sth -- ) Print number or string on TOS. (object)
01432: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
01433: function(){push(literal)/*(string)proc-env HOMEPATH               =  */} (function)
01434: . ( sth -- ) Print number or string on TOS. (object)
01435: function(){push(literal)/*(string)HOMEPATH */} (function)
01436: proc-env@ ( "name" -- value ) Get value from a Process environment variable (object)
01437: . ( sth -- ) Print number or string on TOS. (object)
01438: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
01439: function(){push(literal)/*(string)proc-env LOCALAPPDATA           =  */} (function)
01440: . ( sth -- ) Print number or string on TOS. (object)
01441: function(){push(literal)/*(string)LOCALAPPDATA */} (function)
01442: proc-env@ ( "name" -- value ) Get value from a Process environment variable (object)
01443: . ( sth -- ) Print number or string on TOS. (object)
01444: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
01445: function(){push(literal)/*(string)proc-env LOGONSERVER            =  */} (function)
01446: . ( sth -- ) Print number or string on TOS. (object)
01447: function(){push(literal)/*(string)LOGONSERVER */} (function)
01448: proc-env@ ( "name" -- value ) Get value from a Process environment variable (object)
01449: . ( sth -- ) Print number or string on TOS. (object)
01450: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
01451: function(){push(literal)/*(string)proc-env PROCESSOR_ARCHITEW6432 =  */} (function)
01452: . ( sth -- ) Print number or string on TOS. (object)
01453: function(){push(literal)/*(string)PROCESSOR_ARCHITEW6432 */} (function)
01454: proc-env@ ( "name" -- value ) Get value from a Process environment variable (object)
01455: . ( sth -- ) Print number or string on TOS. (object)
01456: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
01457: function(){push(literal)/*(string)proc-env PROGRAMDATA            =  */} (function)
01458: . ( sth -- ) Print number or string on TOS. (object)
01459: function(){push(literal)/*(string)PROGRAMDATA */} (function)
01460: proc-env@ ( "name" -- value ) Get value from a Process environment variable (object)
01461: . ( sth -- ) Print number or string on TOS. (object)
01462: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
01463: function(){push(literal)/*(string)proc-env PROGRAMFILES           =  */} (function)
01464: . ( sth -- ) Print number or string on TOS. (object)
01465: function(){push(literal)/*(string)PROGRAMFILES */} (function)
01466: proc-env@ ( "name" -- value ) Get value from a Process environment variable (object)
01467: . ( sth -- ) Print number or string on TOS. (object)
01468: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
01469: function(){push(literal)/*(string)proc-env PROGRAMFILES(X86)      =  */} (function)
01470: . ( sth -- ) Print number or string on TOS. (object)
01471: function(){push(literal)/*(string)PROGRAMFILES(X86) */} (function)
01472: proc-env@ ( "name" -- value ) Get value from a Process environment variable (object)
01473: . ( sth -- ) Print number or string on TOS. (object)
01474: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
01475: function(){push(literal)/*(string)proc-env PROGRAMW6432           =  */} (function)
01476: . ( sth -- ) Print number or string on TOS. (object)
01477: function(){push(literal)/*(string)PROGRAMW6432 */} (function)
01478: proc-env@ ( "name" -- value ) Get value from a Process environment variable (object)
01479: . ( sth -- ) Print number or string on TOS. (object)
01480: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
01481: function(){push(literal)/*(string)proc-env PROMPT                 =  */} (function)
01482: . ( sth -- ) Print number or string on TOS. (object)
01483: function(){push(literal)/*(string)PROMPT */} (function)
01484: proc-env@ ( "name" -- value ) Get value from a Process environment variable (object)
01485: . ( sth -- ) Print number or string on TOS. (object)
01486: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
01487: function(){push(literal)/*(string)proc-env PUBLIC                 =  */} (function)
01488: . ( sth -- ) Print number or string on TOS. (object)
01489: function(){push(literal)/*(string)PUBLIC */} (function)
01490: proc-env@ ( "name" -- value ) Get value from a Process environment variable (object)
01491: . ( sth -- ) Print number or string on TOS. (object)
01492: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
01493: function(){push(literal)/*(string)proc-env SESSIONNAME            =  */} (function)
01494: . ( sth -- ) Print number or string on TOS. (object)
01495: function(){push(literal)/*(string)SESSIONNAME */} (function)
01496: proc-env@ ( "name" -- value ) Get value from a Process environment variable (object)
01497: . ( sth -- ) Print number or string on TOS. (object)
01498: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
01499: function(){push(literal)/*(string)proc-env SYSTEMDRIVE            =  */} (function)
01500: . ( sth -- ) Print number or string on TOS. (object)
01501: function(){push(literal)/*(string)SYSTEMDRIVE */} (function)
01502: proc-env@ ( "name" -- value ) Get value from a Process environment variable (object)
01503: . ( sth -- ) Print number or string on TOS. (object)
01504: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
01505: function(){push(literal)/*(string)proc-env SYSTEMROOT             =  */} (function)
01506: . ( sth -- ) Print number or string on TOS. (object)
01507: function(){push(literal)/*(string)SYSTEMROOT */} (function)
01508: proc-env@ ( "name" -- value ) Get value from a Process environment variable (object)
01509: . ( sth -- ) Print number or string on TOS. (object)
01510: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
01511: function(){push(literal)/*(string)proc-env TEMP                   =  */} (function)
01512: . ( sth -- ) Print number or string on TOS. (object)
01513: function(){push(literal)/*(string)TEMP */} (function)
01514: proc-env@ ( "name" -- value ) Get value from a Process environment variable (object)
01515: . ( sth -- ) Print number or string on TOS. (object)
01516: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
01517: function(){push(literal)/*(string)proc-env TMP                    =  */} (function)
01518: . ( sth -- ) Print number or string on TOS. (object)
01519: function(){push(literal)/*(string)TMP */} (function)
01520: proc-env@ ( "name" -- value ) Get value from a Process environment variable (object)
01521: . ( sth -- ) Print number or string on TOS. (object)
01522: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
01523: function(){push(literal)/*(string)proc-env USERDNSDOMAIN          =  */} (function)
01524: . ( sth -- ) Print number or string on TOS. (object)
01525: function(){push(literal)/*(string)USERDNSDOMAIN */} (function)
01526: proc-env@ ( "name" -- value ) Get value from a Process environment variable (object)
01527: . ( sth -- ) Print number or string on TOS. (object)
01528: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
01529: function(){push(literal)/*(string)proc-env USERDOMAIN             =  */} (function)
01530: . ( sth -- ) Print number or string on TOS. (object)
01531: function(){push(literal)/*(string)USERDOMAIN */} (function)
01532: proc-env@ ( "name" -- value ) Get value from a Process environment variable (object)
01533: . ( sth -- ) Print number or string on TOS. (object)
01534: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
01535: function(){push(literal)/*(string)proc-env USERNAME               =  */} (function)
01536: . ( sth -- ) Print number or string on TOS. (object)
01537: function(){push(literal)/*(string)USERNAME */} (function)
01538: proc-env@ ( "name" -- value ) Get value from a Process environment variable (object)
01539: . ( sth -- ) Print number or string on TOS. (object)
01540: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
01541: function(){push(literal)/*(string)proc-env USERPROFILE            =  */} (function)
01542: . ( sth -- ) Print number or string on TOS. (object)
01543: function(){push(literal)/*(string)USERPROFILE */} (function)
01544: proc-env@ ( "name" -- value ) Get value from a Process environment variable (object)
01545: . ( sth -- ) Print number or string on TOS. (object)
01546: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
01547: function(){push(literal)/*(string)proc-env WINDIR                 =  */} (function)
01548: . ( sth -- ) Print number or string on TOS. (object)
01549: function(){push(literal)/*(string)WINDIR */} (function)
01550: proc-env@ ( "name" -- value ) Get value from a Process environment variable (object)
01551: . ( sth -- ) Print number or string on TOS. (object)
01552: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
01553: RET (null)
01554: 662 (number)
01555: beep.f (string)
01556: RET (null)
01557: function(){kvm.beep()} (function)
01558: RET (null)
01559: 662 (number)
01560: binary.f (string)
01561: RET (null)
01562: function(){push(new kvm.BinaryFile(pop()))} (function)
01563: function(){pop().WriteAll(pop()) } (function)
01564: RET (null)
01565: function(){push(new kvm.BinaryFile(pop()))} (function)
01566: function(){push(pop().ReadAll())} (function)
01567: RET (null)
01568: function(){push(pop(2).slice(pop(1),pop()))} (function)
01569: RET (null)
01570: base@ ( -- n ) 取得 base 值 n *** 20111224 sam (object)
01571: >r ( n -- ) Push n into the return stack. (object)
01572: hex ( -- ) 設定數值以十六進制印出 *** 20111224 sam (object)
01573: function(){push(literal)/*(number)2 */} (function)
01574: .0r ( num|str n -- ) Right adjusted print num|str in n characters (FigTaiwan SamSuanChen) (object)
01575: r> ( -- n ) Pop the return stack (object)
01576: base! 沒有經過宣告的 variable base 就是 kvm.base (object)
01577: RET (null)
01578: base@ ( -- n ) 取得 base 值 n *** 20111224 sam (object)
01579: >r ( n -- ) Push n into the return stack. (object)
01580: hex ( -- ) 設定數值以十六進制印出 *** 20111224 sam (object)
01581: function(){push(literal)/*(number)4 */} (function)
01582: .0r ( num|str n -- ) Right adjusted print num|str in n characters (FigTaiwan SamSuanChen) (object)
01583: r> ( -- n ) Pop the return stack (object)
01584: base! 沒有經過宣告的 variable base 就是 kvm.base (object)
01585: RET (null)
01586: base@ ( -- n ) 取得 base 值 n *** 20111224 sam (object)
01587: >r ( n -- ) Push n into the return stack. (object)
01588: hex ( -- ) 設定數值以十六進制印出 *** 20111224 sam (object)
01589: function(){push(literal)/*(number)8 */} (function)
01590: .0r ( num|str n -- ) Right adjusted print num|str in n characters (FigTaiwan SamSuanChen) (object)
01591: r> ( -- n ) Pop the return stack (object)
01592: base! 沒有經過宣告的 variable base 就是 kvm.base (object)
01593: RET (null)
01594: 662 (number)
01595: shell.application.f (string)
01596: RET (null)
01597: function(){push(literal)/*(string)Shell.Application */} (function)
01598: ActiveXObject ( "name.application" -- objApp ) Open the name.application COM object (object)
01599: RET (null)
01600: shell.application ( -- obj ) Get shell.application COM object (object)
01601: function(){push(pop().ShutdownWindows())} (function)
01602: RET (null)
01603: shell.application ( -- obj ) Get shell.application COM object (object)
01604: function(){push(pop().findfiles())} (function)
01605: RET (null)
01606: shell.application ( -- obj ) Get shell.application COM object (object)
01607: function(){pop().Open("C:\\") } (function)
01608: RET (null)
01609: shell.application ( -- obj ) Get shell.application COM object (object)
01610: function(){var vRootFolder = 0x11;var iOptions = pop(1);push(pop().BrowseForFolder(0,"Get me the folder",iOptions,vRootFolder))} (function)
01611: RET (null)
01612: shell.application ( -- obj ) Get shell.application COM object (object)
01613: function(){pop().FileRun() } (function)
01614: RET (null)
01615: shell.application ( -- obj ) Get shell.application COM object (object)
01616: function(){push(pop().GetSystemInformation("PhysicalMemoryInstalled"))} (function)
01617: RET (null)
01618: shell.application ( -- obj ) Get shell.application COM object (object)
01619: function(){push(pop().GetSystemInformation("IsOS_DomainMember"))} (function)
01620: RET (null)
01621: shell.application ( -- obj ) Get shell.application COM object (object)
01622: function(){pop().WindowSwitcher() } (function)
01623: RET (null)
01624: shell.application ( -- obj ) Get shell.application COM object (object)
01625: function(){pop().explore(5) } (function)
01626: RET (null)
01627: shell.application ( -- obj ) Get shell.application COM object (object)
01628: function(){push(pop().namespace(pop()))} (function)
01629: RET (null)
01630: function(){push(pop(1).CopyHere(pop(1),pop()))} (function)
01631: RET (null)
01632: function(){push(pop(1).MoveHere(pop(1),pop()))} (function)
01633: RET (null)
01634: shell.application ( -- obj ) Get shell.application COM object (object)
01635: function(){push(pop().CascadeWindows())} (function)
01636: RET (null)
01637: shell.application ( -- obj ) Get shell.application COM object (object)
01638: function(){push(pop().TileVertically())} (function)
01639: RET (null)
01640: shell.application ( -- obj ) Get shell.application COM object (object)
01641: function(){push(pop().TileHorizontally())} (function)
01642: RET (null)
01643: 662 (number)
01644: wmi.f (string)
01645: RET (null)
01646: function(){push(literal)/*(string)winmgmts:{impersonationLevel=impersonate}!\\ */} (function)
01647: swap ( a b -- b a ) stack operation (object)
01648: + ( a b -- a+b) Add two numbers or concatenate two strings. (object)
01649: function(){push(literal)/*(string)\root\cimv2 */} (function)
01650: + ( a b -- a+b) Add two numbers or concatenate two strings. (object)
01651: function(){push(literal)/*(string)Set o = GetObject(kvm.pop()): kvm.push(o)  */} (function)
01652: vbExecute ( "string" -- ) Execute the given vbs statements, you need to push return value in your program. (object)
01653: RET (null)
01654: function(){push(new Enumerator(kvm.objWMIService.ExecQuery("Select * from Win32_NetworkAdapterConfiguration "+pop())))} (function)
01655: RET (null)
01656: function(){push(literal)/*(string)where IPEnabled = true */} (function)
01657: objEnumWin32_NetworkAdapterConfiguration ( "where-clause" -- objEnumWin32_NetworkAdapterConfiguration ) Get Win32_NetworkAdapterConfiguration object onto TOS. (object)
01658: >r ( n -- ) Push n into the return stack. (object)
01659: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
01660: function(){push(pop().atEnd())} (function)
01661: 0branch ( n -- ) 若 n!==0 就將當前 ip 內數值當作 ip, 否則將 ip 進位 *** 20111224 sam (object)
01662: 1666 (number)
01663: r> ( -- n ) Pop the return stack (object)
01664: drop ( x -- ) Remove TOS. (object)
01665: EXIT (string)
01666: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
01667: function(){push(pop().item().caption)} (function)
01668: . ( sth -- ) Print number or string on TOS. (object)
01669: space ( -- ) Print a space. (object)
01670: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
01671: function(){push(pop().item().IPAddress)} (function)
01672: .VBArray ( safeArray -- ) Print VBA safeArray.  (object)
01673: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
01674: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
01675: function(){pop().moveNext()} (function)
01676: branch ( -- ) 將當前 ip 內數值當作 ip *** 20111224 sam (object)
01677: 1659 (number)
01678: RET (null)
01679: objEnumWin32_OperatingSystem ( -- objEnumWin32_OperatingSystem ) Get WMI OS object onto TOS. (object)
01680: function(){push(pop().item().Win32Shutdown(pop()))} (function)
01681: RET (null)
01682: objEnumWin32_PhysicalMemory ( -- objEnumWin32_PhysicalMemory ) Get WMI Win32_PhysicalMemory object onto TOS. (object)
01683: >r ( n -- ) Push n into the return stack. (object)
01684: function(){push(literal)/*(number)0 */} (function)
01685: function(){push(literal)/*(string)------------------------------------------- */} (function)
01686: . ( sth -- ) Print number or string on TOS. (object)
01687: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
01688: function(){push(literal)/*(string)BankLabel              */} (function)
01689: . ( sth -- ) Print number or string on TOS. (object)
01690: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
01691: function(){push(pop().item().BankLabel)} (function)
01692: . ( sth -- ) Print number or string on TOS. (object)
01693: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
01694: function(){push(literal)/*(string)Capacity               */} (function)
01695: . ( sth -- ) Print number or string on TOS. (object)
01696: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
01697: function(){push(pop().item().Capacity)} (function)
01698: function(){push(parseInt(pop()))} (function)
01699: dup ( a -- a a ) Duplicate TOS. (object)
01700: . ( sth -- ) Print number or string on TOS. (object)
01701: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
01702: + ( a b -- a+b) Add two numbers or concatenate two strings. (object)
01703: function(){push(literal)/*(string)Caption                */} (function)
01704: . ( sth -- ) Print number or string on TOS. (object)
01705: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
01706: function(){push(pop().item().Caption)} (function)
01707: . ( sth -- ) Print number or string on TOS. (object)
01708: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
01709: function(){push(literal)/*(string)DataWidth              */} (function)
01710: . ( sth -- ) Print number or string on TOS. (object)
01711: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
01712: function(){push(pop().item().DataWidth)} (function)
01713: . ( sth -- ) Print number or string on TOS. (object)
01714: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
01715: function(){push(literal)/*(string)DeviceLocator          */} (function)
01716: . ( sth -- ) Print number or string on TOS. (object)
01717: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
01718: function(){push(pop().item().DeviceLocator)} (function)
01719: . ( sth -- ) Print number or string on TOS. (object)
01720: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
01721: function(){push(literal)/*(string)FormFactor             */} (function)
01722: . ( sth -- ) Print number or string on TOS. (object)
01723: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
01724: function(){push(pop().item().FormFactor)} (function)
01725: . ( sth -- ) Print number or string on TOS. (object)
01726: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
01727: function(){push(literal)/*(string)InterleaveDataDepth    */} (function)
01728: . ( sth -- ) Print number or string on TOS. (object)
01729: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
01730: function(){push(pop().item().InterleaveDataDepth)} (function)
01731: . ( sth -- ) Print number or string on TOS. (object)
01732: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
01733: function(){push(literal)/*(string)InterleavePosition     */} (function)
01734: . ( sth -- ) Print number or string on TOS. (object)
01735: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
01736: function(){push(pop().item().InterleavePosition)} (function)
01737: . ( sth -- ) Print number or string on TOS. (object)
01738: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
01739: function(){push(literal)/*(string)Manufacturer           */} (function)
01740: . ( sth -- ) Print number or string on TOS. (object)
01741: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
01742: function(){push(pop().item().Manufacturer)} (function)
01743: . ( sth -- ) Print number or string on TOS. (object)
01744: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
01745: function(){push(literal)/*(string)MemoryType             */} (function)
01746: . ( sth -- ) Print number or string on TOS. (object)
01747: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
01748: function(){push(pop().item().MemoryType)} (function)
01749: . ( sth -- ) Print number or string on TOS. (object)
01750: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
01751: function(){push(literal)/*(string)Model                  */} (function)
01752: . ( sth -- ) Print number or string on TOS. (object)
01753: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
01754: function(){push(pop().item().Model)} (function)
01755: . ( sth -- ) Print number or string on TOS. (object)
01756: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
01757: function(){push(literal)/*(string)PartNumber             */} (function)
01758: . ( sth -- ) Print number or string on TOS. (object)
01759: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
01760: function(){push(pop().item().PartNumber)} (function)
01761: . ( sth -- ) Print number or string on TOS. (object)
01762: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
01763: function(){push(literal)/*(string)SerialNumber           */} (function)
01764: . ( sth -- ) Print number or string on TOS. (object)
01765: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
01766: function(){push(pop().item().SerialNumber)} (function)
01767: . ( sth -- ) Print number or string on TOS. (object)
01768: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
01769: function(){push(literal)/*(string)Speed                  */} (function)
01770: . ( sth -- ) Print number or string on TOS. (object)
01771: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
01772: function(){push(pop().item().Speed)} (function)
01773: . ( sth -- ) Print number or string on TOS. (object)
01774: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
01775: function(){push(literal)/*(string)Tag                    */} (function)
01776: . ( sth -- ) Print number or string on TOS. (object)
01777: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
01778: function(){push(pop().item().Tag)} (function)
01779: . ( sth -- ) Print number or string on TOS. (object)
01780: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
01781: function(){push(literal)/*(string)TotalWidth             */} (function)
01782: . ( sth -- ) Print number or string on TOS. (object)
01783: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
01784: function(){push(pop().item().TotalWidth)} (function)
01785: . ( sth -- ) Print number or string on TOS. (object)
01786: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
01787: function(){push(literal)/*(string)TypeDetail             */} (function)
01788: . ( sth -- ) Print number or string on TOS. (object)
01789: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
01790: function(){push(pop().item().TypeDetail)} (function)
01791: . ( sth -- ) Print number or string on TOS. (object)
01792: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
01793: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
01794: dup ( a -- a a ) Duplicate TOS. (object)
01795: function(){pop().moveNext();push(pop().atEnd())} (function)
01796: 0branch ( n -- ) 若 n!==0 就將當前 ip 內數值當作 ip, 否則將 ip 進位 *** 20111224 sam (object)
01797: 1685 (number)
01798: r> ( -- n ) Pop the return stack (object)
01799: drop ( x -- ) Remove TOS. (object)
01800: function(){push(literal)/*(string)------------------------------------------- */} (function)
01801: . ( sth -- ) Print number or string on TOS. (object)
01802: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
01803: function(){push(literal)/*(string)Total memory size      */} (function)
01804: . ( sth -- ) Print number or string on TOS. (object)
01805: function(){push(literal)/*(number)1024 */} (function)
01806: / ( a b -- c ) 計算 a 與 b 兩數相除的商 c (object)
01807: function(){push(literal)/*(number)1024 */} (function)
01808: / ( a b -- c ) 計算 a 與 b 兩數相除的商 c (object)
01809: dup ( a -- a a ) Duplicate TOS. (object)
01810: . ( sth -- ) Print number or string on TOS. (object)
01811: function(){push(literal)/*(string) Mega Bytes */} (function)
01812: . ( sth -- ) Print number or string on TOS. (object)
01813: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
01814: RET (null)
01815: function(){push(literal)/*(number)0 */} (function)
01816: "" ( -- "" ) empty string. (object)
01817: objEnumWin32_PnPEntity ( "where-clause" -- objEnumWin32_PnPEntity ) Get WMI Win32_PnPEntity object onto TOS. (object)
01818: >r ( n -- ) Push n into the return stack. (object)
01819: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
01820: function(){push(pop().atEnd())} (function)
01821: 0branch ( n -- ) 若 n!==0 就將當前 ip 內數值當作 ip, 否則將 ip 進位 *** 20111224 sam (object)
01822: 1828 (number)
01823: r> ( -- n ) Pop the return stack (object)
01824: drop ( x -- ) Remove TOS. (object)
01825: EXIT (string)
01826: branch ( -- ) 將當前 ip 內數值當作 ip *** 20111224 sam (object)
01827: 1830 (number)
01828: 1+ ( a -- a++ ) a += 1 (object)
01829: dup ( a -- a a ) Duplicate TOS. (object)
01830: 0branch ( n -- ) 若 n!==0 就將當前 ip 內數值當作 ip, 否則將 ip 進位 *** 20111224 sam (object)
01831: 1850 (number)
01832: dup ( a -- a a ) Duplicate TOS. (object)
01833: function(){push(literal)/*(number)3 */} (function)
01834: .r ( num|str n -- ) Right adjusted print num|str in n characters (FigTaiwan SamSuanChen) (object)
01835: space ( -- ) Print a space. (object)
01836: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
01837: function(){push(pop().item().Name)} (function)
01838: . ( sth -- ) Print number or string on TOS. (object)
01839: space ( -- ) Print a space. (object)
01840: function(){push(literal)/*(string)-  */} (function)
01841: . ( sth -- ) Print number or string on TOS. (object)
01842: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
01843: function(){push(pop().item().DeviceID)} (function)
01844: . ( sth -- ) Print number or string on TOS. (object)
01845: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
01846: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
01847: function(){pop().moveNext()} (function)
01848: branch ( -- ) 將當前 ip 內數值當作 ip *** 20111224 sam (object)
01849: 1819 (number)
01850: RET (null)
01851: function(){push(literal)/*(number)0 */} (function)
01852: function(){push(literal)/*(string)WHERE ConfigManagerErrorCode <> 0 */} (function)
01853: objEnumWin32_PnPEntity ( "where-clause" -- objEnumWin32_PnPEntity ) Get WMI Win32_PnPEntity object onto TOS. (object)
01854: >r ( n -- ) Push n into the return stack. (object)
01855: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
01856: function(){push(pop().atEnd())} (function)
01857: 0branch ( n -- ) 若 n!==0 就將當前 ip 內數值當作 ip, 否則將 ip 進位 *** 20111224 sam (object)
01858: 1864 (number)
01859: r> ( -- n ) Pop the return stack (object)
01860: drop ( x -- ) Remove TOS. (object)
01861: EXIT (string)
01862: branch ( -- ) 將當前 ip 內數值當作 ip *** 20111224 sam (object)
01863: 1866 (number)
01864: 1+ ( a -- a++ ) a += 1 (object)
01865: dup ( a -- a a ) Duplicate TOS. (object)
01866: 0branch ( n -- ) 若 n!==0 就將當前 ip 內數值當作 ip, 否則將 ip 進位 *** 20111224 sam (object)
01867: 1917 (number)
01868: function(){push(literal)/*(string)------------------------------------------- */} (function)
01869: . ( sth -- ) Print number or string on TOS. (object)
01870: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
01871: function(){push(literal)/*(string)Class GUID:    */} (function)
01872: . ( sth -- ) Print number or string on TOS. (object)
01873: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
01874: function(){push(pop().item().ClassGuid)} (function)
01875: . ( sth -- ) Print number or string on TOS. (object)
01876: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
01877: function(){push(literal)/*(string)Description:   */} (function)
01878: . ( sth -- ) Print number or string on TOS. (object)
01879: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
01880: function(){push(pop().item().Description)} (function)
01881: . ( sth -- ) Print number or string on TOS. (object)
01882: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
01883: function(){push(literal)/*(string)Device ID:     */} (function)
01884: . ( sth -- ) Print number or string on TOS. (object)
01885: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
01886: function(){push(pop().item().DeviceID)} (function)
01887: . ( sth -- ) Print number or string on TOS. (object)
01888: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
01889: function(){push(literal)/*(string)Manufacturer:  */} (function)
01890: . ( sth -- ) Print number or string on TOS. (object)
01891: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
01892: function(){push(pop().item().Manufacturer)} (function)
01893: . ( sth -- ) Print number or string on TOS. (object)
01894: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
01895: function(){push(literal)/*(string)Name:          */} (function)
01896: . ( sth -- ) Print number or string on TOS. (object)
01897: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
01898: function(){push(pop().item().Name)} (function)
01899: . ( sth -- ) Print number or string on TOS. (object)
01900: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
01901: function(){push(literal)/*(string)Service:       */} (function)
01902: . ( sth -- ) Print number or string on TOS. (object)
01903: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
01904: function(){push(pop().item().Service)} (function)
01905: . ( sth -- ) Print number or string on TOS. (object)
01906: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
01907: function(){push(literal)/*(string)ErrorCode:     */} (function)
01908: . ( sth -- ) Print number or string on TOS. (object)
01909: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
01910: function(){push(pop().item().ConfigManagerErrorCode)} (function)
01911: . ( sth -- ) Print number or string on TOS. (object)
01912: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
01913: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
01914: function(){pop().moveNext()} (function)
01915: branch ( -- ) 將當前 ip 內數值當作 ip *** 20111224 sam (object)
01916: 1855 (number)
01917: RET (null)
01918: function(){push(literal)/*(number)0 */} (function)
01919: "" ( -- "" ) empty string. (object)
01920: objEnumWin32_CDROMDrive ( "where-clause" -- objEnumWin32_CDROMDrive ) Get WMI Win32_CDROMDrive object onto TOS. (object)
01921: >r ( n -- ) Push n into the return stack. (object)
01922: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
01923: function(){push(pop().atEnd())} (function)
01924: 0branch ( n -- ) 若 n!==0 就將當前 ip 內數值當作 ip, 否則將 ip 進位 *** 20111224 sam (object)
01925: 1931 (number)
01926: r> ( -- n ) Pop the return stack (object)
01927: drop ( x -- ) Remove TOS. (object)
01928: EXIT (string)
01929: branch ( -- ) 將當前 ip 內數值當作 ip *** 20111224 sam (object)
01930: 1933 (number)
01931: 1+ ( a -- a++ ) a += 1 (object)
01932: dup ( a -- a a ) Duplicate TOS. (object)
01933: 0branch ( n -- ) 若 n!==0 就將當前 ip 內數值當作 ip, 否則將 ip 進位 *** 20111224 sam (object)
01934: 2008 (number)
01935: function(){push(literal)/*(string)------------------------------------------- */} (function)
01936: . ( sth -- ) Print number or string on TOS. (object)
01937: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
01938: function(){push(literal)/*(string)Description:        */} (function)
01939: . ( sth -- ) Print number or string on TOS. (object)
01940: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
01941: function(){push(pop().item().Description)} (function)
01942: . ( sth -- ) Print number or string on TOS. (object)
01943: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
01944: function(){push(literal)/*(string)Device ID:          */} (function)
01945: . ( sth -- ) Print number or string on TOS. (object)
01946: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
01947: function(){push(pop().item().DeviceID)} (function)
01948: . ( sth -- ) Print number or string on TOS. (object)
01949: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
01950: function(){push(literal)/*(string)Manufacturer:       */} (function)
01951: . ( sth -- ) Print number or string on TOS. (object)
01952: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
01953: function(){push(pop().item().Manufacturer)} (function)
01954: . ( sth -- ) Print number or string on TOS. (object)
01955: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
01956: function(){push(literal)/*(string)Name:               */} (function)
01957: . ( sth -- ) Print number or string on TOS. (object)
01958: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
01959: function(){push(pop().item().Name)} (function)
01960: . ( sth -- ) Print number or string on TOS. (object)
01961: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
01962: function(){push(literal)/*(string)RevisionLevel       */} (function)
01963: . ( sth -- ) Print number or string on TOS. (object)
01964: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
01965: function(){push(pop().item().RevisionLevel)} (function)
01966: . ( sth -- ) Print number or string on TOS. (object)
01967: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
01968: function(){push(literal)/*(string)SerialNumber        */} (function)
01969: . ( sth -- ) Print number or string on TOS. (object)
01970: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
01971: function(){push(pop().item().SerialNumber)} (function)
01972: . ( sth -- ) Print number or string on TOS. (object)
01973: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
01974: function(){push(literal)/*(string)Size                */} (function)
01975: . ( sth -- ) Print number or string on TOS. (object)
01976: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
01977: function(){push(pop().item().Size)} (function)
01978: . ( sth -- ) Print number or string on TOS. (object)
01979: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
01980: function(){push(literal)/*(string)Status              */} (function)
01981: . ( sth -- ) Print number or string on TOS. (object)
01982: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
01983: function(){push(pop().item().Status)} (function)
01984: . ( sth -- ) Print number or string on TOS. (object)
01985: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
01986: function(){push(literal)/*(string)TransferRate        */} (function)
01987: . ( sth -- ) Print number or string on TOS. (object)
01988: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
01989: function(){push(pop().item().TransferRate)} (function)
01990: . ( sth -- ) Print number or string on TOS. (object)
01991: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
01992: function(){push(literal)/*(string)VolumeName          */} (function)
01993: . ( sth -- ) Print number or string on TOS. (object)
01994: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
01995: function(){push(pop().item().VolumeName)} (function)
01996: . ( sth -- ) Print number or string on TOS. (object)
01997: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
01998: function(){push(literal)/*(string)VolumeSerialNumber  */} (function)
01999: . ( sth -- ) Print number or string on TOS. (object)
02000: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
02001: function(){push(pop().item().VolumeSerialNumber)} (function)
02002: . ( sth -- ) Print number or string on TOS. (object)
02003: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
02004: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
02005: function(){pop().moveNext()} (function)
02006: branch ( -- ) 將當前 ip 內數值當作 ip *** 20111224 sam (object)
02007: 1922 (number)
02008: RET (null)
02009: function(){push(literal)/*(number)0 */} (function)
02010: objEnumWin32_Processor ( -- objEnumWin32_Processor ) Get WMI Win32_Processor object onto TOS. (object)
02011: >r ( n -- ) Push n into the return stack. (object)
02012: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
02013: function(){push(pop().atEnd())} (function)
02014: 0branch ( n -- ) 若 n!==0 就將當前 ip 內數值當作 ip, 否則將 ip 進位 *** 20111224 sam (object)
02015: 2021 (number)
02016: r> ( -- n ) Pop the return stack (object)
02017: drop ( x -- ) Remove TOS. (object)
02018: EXIT (string)
02019: branch ( -- ) 將當前 ip 內數值當作 ip *** 20111224 sam (object)
02020: 2023 (number)
02021: 1+ ( a -- a++ ) a += 1 (object)
02022: dup ( a -- a a ) Duplicate TOS. (object)
02023: 0branch ( n -- ) 若 n!==0 就將當前 ip 內數值當作 ip, 否則將 ip 進位 *** 20111224 sam (object)
02024: 2248 (number)
02025: function(){push(literal)/*(string)------------------------------------------- */} (function)
02026: . ( sth -- ) Print number or string on TOS. (object)
02027: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
02028: function(){push(literal)/*(string)AddressWidth                   */} (function)
02029: . ( sth -- ) Print number or string on TOS. (object)
02030: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
02031: function(){push(pop().item().AddressWidth)} (function)
02032: . ( sth -- ) Print number or string on TOS. (object)
02033: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
02034: function(){push(literal)/*(string)Architecture                   */} (function)
02035: . ( sth -- ) Print number or string on TOS. (object)
02036: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
02037: function(){push(pop().item().Architecture)} (function)
02038: . ( sth -- ) Print number or string on TOS. (object)
02039: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
02040: function(){push(literal)/*(string)Availability                   */} (function)
02041: . ( sth -- ) Print number or string on TOS. (object)
02042: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
02043: function(){push(pop().item().Availability)} (function)
02044: . ( sth -- ) Print number or string on TOS. (object)
02045: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
02046: function(){push(literal)/*(string)Caption                        */} (function)
02047: . ( sth -- ) Print number or string on TOS. (object)
02048: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
02049: function(){push(pop().item().Caption)} (function)
02050: . ( sth -- ) Print number or string on TOS. (object)
02051: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
02052: function(){push(literal)/*(string)CurrentClockSpeed              */} (function)
02053: . ( sth -- ) Print number or string on TOS. (object)
02054: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
02055: function(){push(pop().item().CurrentClockSpeed)} (function)
02056: . ( sth -- ) Print number or string on TOS. (object)
02057: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
02058: function(){push(literal)/*(string)CurrentVoltage                 */} (function)
02059: . ( sth -- ) Print number or string on TOS. (object)
02060: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
02061: function(){push(pop().item().CurrentVoltage)} (function)
02062: . ( sth -- ) Print number or string on TOS. (object)
02063: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
02064: function(){push(literal)/*(string)DataWidth                      */} (function)
02065: . ( sth -- ) Print number or string on TOS. (object)
02066: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
02067: function(){push(pop().item().DataWidth)} (function)
02068: . ( sth -- ) Print number or string on TOS. (object)
02069: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
02070: function(){push(literal)/*(string)Description                    */} (function)
02071: . ( sth -- ) Print number or string on TOS. (object)
02072: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
02073: function(){push(pop().item().Description)} (function)
02074: . ( sth -- ) Print number or string on TOS. (object)
02075: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
02076: function(){push(literal)/*(string)DeviceID                       */} (function)
02077: . ( sth -- ) Print number or string on TOS. (object)
02078: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
02079: function(){push(pop().item().DeviceID)} (function)
02080: . ( sth -- ) Print number or string on TOS. (object)
02081: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
02082: function(){push(literal)/*(string)ExtClock                       */} (function)
02083: . ( sth -- ) Print number or string on TOS. (object)
02084: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
02085: function(){push(pop().item().ExtClock)} (function)
02086: . ( sth -- ) Print number or string on TOS. (object)
02087: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
02088: function(){push(literal)/*(string)Family                         */} (function)
02089: . ( sth -- ) Print number or string on TOS. (object)
02090: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
02091: function(){push(pop().item().Family)} (function)
02092: . ( sth -- ) Print number or string on TOS. (object)
02093: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
02094: function(){push(literal)/*(string)L2CacheSize                    */} (function)
02095: . ( sth -- ) Print number or string on TOS. (object)
02096: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
02097: function(){push(pop().item().L2CacheSize)} (function)
02098: . ( sth -- ) Print number or string on TOS. (object)
02099: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
02100: function(){push(literal)/*(string)L2CacheSpeed                   */} (function)
02101: . ( sth -- ) Print number or string on TOS. (object)
02102: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
02103: function(){push(pop().item().L2CacheSpeed)} (function)
02104: . ( sth -- ) Print number or string on TOS. (object)
02105: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
02106: function(){push(literal)/*(string)L3CacheSize                    */} (function)
02107: . ( sth -- ) Print number or string on TOS. (object)
02108: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
02109: function(){push(pop().item().L3CacheSize)} (function)
02110: . ( sth -- ) Print number or string on TOS. (object)
02111: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
02112: function(){push(literal)/*(string)L3CacheSpeed                   */} (function)
02113: . ( sth -- ) Print number or string on TOS. (object)
02114: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
02115: function(){push(pop().item().L3CacheSpeed)} (function)
02116: . ( sth -- ) Print number or string on TOS. (object)
02117: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
02118: function(){push(literal)/*(string)Level                          */} (function)
02119: . ( sth -- ) Print number or string on TOS. (object)
02120: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
02121: function(){push(pop().item().Level)} (function)
02122: . ( sth -- ) Print number or string on TOS. (object)
02123: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
02124: function(){push(literal)/*(string)LoadPercentage                 */} (function)
02125: . ( sth -- ) Print number or string on TOS. (object)
02126: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
02127: function(){push(pop().item().LoadPercentage)} (function)
02128: . ( sth -- ) Print number or string on TOS. (object)
02129: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
02130: function(){push(literal)/*(string)Manufacturer                   */} (function)
02131: . ( sth -- ) Print number or string on TOS. (object)
02132: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
02133: function(){push(pop().item().Manufacturer)} (function)
02134: . ( sth -- ) Print number or string on TOS. (object)
02135: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
02136: function(){push(literal)/*(string)MaxClockSpeed                  */} (function)
02137: . ( sth -- ) Print number or string on TOS. (object)
02138: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
02139: function(){push(pop().item().MaxClockSpeed)} (function)
02140: . ( sth -- ) Print number or string on TOS. (object)
02141: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
02142: function(){push(literal)/*(string)Name                           */} (function)
02143: . ( sth -- ) Print number or string on TOS. (object)
02144: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
02145: function(){push(pop().item().Name)} (function)
02146: . ( sth -- ) Print number or string on TOS. (object)
02147: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
02148: function(){push(literal)/*(string)NumberOfCores                  */} (function)
02149: . ( sth -- ) Print number or string on TOS. (object)
02150: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
02151: function(){push(pop().item().NumberOfCores)} (function)
02152: int ( float -- integer )  (object)
02153: dup ( a -- a a ) Duplicate TOS. (object)
02154: . ( sth -- ) Print number or string on TOS. (object)
02155: swap ( a b -- b a ) stack operation (object)
02156: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
02157: function(){push(literal)/*(string)NumberOfLogicalProcessors      */} (function)
02158: . ( sth -- ) Print number or string on TOS. (object)
02159: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
02160: function(){push(pop().item().NumberOfLogicalProcessors)} (function)
02161: int ( float -- integer )  (object)
02162: dup ( a -- a a ) Duplicate TOS. (object)
02163: . ( sth -- ) Print number or string on TOS. (object)
02164: swap ( a b -- b a ) stack operation (object)
02165: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
02166: function(){push(literal)/*(string)ProcessorId                    */} (function)
02167: . ( sth -- ) Print number or string on TOS. (object)
02168: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
02169: function(){push(pop().item().ProcessorId)} (function)
02170: . ( sth -- ) Print number or string on TOS. (object)
02171: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
02172: function(){push(literal)/*(string)ProcessorType                  */} (function)
02173: . ( sth -- ) Print number or string on TOS. (object)
02174: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
02175: function(){push(pop().item().ProcessorType)} (function)
02176: . ( sth -- ) Print number or string on TOS. (object)
02177: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
02178: function(){push(literal)/*(string)Revision                       */} (function)
02179: . ( sth -- ) Print number or string on TOS. (object)
02180: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
02181: function(){push(pop().item().Revision)} (function)
02182: . ( sth -- ) Print number or string on TOS. (object)
02183: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
02184: function(){push(literal)/*(string)Role                           */} (function)
02185: . ( sth -- ) Print number or string on TOS. (object)
02186: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
02187: function(){push(pop().item().Role)} (function)
02188: . ( sth -- ) Print number or string on TOS. (object)
02189: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
02190: function(){push(literal)/*(string)SocketDesignation              */} (function)
02191: . ( sth -- ) Print number or string on TOS. (object)
02192: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
02193: function(){push(pop().item().SocketDesignation)} (function)
02194: . ( sth -- ) Print number or string on TOS. (object)
02195: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
02196: function(){push(literal)/*(string)StatusInfo                     */} (function)
02197: . ( sth -- ) Print number or string on TOS. (object)
02198: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
02199: function(){push(pop().item().StatusInfo)} (function)
02200: . ( sth -- ) Print number or string on TOS. (object)
02201: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
02202: function(){push(literal)/*(string)Stepping                       */} (function)
02203: . ( sth -- ) Print number or string on TOS. (object)
02204: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
02205: function(){push(pop().item().Stepping)} (function)
02206: . ( sth -- ) Print number or string on TOS. (object)
02207: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
02208: function(){push(literal)/*(string)SystemName                     */} (function)
02209: . ( sth -- ) Print number or string on TOS. (object)
02210: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
02211: function(){push(pop().item().SystemName)} (function)
02212: . ( sth -- ) Print number or string on TOS. (object)
02213: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
02214: function(){push(literal)/*(string)UniqueId                       */} (function)
02215: . ( sth -- ) Print number or string on TOS. (object)
02216: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
02217: function(){push(pop().item().UniqueId)} (function)
02218: . ( sth -- ) Print number or string on TOS. (object)
02219: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
02220: function(){push(literal)/*(string)UpgradeMethod                  */} (function)
02221: . ( sth -- ) Print number or string on TOS. (object)
02222: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
02223: function(){push(pop().item().UpgradeMethod)} (function)
02224: . ( sth -- ) Print number or string on TOS. (object)
02225: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
02226: function(){push(literal)/*(string)Version                        */} (function)
02227: . ( sth -- ) Print number or string on TOS. (object)
02228: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
02229: function(){push(pop().item().Version)} (function)
02230: . ( sth -- ) Print number or string on TOS. (object)
02231: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
02232: function(){push(literal)/*(string)PowerManagementSupported       */} (function)
02233: . ( sth -- ) Print number or string on TOS. (object)
02234: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
02235: function(){push(pop().item().PowerManagementSupported)} (function)
02236: . ( sth -- ) Print number or string on TOS. (object)
02237: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
02238: function(){push(literal)/*(string)PowerManagementCapabilities[]  */} (function)
02239: . ( sth -- ) Print number or string on TOS. (object)
02240: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
02241: function(){push(pop().item().PowerManagementCapabilities)} (function)
02242: .VBArray ( safeArray -- ) Print VBA safeArray.  (object)
02243: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
02244: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
02245: function(){pop().moveNext()} (function)
02246: branch ( -- ) 將當前 ip 內數值當作 ip *** 20111224 sam (object)
02247: 2012 (number)
02248: RET (null)
02249: function(){push(literal)/*(number)0 */} (function)
02250: "" ( -- "" ) empty string. (object)
02251: objEnumWin32_Process ( "where-clause" -- objEnumWin32_Process ) Get WMI Win32_Process object onto TOS. (object)
02252: >r ( n -- ) Push n into the return stack. (object)
02253: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
02254: function(){push(!pop().atEnd())} (function)
02255: 0branch ( n -- ) 若 n!==0 就將當前 ip 內數值當作 ip, 否則將 ip 進位 *** 20111224 sam (object)
02256: 2289 (number)
02257: 1+ ( a -- a++ ) a += 1 (object)
02258: function(){push(literal)/*(string)------------------------------------------- */} (function)
02259: . ( sth -- ) Print number or string on TOS. (object)
02260: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
02261: function(){push(literal)/*(string)Name:               */} (function)
02262: . ( sth -- ) Print number or string on TOS. (object)
02263: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
02264: function(){push(pop().item().Name)} (function)
02265: . ( sth -- ) Print number or string on TOS. (object)
02266: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
02267: function(){push(literal)/*(string)ProcessId:          */} (function)
02268: . ( sth -- ) Print number or string on TOS. (object)
02269: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
02270: function(){push(pop().item().ProcessId)} (function)
02271: . ( sth -- ) Print number or string on TOS. (object)
02272: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
02273: function(){push(literal)/*(string)CommandLine:        */} (function)
02274: . ( sth -- ) Print number or string on TOS. (object)
02275: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
02276: function(){push(pop().item().CommandLine)} (function)
02277: . ( sth -- ) Print number or string on TOS. (object)
02278: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
02279: function(){push(literal)/*(string)ExecutablePath      */} (function)
02280: . ( sth -- ) Print number or string on TOS. (object)
02281: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
02282: function(){push(pop().item().ExecutablePath)} (function)
02283: . ( sth -- ) Print number or string on TOS. (object)
02284: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
02285: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
02286: function(){pop().moveNext()} (function)
02287: branch ( -- ) 將當前 ip 內數值當作 ip *** 20111224 sam (object)
02288: 2253 (number)
02289: r> ( -- n ) Pop the return stack (object)
02290: drop ( x -- ) Remove TOS. (object)
02291: RET (null)
02292: function(){push(literal)/*(number)0 */} (function)
02293: swap ( a b -- b a ) stack operation (object)
02294: objEnumWin32_Process ( "where-clause" -- objEnumWin32_Process ) Get WMI Win32_Process object onto TOS. (object)
02295: >r ( n -- ) Push n into the return stack. (object)
02296: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
02297: function(){push(!pop().atEnd())} (function)
02298: 0branch ( n -- ) 若 n!==0 就將當前 ip 內數值當作 ip, 否則將 ip 進位 *** 20111224 sam (object)
02299: 2307 (number)
02300: 1+ ( a -- a++ ) a += 1 (object)
02301: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
02302: function(){pop().item().terminate(0)} (function)
02303: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
02304: function(){pop().moveNext()} (function)
02305: branch ( -- ) 將當前 ip 內數值當作 ip *** 20111224 sam (object)
02306: 2296 (number)
02307: r> ( -- n ) Pop the return stack (object)
02308: drop ( x -- ) Remove TOS. (object)
02309: RET (null)
02310: function(){push(literal)/*(number)0 */} (function)
02311: swap ( a b -- b a ) stack operation (object)
02312: objEnumWin32_Process ( "where-clause" -- objEnumWin32_Process ) Get WMI Win32_Process object onto TOS. (object)
02313: >r ( n -- ) Push n into the return stack. (object)
02314: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
02315: function(){push(!pop().atEnd())} (function)
02316: 0branch ( n -- ) 若 n!==0 就將當前 ip 內數值當作 ip, 否則將 ip 進位 *** 20111224 sam (object)
02317: 2332 (number)
02318: 1+ ( a -- a++ ) a += 1 (object)
02319: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
02320: function(){push(pop().item().name)} (function)
02321: . ( sth -- ) Print number or string on TOS. (object)
02322: function(){push(literal)/*(string): */} (function)
02323: . ( sth -- ) Print number or string on TOS. (object)
02324: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
02325: function(){push(pop().item().ProcessId)} (function)
02326: . ( sth -- ) Print number or string on TOS. (object)
02327: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
02328: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
02329: function(){pop().moveNext()} (function)
02330: branch ( -- ) 將當前 ip 內數值當作 ip *** 20111224 sam (object)
02331: 2314 (number)
02332: r> ( -- n ) Pop the return stack (object)
02333: drop ( x -- ) Remove TOS. (object)
02334: RET (null)
02335: objEnumWin32_Process ( "where-clause" -- objEnumWin32_Process ) Get WMI Win32_Process object onto TOS. (object)
02336: >r ( n -- ) Push n into the return stack. (object)
02337: [] ( -- [] ) empty array. (object)
02338: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
02339: function(){push(!pop().atEnd())} (function)
02340: 0branch ( n -- ) 若 n!==0 就將當前 ip 內數值當作 ip, 否則將 ip 進位 *** 20111224 sam (object)
02341: 2349 (number)
02342: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
02343: function(){push(pop().item())} (function)
02344: function(){tos(1).push(pop())} (function)
02345: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
02346: function(){pop().moveNext()} (function)
02347: branch ( -- ) 將當前 ip 內數值當作 ip *** 20111224 sam (object)
02348: 2338 (number)
02349: r> ( -- n ) Pop the return stack (object)
02350: drop ( x -- ) Remove TOS. (object)
02351: RET (null)
02352: 662 (number)
02353: excel.f (string)
02354: RET (null)
02355: 662 (number)
02356: canvas.f (string)
02357: RET (null)
02358: function(){push(literal)/*(string)body */} (function)
02359: function(){push(literal)/*(string)<canvas width=300 height=300></canvas> */} (function)
02360: swap ( a b -- b a ) stack operation (object)
02361: doElement ( "html" "jqSelector" -- element ) Run time of <e>,<h> or the likes. (object)
02362: function(){push(pop().getContext('2d'))} (function)
02363: RET (null)
02364: canvasStyle ( -- [object HTMLStyleElement] ) Canvas style is globally for all canvases. (object)
02365: function(){pop().innerHTML=pop()} (function)
02366: RET (null)
02367: function(){push(literal)/*(number)0 */} (function)
02368: function(){push(literal)/*(number)0 */} (function)
02369: function(){push(kvm.cv.canvas.width)} (function)
02370: function(){push(kvm.cv.canvas.height)} (function)
02371: clearRect ( x y w h -- ) Clear rectangular (object)
02372: RET (null)
02373: eleBody ( -- element ) Get <body> element (object)
02374: lastChild ( parent -- element ) Get the last child of the given element. (object)
02375: dup ( a -- a a ) Duplicate TOS. (object)
02376: function(){push(pop().constructor==HTMLCanvasElement)} (function)
02377: 0branch ( n -- ) 若 n!==0 就將當前 ip 內數值當作 ip, 否則將 ip 進位 *** 20111224 sam (object)
02378: 2381 (number)
02379: branch ( -- ) 將當前 ip 內數值當作 ip *** 20111224 sam (object)
02380: 2393 (number)
02381: function(){push(literal)/*(string)Last thing's constructor is  */} (function)
02382: dup ( a -- a a ) Duplicate TOS. (object)
02383: function(){push(pop().constructor)} (function)
02384: + ( a b -- a+b) Add two numbers or concatenate two strings. (object)
02385: function(){push(literal)/*(string), are you sure? */} (function)
02386: + ( a b -- a+b) Add two numbers or concatenate two strings. (object)
02387: function(){push(confirm(pop()))} (function)
02388: 0branch ( n -- ) 若 n!==0 就將當前 ip 內數值當作 ip, 否則將 ip 進位 *** 20111224 sam (object)
02389: 2392 (number)
02390: branch ( -- ) 將當前 ip 內數值當作 ip *** 20111224 sam (object)
02391: 2393 (number)
02392: EXIT (string)
02393: eleDisplay ( -- element ) Get console output screen element (object)
02394: lastChild ( parent -- element ) Get the last child of the given element. (object)
02395: insertAfter ( target ref -- ) *Move* the target element to after the reference element (object)
02396: RET (null)
02397: 662 (number)
02398: mytools.f (string)
02399: RET (null)
02400: function(){push(pop().getMonth())} (function)
02401: 1+ ( a -- a++ ) a += 1 (object)
02402: RET (null)
02403: function(){push(pop().getDate())} (function)
02404: RET (null)
02405: function(){push(pop().getDay())} (function)
02406: RET (null)
02407: function(){push(pop().getHours())} (function)
02408: RET (null)
02409: function(){push(pop().getMinutes())} (function)
02410: RET (null)
02411: function(){push(pop().getSeconds())} (function)
02412: RET (null)
02413: function(){push(pop().getMilliseconds())} (function)
02414: RET (null)
02415: >r ( n -- ) Push n into the return stack. (object)
02416: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
02417: t.year ( Time -- year ) Get year number (object)
02418: . ( sth -- ) Print number or string on TOS. (object)
02419: function(){push(literal)/*(string)- */} (function)
02420: . ( sth -- ) Print number or string on TOS. (object)
02421: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
02422: t.month ( Time -- month ) Get month number  (object)
02423: function(){push(literal)/*(number)2 */} (function)
02424: .0r ( num|str n -- ) Right adjusted print num|str in n characters (FigTaiwan SamSuanChen) (object)
02425: function(){push(literal)/*(string)- */} (function)
02426: . ( sth -- ) Print number or string on TOS. (object)
02427: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
02428: t.date ( Time -- date ) Get date number  (object)
02429: function(){push(literal)/*(number)2 */} (function)
02430: .0r ( num|str n -- ) Right adjusted print num|str in n characters (FigTaiwan SamSuanChen) (object)
02431: space ( -- ) Print a space. (object)
02432: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
02433: t.hour ( Time -- hour ) Get hour number  (object)
02434: function(){push(literal)/*(number)2 */} (function)
02435: .0r ( num|str n -- ) Right adjusted print num|str in n characters (FigTaiwan SamSuanChen) (object)
02436: function(){push(literal)/*(string): */} (function)
02437: . ( sth -- ) Print number or string on TOS. (object)
02438: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
02439: t.minute ( Time -- minute ) Get minute number  (object)
02440: function(){push(literal)/*(number)2 */} (function)
02441: .0r ( num|str n -- ) Right adjusted print num|str in n characters (FigTaiwan SamSuanChen) (object)
02442: function(){push(literal)/*(string): */} (function)
02443: . ( sth -- ) Print number or string on TOS. (object)
02444: r@ ( -- r0 ) Get a copy of the TOS of return stack (object)
02445: t.second ( Time -- second ) Get second number  (object)
02446: function(){push(literal)/*(number)2 */} (function)
02447: .0r ( num|str n -- ) Right adjusted print num|str in n characters (FigTaiwan SamSuanChen) (object)
02448: RET (null)
02449: function(){push(memberCount.call(pop()))} (function)
02450: RET (null)
02451: function(){push(literal)/*(number)123 */} (function)
02452: function(){push(literal)/*(number)456 */} (function)
02453: RET (null)
02454: 662 (number)
02455: processing.f (string)
02456: RET (null)
02457: function(){/* to */ g["frameRate"]=pop()} (function)
02458: frameTickInterval ( -- obj ) frameTickInterval.init(), frameTickInterval.value(), precise dynamic interval time for setTimeout() (object)
02459: function(){pop().init()} (function)
02460: RET (null)
02461: function(){/* to */ g["frameCountLimit"]=pop()} (function)
02462: RET (null)
02463: frameCount ( -- count ) Serial number of frames (object)
02464: frameCountLimit ( -- int ) Stop when frameCount reaches limit (object)
02465: >= ( a b -- f ) 比較 a 是否大於等於 b (object)
02466: 0branch ( n -- ) 若 n!==0 就將當前 ip 內數值當作 ip, 否則將 ip 進位 *** 20111224 sam (object)
02467: 2473 (number)
02468: function(){push(literal)/*(string)ending-message */} (function)
02469: execute ( Word|"name"|address|empty -- ... ) Execute the given word or the last() if stack is empty. (object)
02470: function(){push(literal)/*(number)0 */} (function)
02471: function(){/* to */ g["timeOutId"]=pop()} (function)
02472: EXIT (string)
02473: function(){push(literal)/*(function)function(){inner(2463)} */} (function)
02474: frameTickInterval ( -- obj ) frameTickInterval.init(), frameTickInterval.value(), precise dynamic interval time for setTimeout() (object)
02475: function(){push(pop().value())} (function)
02476: function(){push(mySetTimeout(pop(1),pop()))} (function)
02477: function(){/* to */ g["timeOutId"]=pop()} (function)
02478: frameCount ( -- count ) Serial number of frames (object)
02479: 1+ ( a -- a++ ) a += 1 (object)
02480: function(){/* to */ g["frameCount"]=pop()} (function)
02481: function(){push(literal)/*(object)onFrameTick ( -- ) Processing main loop */} (function)
02482: function(){tos().cvwas=kvm.cv;kvm.cv=pop().cv} (function)
02483: function(){push(literal)/*(string)draw */} (function)
02484: execute ( Word|"name"|address|empty -- ... ) Execute the given word or the last() if stack is empty. (object)
02485: function(){push(literal)/*(object)onFrameTick ( -- ) Processing main loop */} (function)
02486: function(){kvm.cv=pop().cvwas} (function)
02487: function(){push(rstack.length)} (function)
02488: function(){push(literal)/*(number)1 */} (function)
02489: > ( a b -- f ) 比較 a 是否大於 b (object)
02490: 0branch ( n -- ) 若 n!==0 就將當前 ip 內數值當作 ip, 否則將 ip 進位 *** 20111224 sam (object)
02491: 2494 (number)
02492: function(){push(literal)/*(number)0 */} (function)
02493: >r ( n -- ) Push n into the return stack. (object)
02494: RET (null)
02495: function(){push(literal)/*(string)starting-message */} (function)
02496: execute ( Word|"name"|address|empty -- ... ) Execute the given word or the last() if stack is empty. (object)
02497: function(){push(literal)/*(string)setup */} (function)
02498: execute ( Word|"name"|address|empty -- ... ) Execute the given word or the last() if stack is empty. (object)
02499: frameTickInterval ( -- obj ) frameTickInterval.init(), frameTickInterval.value(), precise dynamic interval time for setTimeout() (object)
02500: function(){pop().init()} (function)
02501: function(){push(literal)/*(string)onFrameTick */} (function)
02502: tib.append ( "string" -- ) Append the "string" to TIB (object)
02503: RET (null)
02504: 662 (number)
02505: ball.f (string)
02506: RET (null)
02507: function(){push(literal)/*(string)Start bouncing . . . */} (function)
02508: . ( sth -- ) Print number or string on TOS. (object)
02509: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
02510: RET (null)
02511: function(){push(literal)/*(string)Stop bouncing. */} (function)
02512: . ( sth -- ) Print number or string on TOS. (object)
02513: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
02514: RET (null)
02515: frameCount ( -- count ) Serial number of frames (object)
02516: frameRate ( -- n ) Re-draw the canvas n times per second (object)
02517: function(){push(kvm.cv.canvas.height/2 * Math.abs(Math.sin(Math.PI * (pop(1) % tos()) / pop())))} (function)
02518: function(){/* to */ g["bounce_height"]=pop()} (function)
02519: bounce_height ( -- n ) ball height for this frame (object)
02520: ball_radius ( -- n ) (object)
02521: function(){push(kvm.cv.canvas.height - ( pop(1) + pop() ))} (function)
02522: function(){/* to */ g["ball_height"]=pop()} (function)
02523: clearCanvas ( -- ) (object)
02524: beginPath ( -- ) Start a new path. http://www.tuicool.com/articles/Bb6RV3 (object)
02525: ball_height ( -- n ) (object)
02526: function(){/* to */ g["ball_y"]=pop()} (function)
02527: ball_x ( -- n ) initial ball coordinates (object)
02528: ball_y ( -- n) initial ball coordinates (object)
02529: ball_radius ( -- n ) (object)
02530: function(){push(literal)/*(number)0 */} (function)
02531: function(){push(literal)/*(number)6.283185307179586 */} (function)
02532: false ( -- false ) boolean false. (object)
02533: arc ( x y r sAngle eAngle !clockwise -- ) (object)
02534: fill ( -- ) Verb, fill the recent path (object)
02535: RET (null)
02536: 662 (number)
02537: cloth.f (string)
02538: RET (null)
02539: function(){push(literal)/*(string)Start . . . */} (function)
02540: . ( sth -- ) Print number or string on TOS. (object)
02541: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
02542: RET (null)
02543: function(){push(literal)/*(string)Done! */} (function)
02544: . ( sth -- ) Print number or string on TOS. (object)
02545: cr ( -- ) 到下一列繼續輸出 *** 20111224 sam (object)
02546: RET (null)
02547: beginPath ( -- ) Start a new path. http://www.tuicool.com/articles/Bb6RV3 (object)
02548: function(){push(literal)/*(string)rgba( */} (function)
02549: r ( -- int ) Red  (object)
02550: function(){push(Math.random()*pop())} (function)
02551: int ( float -- integer )  (object)
02552: + ( a b -- a+b) Add two numbers or concatenate two strings. (object)
02553: function(){push(literal)/*(string), */} (function)
02554: + ( a b -- a+b) Add two numbers or concatenate two strings. (object)
02555: g ( -- int ) green  (object)
02556: function(){push(Math.random()*pop())} (function)
02557: int ( float -- integer )  (object)
02558: + ( a b -- a+b) Add two numbers or concatenate two strings. (object)
02559: function(){push(literal)/*(string), */} (function)
02560: + ( a b -- a+b) Add two numbers or concatenate two strings. (object)
02561: b ( -- int ) blue (object)
02562: range ( -- int ) Range of colour variation (object)
02563: function(){push(Math.random()*pop()+pop())} (function)
02564: int ( float -- integer )  (object)
02565: + ( a b -- a+b) Add two numbers or concatenate two strings. (object)
02566: function(){push(literal)/*(string), */} (function)
02567: + ( a b -- a+b) Add two numbers or concatenate two strings. (object)
02568: function(){push(Math.random())} (function)
02569: + ( a b -- a+b) Add two numbers or concatenate two strings. (object)
02570: function(){push(literal)/*(string)) */} (function)
02571: + ( a b -- a+b) Add two numbers or concatenate two strings. (object)
02572: strokeStyle ( 'style' -- ) Sets or returns the color, gradient, or pattern used for strokes (object)
02573: function(){push(Math.random()*(kvm.cv.canvas.width+100)-50)} (function)
02574: dup ( a -- a a ) Duplicate TOS. (object)
02575: >r ( n -- ) Push n into the return stack. (object)
02576: function(){push(literal)/*(number)0 */} (function)
02577: moveTo ( x y -- ) Specify the pen to (x,y), not painted yet (object)
02578: r> ( -- n ) Pop the return stack (object)
02579: d ( -- int ) Drifting distance of the 2nd point (object)
02580: function(){push(Math.random()*tos()-pop()*0.5+pop())} (function)
02581: function(){push(kvm.cv.canvas.height)} (function)
02582: lineTo ( x y -- ) Specify a line, not painted yet (object)
02583: stroke ( -- ) Verb, draw the recent path. (object)
02584: RET (null)


