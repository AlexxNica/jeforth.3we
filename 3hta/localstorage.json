{"autoexec":"{\"doc\":\"\\njs: outputbox.style.fontSize=\\\"1.5em\\\"\\njs: inputbox.style.fontSize=\\\"1.5em\\\"\\n\\njs> vm.appname char jeforth.3hta = [if] [else]\\n    .( Launch the briefing ) cr\\n    <o> <iframe name=\\\"An introduction to jeforth.3ce\\\" width=\\\"96%\\\" height=\\\"1000\\\" align=\\\"center\\\" src=\\\"http://note.youdao.com/share/?id=79f8bd1b7d0a6174ff52e700dbadd1b2&amp;type=note\\\" frameBorder=\\\"1\\\" marginWidth=\\\"1\\\" marginHeight=\\\"1\\\" scrolling=\\\"Yes\\\"> </iframe></o> drop\\n    cr cr \\n[then]\\n\\ncls\\n.( Execute the 'list' command that lists all local storage fields ) cr\\nlist\\n\\n\\n\",\"mode\":true,\"readonly\":false}","Play with numeric.js":"{\"doc\":\"\\ncls \\n\\\\ Linear algebra example. We start with a matrix.\\n<js>\\nvar A = [[1,2,3],\\n         [4,5,6],\\n         [7,3,9]]; A </jsV> value A\\n\\n\\\\ Let's also make a vector.\\n<js> var x = [3,1,2]; x </jsV> value x\\n\\n\\\\ Matrix-vector product.  b = A (.) x\\n<js> var b = numeric.dot(vm.g.A,vm.g.x); b </jsV> value b b (see)\\n\\n\\\\ Matrix inverse.  ~A \\n<js> var Ainv = numeric.inv(vm.g.A); Ainv </jsV> value Ainv \\nAinv (see)\\n\\n\\\\ Let's check it:   ~A (.) b = x Bingo!!!!\\n<js> numeric.dot(vm.g.Ainv,vm.g.b); </jsV> (see)\\n\\n\\\\ Determinant\\n<js> numeric.det(vm.g.A); </jsV> cr tib. \\n\\n\\\\ Sin wave\\n<js> var x = numeric.linspace(0,6.3,25); x </jsV> to x x (see)\\n\\n<js> var y = numeric.sin(vm.g.x); y </jsV> value y y (see)\\n\\n\\n\\n\\nstop\\njs> numeric tib.\\n\\nstop\\njs> vm.appname==\\\"jeforth.3hta\\\" [if] char js/numeric-1.2.6.js\\n[else] char http://www.numericjs.com/lib/numeric-1.2.6.js [then]\\nreadTextFile \\\\ 先讀取 .js 檔, 但不能直接用\\n<text> \\nwindow.numeric = numeric;  // 先對 source 做一點必要的加工, 把 numeric 掛上 global \\n</text> + </js> \\\\ 然後才執行\\t\\n\\nstop\\n\\\\ Also hosted on BootCDN.cn\\n\\\\ http://cdn.bootcss.com/numeric/1.2.6/numeric.js\\n\\n\\\\ These lines works fine! Test ok on 3ce, 3hta ADO reads only local files\\n\\\\ so the path should be only \\\"js/numeric-1.2.6.js\\\",\\n\\nchar     http://localhost:8888/js/numeric-1.2.6.js     readTextFile tib.\\nchar http://www.numericjs.com/lib/numeric-1.2.6.js     readTextFile tib.\\nchar http://www.numericjs.com/lib/numeric-1.2.6.min.js readTextFile tib.\\n\\n\\n\",\"mode\":true,\"readonly\":false}","Log 2016/05/30":"{\"doc\":\"\\n[ ] Debug  the moving sun of solar-system.f  2016-06-07 14:21:50\\n    The problem is: nap behaves unexpectedly sometimes.\\n\\n\\\\ 終於有類似的複製方法了。照以下這段 test program 執行, test2 不會被執行到, 只有 test1 不斷重複。\\n\\n: test1 begin 3456 dup . space nap again ;\\n: test2 begin 1234 dup . space nap again ;\\ntest1 test2\\n\\n3456 3456 3456 3456 3456 3456  \\\\ This is correct. nap is to wait I/O, all commands are running\\nin ONE line of time, synchrunously in another word. That's why.\\n\\n可是再一次手動執行 test2 之後就變成只見 1234. The previous task is still running. But . . .\\n\\n> test2\\n1234 1234 1234 1234 1234 1234 1234 1234 1234 1234 1234 1234 1234 1234 1234 1234 1234 1234 1234 1234 1234 1234 1234 1234 1234 1234 1234 1234 1234 1234 1234 1234 1234 1234 1234 1234 1234 1234 1234 1234 1234 1234 1234 1234 1234 1234 1234 1234 1234 1234 1234 1234 1234 1234 1234 1234 1234 1234 1234 1234 1234 1234 \\n> stop\\n\\n[x] q1. 最初的 test2 到底有沒有執行到? <--- The answer is NO!\\n    : test1 .\\\" test1 \\\" begin 3456 dup . space nap again ;\\n    : test2 .\\\" test2 \\\" begin 1234 dup . space nap again ;\\n    test1 test2 ==> test1 3456  OK 3456 3456 3456 3456 3456 \\n    因為 nap , sleep 的設計就是要「接地」回到 interpreter idle 狀態去等 I/O, 因此不該緊接著執行之後的指令。\\n    這是對的。因為 test1 是無窮迴路, 所以 test2 根本執行不到, 這也沒錯。\\n\\n[ ] q2. 為何手動執行 test2 會干擾到 test1 的執行\\n    --> test2 會把 test1 的 tibwas, ntibwas, ipwas 都蓋掉, 所以 test1 的 setTimeout() 還在跑, 但是\\n        效果變成是另一個有點時間延遲的 test2。 這個現象即使改寫出另一個 nap2 給 test2 用也一樣！！ So, it\\n        is not because of the SAME resume() function that was suspected incorrectedly the same \\n        instance, no it's fine. \\n        [ ] TIB is a global variable, save-restore tib in outer() is not enough. Because \\n            event handlers are using tib too while they don't save-restore tib. What should\\n            tib be? or how should nap work?\\n        [x] 不信邪, try nap2 again...\\n        : nap2  ( mS -- ) \\\\ Suspend to idle, resume after mS. Multiple nap is allowed.\\n            <js>\\n                var tibsaved=tib, ntibsaved=ntib, ipsaved=ip, delay=pop();\\n                tib = \\\"\\\"; ntib = ip = 0; // ip = 0 reserve rstack, suspend the forth VM \\n                setTimeout(resume,delay);\\n                function resume() { \\n                    tib = tibsaved; ntib = ntibsaved;\\n                    outer(ipsaved); // resume to the below ending 'ret' and then go through the TIB.\\n                }\\n            </js> ;\\n\\n        : test1 begin 3000 dup . space nap again ;\\n        : test2 begin 10000 dup . space nap2 again ;\\n        test1 test2\\n\\n        [ ] 結果還是一樣！！ 原因跟 nap nap2 無關, 唯一的聯繫就是 TIB !! 因為 nap nap2 都 save restore tib\\n            ntib 會不會因此 corrupted? \\n\\n[x] q3. What if not test1, test2, they are as words, but command lines directly?\\n    [begin] 3456 dup . space nap [again]\\n    [begin] 1234 dup . space nap [again]\\n    --> They work fine as anticipated. So, only test1, test2 words are in trouble.\\n    --> 我懂了! 從 command line 下這些命令時, 是真的有 tib 輸入給 forth interpreter. As a word,\\n        like test1, test2 where tib become a shifting thing then it's not tib/ntib to\\n        save-restore but only IP. \\n\\n[x] 執行 test1 之後, 50 nap 會不會出問題？ --> No problem. 50 nap problem only happening in \\n    solar-system.f and naughty-balls2.f, strange! [ ] \\n\\n[ ] 執行 test1 之後, 它的 tib 從 source code 看來, 好像就湮滅了。 It has no \\n    反之, 用 command line 的從結果看來 TIB 有被保存。\\n證明之: \\n1. 修改 nap \\n    marker ---\\n    : nap ( mS -- ) \\\\ Suspend to idle, resume after mS. Multiple nap is allowed.\\n        <js>\\n    if(vm.debug){debugger;}\\n        var tibwas=tib, ntibwas=ntib, ipwas=ip, delay=pop();\\n        tib = \\\"\\\"; ntib = ip = 0; // ip = 0 reserve rstack, suspend the forth VM \\n        setTimeout(resume,delay);\\n        function resume() { \\n    if(vm.debug){debugger;}\\n            tib = tibwas; ntib = ntibwas;\\n            outer(ipwas); // resume to the below ending 'ret' and then go through the TIB.\\n        }\\n        </js> ;\\n        /// debug nap \\n2. test \\n    js: vm.debug=true [begin] ( this is the command line ) 100 nap [again]\\n      \\n實驗記錄 --> \\ncommand line \\n> nap \\n> return to phaseB() end of \\\"function\\\" which is the js section in nap \\n> return to nap's colonxt() at the end \\n> return to phaseB() end of case \\\"object\\\" which is the nap word\\n> end of phaseB() \\n> end of execute() , ip is not defined now!!\\n> end of outerExecute() , ip is not defined here\\n> back to the loop of while(!stop) in outer(), \\n  tib is \\\"\\\", ntib is 0 <------ nap 安排下來的\\n  ip is undefined <--- 此時在 jeforth.js 裡面, ip 怎會是 undefined?\\n  不只 ip undefined, 連 last() 也不認得, stack 也是 undefined\\n> nothing to do, end of outer()   \\n> return to the resume() in nap out of the outer() in resume()\\n> return to kvm.forthConsoleHandler() out of the kvm.dictate()\\n  stack undefined, 這很自然, 但是 rstack 裡面有個 undefined 對嗎?\\n\\tkvm.rstack()\\n\\t[11, undefined] <----------- 奇怪!! [ ] nap 是否應該主動 push 一個 0 進 rstack?\\n\\tkvm.rstack().length\\n\\t2  \\n  總之, 工作的確尚未結束, 所以 kvm.forthConsoleHandler() 還不能印 prompt OK\\n  整個 command line 因此卡在 kvm.forthConsoleHandler() 裡面等著 rstack 歸\\n  于平衡，也因此 tib 得以保留。\\n  \\n[ ] stop() 是個 DOM 的 native code!! \\n\\nrepleat \\n\\njs: vm.debug=true [begin] ( this is the command line ) 100 nap [again]\\n\\nRepeat the same experiment:\\n\\n1'st breakpoint is at the nap js code entry, \\n\\tip\\n\\t2866\\n\\trstack < VM7093:1 Uncaught ReferenceError: rstack is not defined. \\n\\t\\t\\t [ ] 可能是 F12 debugger 自己的問題? 故意去 access rstack 看看, 應該可以。\\n\\tstack  < VM7105:1 Uncaught ReferenceError: stack is not defined\\n\\t\\t\\t [ ] 可能是 F12 debugger 自己的問題? 故意去 access stack 看看, 應該可以。\\n\\tlast() <  VM7135:1 Uncaught ReferenceError: last is not defined\\n\\ttib\\n\\t\\\"js: vm.debug=true [begin] ( this is the command line ) 100 nap [again]\\\"\\n\\tntib\\n\\t62    <------- 既然 tib, ntib 都有, 想必看不見 stack, ip, 等等是 F12 的問題。\\n\\tvm.debug\\n\\ttrue\\n\\tvm.rstack()\\n\\t[25, 0] <----- 這個 0 哪來的?\\n\\n[ ] Modify nap, try nap2. It save-restore ip if is in compiling state, tib/ntib if is in\\n    interpret state.\\n\\n    code [nap] ( mS -- ) \\\\ Suspend to idle, resume after mS. Multiple nap is allowed.\\n        var ipwas=ip, delay=pop();\\n        ip = 0; // ip = 0 reserve rstack, suspend the forth VM \\n        setTimeout(resume,delay);\\n        function resume(){outer(ipwas)}\\n        end-code compile-only \\n        /// for used in words  \\n\\n    : test1 begin 3000 dup . space [nap] again ;\\n    : test2 begin 10000 dup . space [nap] again ;\\n    test1 test2\\n[ ] 用 [nap] 則 test2 test1 同時可以跑, 且 stop 停不下來, 因為 begin-again 不是在 tib 裡面跑的, 所以\\n    [nap] 算不算接地? [nap] 回到 idle 之後剩下的 tib 內容就會被拿去執行。但是原來的程式的確是停下來了, 因此\\n    I/O delay 的效果還是有的。\\n\\n    原 nap 接地之後\\n\\n-----------------\\n\\n[ ] solar-system.f 簡化到這樣就會出問題：\\n run: 1000 for js: h=vm.g.stars[0].x+=0.5 50 nap next er\\n更簡化到: 50 nap or 50 sleep or 1 nap 但是要多試幾次也會捅出問題。\\n--> naughty-balls2.f 執行中下 20 nap 也會出類似的問題。感覺是 nap 的 resume 回到錯誤的 TIB 了。\\n\\n[ ] Youtube presentation of numeric.js\\n[ ] 準備 release master 新版, search \\\"kvm.minor_version\\\"\\n    全部加 200 代表 GitHub master release 的版號。\\n    [x] jeforth.3nd.js --> version 2 -> 202\\n    [x] jeforth.3nw.html, /package.json -> version 22 -> 222\\n    [x] jeforth.3htm.js --> to be version 2 now -> 202\\n    [x] jeforth.3ce.js(3ce extension pages)-> 202\\n    [x] jeforth.3ce, ce.f(Target page) -> 202\\n    [x] jeforth.3ce, background.js -> 202\\n    [x] jeforth.hta --> <HTA> tag. to be version 3 now -> 203 \\n    [ ] GitHub read me should feature the published 3ce Chrome extension.\\n    [ ] README.md 上的 demo 也要改寫好一點。最好能有浮動 console3we 框。\\n        --> 先把結構改好, link 出去的內容先弄成 under constructing. 日起有功,穩步推進。\\n\\n[x] 3nw 一出 error 就 jsc 一大堆。\\n    --> 3htm/f/jsc.f , 3nd/f/jsc.f 有兩個,結果依 3nw 的 path 優先順序抓到 3nd 的而應該用\\n        3thm 的才對。用完整 path include 即可。\\n\\n[x] 3ce F5 doesn't refresh <-- 這是 3ce 的關係, 有辦法嗎?\\n    既然 {F5} 隨 platform 各異即應定義前先檢查是否已經存在。\\n    --> 3ce 直接把 F5 擋掉算了 --> 也不好, 都已經針對 3ce 寫了何不解決問題。\\n    ==> runtime.reload, 這個不成功\\n        chrome.runtime.reload() Reloads the app or extension. \\n        --> 直接把 3ce ext page 關掉然後亂 load 一個網頁，不知所云。\\n        --> 這個 reload 似乎指的是整套 Chrome extension re-install。\\n    ==> tabs.reload, 這個成功了!! (for 3ce)\\n        chrome.tabs.reload(integer tabId, object reloadProperties, function callback) Reload a tab. \\n        active-tab :> id js: chrome.tabs.reload(pop()) \\n    ==> 3nw 也有同樣的問題, 解法如下：\\n        js: window.location.href=window.location or js: window.location.reload(true);\\n        --> 以上也對,但根本不是這個, RI: 是引進 local storage 之後 3nw 的 platform.f 要整個都在\\n            3hta/f/platform.f 之前, 當初放得很亂, 出了問題。\\n        ==> 好了, 連 Ctrl-Plus Ctrl-Minus 都修好了。 ^2016-06-02 11:42:11\\n\\n[x] 3ce, F2 in trouble, status reversed, 3hta too!!\\n    OK Input box EditMode = undefined <---- \\n    Input box EditMode = true <--- reversed\\n    [x] 3hta, 3nw, 3ce, 3htm verify. ^2016-06-01 09:05:08\\n\\n[x] tutor-cloth.f console3we strange. \\n    [x] Improve the scrollto position. \\n        was: window.scrollTo(0,endofinputbox.offsetTop)\\n        modifi only those quit.f should be enough. Or even easier, redefine\\n        the cr command would be enough! <-- not enough, also vm.forthConsoleHandler() too\\n        and it is redefined in 3hta\\\\f\\\\jquery.f. So, both cr and forthConsoleHandler() need\\n        to use the new function vm.scroll2inputbox() so modify it should work.\\n        \\\\ window.scrollTo(0,endofinputbox.offsetTop) chang to vm.scroll2inputbox()\\n            [x]3ce/target.f [x]3hta,[x]3htm,[x]3nw,[x]3ce/quit.f [x]all forthConsoleHandler() \\n            [x]ce.f [ ]3htm/platform.f\\n        \\\\ Define vm.scroll2inputbox\\n            [x]jeforth.3nw.html, [x]jeforth.3ce.js, [x]jeforth.hta [x]jeforth.3htm.js\\n        [x] 搞懂 scrollTo, see YNote : \\\"圖解 HTML 網頁上的東西 element 的位置與寬高值 ScrollTo, width, Top, Height\\\"\\n            1. Blur 避免 forthConsoleHandler() 的作用。它總是把畫面焦點 scroll 到 inputbox 但是只針對\\n               inputbox:focus 的時候。所以若要控制畫面焦點就必須 blur 出 inputbox 否則會被它拉回去。\\n            2. js> endofinputbox js> elePlayarea insertAfter 之後就好了。\\n                js> endofinputbox.offsetTop \\\\ ==> 3088 (number) 用 F12 debugger 實驗,徹底了解每個值。\\n                js> endofinputbox.clientTop \\\\ ==> 0 (number)\\n                js> endofinputbox.scrollTop \\\\ ==> 0 (number)\\n                js> endofinputbox.clientTop \\\\ ==> 0 (number)\\n     [x] quit.f 最後一行應該是 \\targs tib.insert 而非 js: vm.scroll2inputbox();inputbox.focus()\\n            否則 tutor-cloth.f 控制 scrollTo for 開始位置變成被最後一行蓋掉而無效。\\n            [x]3thm quit,[x]3ce quit,[]3nw quit, []3hta quit \\n     [x] Font size not consistant either. <--- 整理, 把所有東西都納入 class=essay 範圍即可。\\n     [x] 最後印出 tutor-cloth.f 的 snipet 需要改進。 <-- Ok now. ^2016-06-01 18:18:25\\n\\n\\n\",\"mode\":true,\"readonly\":false}"}