["<div>[x]&nbsp;這台電腦入睡之後會被無故喚醒，用 jeforth.3hta 來簡單解決。<br>&nbsp;&nbsp;&nbsp;&nbsp;馬上去睡, 萬一被無故喚醒之後 count down 30 秒後繼續睡，讓 user 有機會下 stop 停止。\n<div><div><div><div><div><div><div><blockquote><table class=\"commandline\"><tbody><tr><td><pre><code class=\"source\">[begin]<br>run shutdown /h<br>&lt;o&gt; &lt;h1&gt;Bringing the system into hibernate&lt;/h1&gt;&lt;/o&gt; drop cr<br>&lt;o&gt; &lt;h3&gt;3 wait 10 seconds .... \"stop\" me?&lt;/h3&gt;&lt;/o&gt; drop cr 10000 nap<br>&lt;o&gt; &lt;h3&gt;2 wait 10 seconds .... \"stop\" me?&lt;/h3&gt;&lt;/o&gt; drop cr 10000 nap<br>&lt;o&gt; &lt;h3&gt;1 wait 10 seconds .... \"stop\" me?&lt;/h3&gt;&lt;/o&gt; drop cr 10000 nap<br>[again]</code></pre></td></tr></tbody></table></blockquote>\n[x] 需要&nbsp;push outputbox 進 log.json [&lt;div&gt;,&lt;div&gt;,&lt;div&gt;...] 的機制. log.push, log.pop, log 看全部。取代現有的 log.txt。<div>&nbsp;&nbsp;&nbsp; 已經完成!&nbsp;---&gt; editor.f<br>[x] 用得很多 js&gt; outputbox 何不把它變成一個 forth word? 因為本來有 outputbox 不必再浪費。<br>[x] 目前 edit open 是把文章放到 inputbox 下面，試改成放到 output box 上面。<blockquote><pre><code class=\"source\">: open ( \"path-name\" -- ) \\ Read the file to edit\n  article if article :: innerHTML=\"\" ( 有的話清除現有頁面 ) else \n  &lt;o&gt; &lt;div style=\"background-color:white\"&gt;&lt;/div&gt;&lt;/o&gt; to article ( 沒現成就新建頁面 )\n  article js&gt; outputbox insertBefore ( 放在 outputbox 之前 )\n  then pathname readTextFile article :: innerHTML=pop() ;</code></pre></blockquote>[ ] 把 ctrl-F2 改成直接 edit 所在處的 node. 本來只是取得所在處的 node 進 ce@.&nbsp;<br>[ ] 先插入一個&nbsp;anchor node 到所在處之 node 的前面 &lt;a id=editee&gt;&lt;/a&gt;. 用來從 outputbox 中的 editor 跳回來。<br>[ ] editor 要多一個 button [jump] 並且在 [save]、[close] 之後都自動跳回來。<br>[x] editbox 也要有 id=editboxtextarea。<br>[x] 進 editbox 順便要&nbsp;disable outputbox 的 contentEditable 否則會干擾 editbox 的使用。<br>[ ] Open/Save 之後，即有東西在 editing 時，在 inputbox 下面列出該檔案的 pathname 以資提示。<br>[ ] env@ 只有 3hta 能用, 致使 editor.f 在 3nw 暫時還不能用。其實 3nw 也可以 access environment variables.</div></div><div>[ ] 這行會觸動 ce@ 的防錯機制, ce@ 該擴充了。</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; article :&gt; currentStyle ce!<br>[ ]&nbsp;這個好用! article :&gt; style :: backgroundColor=\"white\". <br>&nbsp;&nbsp;&nbsp;&nbsp;[ ]&nbsp;&nbsp; Canvas.f 裡面我為了改 style 所用的方法很笨。<br>&nbsp;&nbsp;&nbsp; [ ]&nbsp;&nbsp; index.html, jeforth.htm,&nbsp;jeforth.3nw.html 好像都很笨。</div></div></div></div><p>[x] 先實驗 #text <strong>能</strong>不能用 editbox 編輯？outputbox 裡都是：<br>&nbsp;&nbsp;&nbsp; [x] so far, editbox does not correctly handle #text. The 'node-source' command is not mature enough.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; --&gt; 直接測試 node-source when ce@ is a #text --&gt; bug found!<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; --&gt; ce@ node-source \\ ==&gt; 0: [object Text] (object) &lt;-- 果然不如預期，有 bug。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;<em>: node-source ( node -- \"source\" ) \\ Get outerHTML or node.toString()<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;dup :&gt; outerHTML ?dup if ( node outerHTML ) nip <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;else ( node ) dup :&gt; toString() char /* swap + js&gt; \"*/\\n\" + <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;<strong>swap ( /*...*/ node )</strong> :&gt; nodeValue ?dup if + then then ;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; --&gt; Ok now.<br></em><br>[x] editbox-save 把所有東西都當 outerHTML 回存也不對, 至少就沒有照顧到 #text 假設可以。&nbsp;<br>&nbsp;&nbsp;&nbsp; : &nbsp;editbox-save ( -- ) \\ ce@ is the target element.<br>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;js&gt; editboxtextarea.value /*remove*/ &lt;code&gt;escape&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;<strong>ce@ dup :&gt; nodeValue if :: nodeValue=pop() else :: outerHTML=pop() then</strong> ;<br>&nbsp;&nbsp;&nbsp; --&gt; Yes, this way works. But we then can't change a #text to an element neither&nbsp;vise versa. <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Because we are 沿用本來的 node or element.<br>&nbsp;&nbsp;&nbsp; --&gt; 所以要改成用替換的方式才行。</p></div></div></div><p>[x]&nbsp;save 應自動包括 log.save <br>[ ] html5.f 裡的 replaceNode 用來把 #text 改成 &lt;p&gt; 有問題。#text 本身就有 .replaceNode(newElement) 可用。<br>&nbsp;&nbsp;&nbsp; [ ] 查一般 &lt;p&gt; &lt;table&gt; 等是否<strong>都有 .replaceNode()</strong> <strong>是</strong>的話 html5.f 要修正。</p></div><br>&gt; : save ( -- ) \\ Save the editing document<br> &nbsp; &nbsp; &nbsp; &nbsp;char log.save execute \\ also save the recent outputbox<br> &nbsp; &nbsp; &nbsp; &nbsp;js&gt; mystyle.outerHTML+myarticle.outerHTML pathname writeTextFile ;<br><br>reDef save<br> OK <br>&gt; save<br> OK <br><h3> \\ 112233</h3><br> OK [object Text] &gt; \\ 112233...<br><br>&gt; edit<br><p> OK <br></p><br>&gt; .s<br> &nbsp; &nbsp; &nbsp;0: null (null)<br> &nbsp; &nbsp; &nbsp;1: [object HTMLHeadingElement] (object)<br> &nbsp; &nbsp; &nbsp;2:<br>Output box EditMode = false<br><br>Output box EditMode = true<br><br>&gt; save<br>","<h2> 十分抱歉，這台電腦入睡之後會被無故喚醒，用 jeforth.3hta 來簡單解決。\n萬一被無故喚醒之後 count down 一段時間讓 user 有機會關掉本程式，否則過後繼續睡。</h2><h1>Bringing the system into sleep .... </h1><h3>5. wait 20 seconds .... \"stop\" me?</h3><br><h3>4. wait 20 seconds .... \"stop\" me?</h3><br><br>&gt; stop<br> OK <br>&gt; log.open<br><div style=\"border: thin solid black;\"><br><span>[x]&nbsp;這台電腦入睡之後會被無故喚醒，用 jeforth.3hta 來簡單解決。</span><br><span>&nbsp;&nbsp;&nbsp;&nbsp;馬上去睡, 萬一被無故喚醒之後 count down 30 秒後繼續睡，讓 user 有機會下 stop 停止。\n</span><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><blockquote><table class=\"commandline\"><tbody><tr><td><pre><code class=\"source\">[begin]&lt;br&gt;run shutdown /h&lt;br&gt;&lt;o&gt; &lt;h1&gt;Bringing the system into hibernate&lt;/h1&gt;&lt;/o&gt; drop cr&lt;br&gt;&lt;o&gt; &lt;h3&gt;3 wait 10 seconds .... \"stop\" me?&lt;/h3&gt;&lt;/o&gt; drop cr 10000 nap&lt;br&gt;&lt;o&gt; &lt;h3&gt;2 wait 10 seconds .... \"stop\" me?&lt;/h3&gt;&lt;/o&gt; drop cr 10000 nap&lt;br&gt;&lt;o&gt; &lt;h3&gt;1 wait 10 seconds .... \"stop\" me?&lt;/h3&gt;&lt;/o&gt; drop cr 10000 nap&lt;br&gt;[again]</code></pre></td></tr></tbody></table></blockquote>\n[x] 需要&nbsp;push outputbox 進 log.json [&lt;div&gt;,&lt;div&gt;,&lt;div&gt;...] 的機制. <br>&nbsp;&nbsp;&nbsp; log.push, log.pop, log 看全部。取代現有的 log.txt。<div>&nbsp;&nbsp;&nbsp; 已經完成!&nbsp;---&gt; editor.f<br>[x] 用得很多 js&gt; outputbox 何不把它變成一個 forth word? 因為本來有 outputbox 不必再浪費。<br>&nbsp;&nbsp;&nbsp; [ ] 既然如此 eleBody eleHead eleDisplay(shit! it IS outputbox) 都應該取消。一個<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 東西有兩個參考果然連自己都忘了，用最根本的就好了。<br>[x] 目前 edit open 是把文章放到 inputbox 下面，試改成放到 output box 上面。<br><div><table class=\"commandline\" style=\"margin-left: 2em;\"><tbody><tr><td><pre><code class=\"source\">&lt;font size=\"2\"&gt;: open ( \"path-name\" -- ) \\ Read the file to edit\n  article if article :: innerHTML=\"\" ( 有的話清除現有頁面 ) else \n  &lt;o&gt; &lt;div style=\"background-color:white\"&gt;&lt;/div&gt;&lt;/o&gt; to article ( 沒現成就新建頁面 )\n  article js&gt; outputbox insertBefore ( 放在 outputbox 之前 )\n  then pathname readTextFile article :: innerHTML=pop() ;&lt;/font&gt;</code></pre></td></tr></tbody></table><br>[x] editbox 也要有 id=editboxtextarea。<br>[x] 先實驗 #text <strong>能</strong>不能用 editbox 編輯？outputbox 裡都是：<br>&nbsp;&nbsp;&nbsp; [x] so far, editbox does not correctly handle #text. <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; The 'node-source' command is not mature enough.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; --&gt; 直接測試 node-source when ce@ is a #text --&gt; bug found!<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; --&gt; ce@ node-source \\ ==&gt; 0: [object Text] (object) &lt;-- 果然不如預期，有 bug。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</div></div></div></div></div></div><div><blockquote><table class=\"commandline\"><tbody><tr><td><pre><code class=\"source\">&lt;em&gt;: node-source ( node -- \"source\" ) \\ Get outerHTML or node.toString()&lt;br&gt;    dup :&gt; outerHTML ?dup if ( node outerHTML ) nip &lt;br&gt;&nbsp;&nbsp;&nbsp;&nbsp;else ( node ) dup :&gt; toString() char \\n\" + &lt;br&gt;&nbsp;&nbsp;&nbsp;&nbsp;&lt;strong&gt;swap (  node )&lt;/strong&gt; :&gt; nodeValue ?dup if + then then ;&lt;/em&gt;</code></pre></td></tr></tbody></table>\n&nbsp;&nbsp;&nbsp; --&gt; Ok now.</blockquote></div><p>[x] editbox-save 把所有東西都當 outerHTML 回存也不對, 至少就沒有照顧到 #text 假設可以。&nbsp;<br>&nbsp;&nbsp;&nbsp; : &nbsp;editbox-save ( -- ) \\ ce@ is the target element.<br>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;js&gt; editboxtextarea.value  &lt;code&gt;escape&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;<strong>ce@ dup :&gt; nodeValue if :: nodeValue=pop() else :: outerHTML=pop() then</strong> ;<br>&nbsp;&nbsp;&nbsp; --&gt; Yes, this way works. But we then can't change a #text to an <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; element neither&nbsp;vise versa. Because we are 沿用本來的 node or element.<br>&nbsp;&nbsp;&nbsp; --&gt; 所以要改成用替換的方式才行。</p></div></div></div><p>[x]&nbsp;save 應自動包括 log.save <br>[x] html5.f 裡的 replaceNode 用來把 #text 改成 &lt;p&gt; 有問題。<br>&nbsp;&nbsp;&nbsp; #text 本身就有 .replaceNode(newElement) 可用。<br>&nbsp;&nbsp;&nbsp; [x] 查一般 &lt;p&gt; &lt;table&gt; 等是否<strong>都有 .replaceNode()</strong> <strong>是</strong>的話 html5.f 要修正。<br>&nbsp;&nbsp;&nbsp; [x] html5.f 本來的 replaceNode 寫法用 replaceChild 有它的道理。一律都用 replaceNode 之後<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 只有 #text 正常，其他原來的 element 被 replaceNode 之後都跑到 newElement<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 所在之處的 outputbox 最下面來了。兩個方法要合併起來才對。當 target 有 outerHTML<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 時用原來的方法，沒有才直接用 replaceNode。<br>&nbsp;&nbsp;&nbsp; [x] 恐怕 #text replace 成 element 還是會跑到 outputbox 最下面。哈! 不會, 成功了！<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 想必是因為 replaceNode 沒有把其他相關因素都 replace 過去。replaceNode 的資料有提到這點。<br>[x] 把 ctrl-F2 改成直接 edit 所在處的 node. 本來只是取得所在處的 node 進 ce@.&nbsp;<br>[x] 目前 editbox-save 會自動加 &lt;div&gt;...&lt;/div&gt; 為了保證所有的 editbox 內容都 replaceNode<br>&nbsp;&nbsp;&nbsp;&nbsp;原來的 node, but then there will be many redundent &lt;div&gt; ! So, don't do that.<br>&nbsp;&nbsp;&nbsp; It's user's responsibility to add their own &lt;div&gt;。<br>[x] Add border to outputbox when in contentEditable mode.<br>&nbsp;&nbsp;&nbsp; js&gt; outputbox :&gt; style &lt;js&gt; pop().border=\"thin solid red\"&lt;/js&gt;<br>&nbsp;&nbsp;&nbsp; js&gt; outputbox :&gt; style &lt;js&gt; pop().border=\"thin solid white\"&lt;/js&gt;<br>[x] Source code box 很難搞，應該是做出一個空的，讓 user 自己任意 copy-paste 東西進去。<br>&nbsp;&nbsp;&nbsp; ==&gt; 加強 [Example] 裡面多放點例子。<br>[x] 以下這個方法，後來發現不好。應該直接從 outputbox 往下 top-down 下來全部打框即可。<br>&nbsp;&nbsp;&nbsp; 【看清楚 outputbox 以下第一層 element 的範圍以免刪除時發生意外。】<br>&nbsp;&nbsp;&nbsp; 讓 double-click track back 到 outputbox 然後倒回來加上紅框，。<br>&nbsp;&nbsp;&nbsp; 手動做做看：</p></div></div></div></div></div> <table class=\"commandline\" style=\"margin-left: 2em;\"><tbody><tr><td><pre><br>js: body.ondblclick=function(){push(window.getSelection().anchorNode)}</pre></td></tr></tbody></table><p>&nbsp;&nbsp; 這樣一行就成功了!而且直接 push()——不必用 kvm.push()。<br>&nbsp;&nbsp;&nbsp;#text 沒有 style 考慮把整段文字都用&nbsp;&lt;span style=\"border:thin solid red&gt; <br>&nbsp;&nbsp; 加框即可。有 style 的就用 border 本來有 border 的改過去不管它，因為是在 outputbox <br>&nbsp;&nbsp; 裡面無所謂。Released version should check if the forth handler&nbsp;existance<br>&nbsp;&nbsp; before&nbsp;hooking the event handler. So this is done after the definition of<br>&nbsp;&nbsp; the forth word.</p><table class=\"commandline\" style=\"margin-left: 2em;\"><tbody><tr><td><pre>&nbsp;: mark-block ( node -- ) \\ Add red border to the double clicked block under outputbox<br>&nbsp;&nbsp;begin ( node' )<br>&nbsp;&nbsp;&nbsp; dup :&gt; parentNode dup ( node' parent parent ) <br>&nbsp;&nbsp;&nbsp; js&gt; outputbox &lt;&gt; ( node' parent ? ) <br>&nbsp;&nbsp;while ( node' parent ) \\ 不是 outputbox 還要再上升<br>&nbsp;&nbsp;&nbsp; nip ( parent )<br>&nbsp;&nbsp;( parent ) repeat ( node' parent )<br>&nbsp;&nbsp;drop ( node )<br>&nbsp;&nbsp;js&gt; tos().style if ( node )<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;js&gt; <br> &nbsp; &nbsp;if (tos().style.border==\"thin solid red\") pop().style.border=\"\";<br><span> &nbsp; &nbsp;else pop().style.border=\"thin solid red\";</span><br>    &lt;/js&gt;<br>&nbsp;&nbsp;else ( node ) \\ 沒有 style 的打賭是 #text <br>&nbsp;&nbsp;&nbsp; s' &lt;span style=\"border:thin solid red\"&gt;' <br>&nbsp;&nbsp;&nbsp; js&gt; tos(1).nodeValue +<br>&nbsp;&nbsp;&nbsp; s' &lt;/span&gt;' + &lt;/o&gt; swap ( span node ) replaceNode<br>&nbsp;&nbsp;then ;</pre></td></tr></tbody></table><p>&nbsp;&nbsp;&nbsp; <span style=\"font: 0.8em/normal courier; font-size-adjust: none; font-stretch: normal;\">js: body.ondblclick=function(){push(window.getSelection().anchorNode);execute(\"mark-block\")} &lt;--- Bingo!!!</span><br>&nbsp;&nbsp;&nbsp; [x]&nbsp;這下麻煩了, 加了一堆紅框, 怎麼去除?&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;==&gt; 當初打紅框上去時可以把原來的 .style.border 存在 ce@ 自己身上。</p><table class=\"commandline\" style=\"margin-left: 2em;\"><tbody><tr><td><pre><code class=\"source\">&lt;font size=\"2\"&gt;&lt;/font&gt;</code>( node ) &lt;js&gt; <br>tos().old_border = tos().style.border;<br>tos().style.border=\"thin solid red\";<br>&lt;/js&gt;&nbsp;</pre></td></tr></tbody></table><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ==&gt; Trace back to outputbox ... 方法有趣，但是不好。同樣目的應該 top-down 打框。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 清不掉的紅框，用 jquery 來清一次就算了。</p><table class=\"commandline\" style=\"margin-left: 2em;\"><tbody><tr><td><pre>js&gt; $(\"*\").toArray()&nbsp;constant a \\ 取得整個網頁的東西<br>true value debug \\ debug 開關<br>&lt;text&gt;<br>a :&gt; length 1- for \\ 不要忘記 1- !!!!<br>&nbsp; r@ <br>&nbsp; debug if *debug* 111&gt;&gt;&gt; then<br>&nbsp; a :&gt; [pop()] :&gt; style if<br>&nbsp;&nbsp;&nbsp; debug if *debug* 222&gt;&gt;&gt; then<br>&nbsp;&nbsp;&nbsp; r@ a :&gt; [pop()] &lt;js&gt; pop().style.border==\"thin solid red\"&lt;/jsV&gt; if<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; debug if *debug* 333&gt;&gt;&gt; then<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; r@ a :&gt; [pop()] :&gt; style.border=\"\"<br>&nbsp;&nbsp;&nbsp; then<br>&nbsp; then<br>next<br>&lt;/text&gt; (run:)</pre></td></tr></tbody></table><p>&nbsp; &nbsp;[x] 【看清楚 outputbox 以下第一層 element 的範圍以免刪除時發生意外。】改用 top-down 方式。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; outputbox-high-light-toggle ok now.</p><p>[x] Autoit has {SLEE} key! Try it.<br>&nbsp;&nbsp;&nbsp; [x] Autoit has Sleep(mS) actually, <strike>but it doesn't work on my&nbsp; &nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Windows 10 T550 and neight Window 8 as I remember.&nbsp;</strike> it&nbsp;pauses Autoit script for mS of time, not<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bringing the system into sleep mode.&nbsp; </p><table class=\"commandline\" style=\"margin-left: 2em;\"><tbody><tr><td><pre>&gt; include autoit.f<br>&gt; au3 :: Sleep(500) \\ ==&gt; No work!<br>&gt; au3 :: Sleepp(500)<br>JavaScript error : Object doesn't support property or method 'Sleepp'<br>&gt; au3 :: Sleep(5000) \\ ==&gt; No work!</pre></td></tr></tbody></table><p>&nbsp;&nbsp;&nbsp;[x] au3 :: send('{!}') \\ ==&gt; really sended a '1' right to the inputbox.<br>&nbsp;&nbsp;&nbsp;[!] au3 :: send('{SLEEP}') \\ ==&gt;&nbsp;No work at all<br>&nbsp;&nbsp;&nbsp;[!] au3 :: send('{SLEEP}',1000) \\ ==&gt; sended '{SLEEP}' to inputbox after 1 sec! 開玩笑嗎?<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 以上用&nbsp;autoit 自己的 SciTE-lite 實驗也是同樣的結果。<br>&nbsp;&nbsp;&nbsp;[x] au3 :: send('{VOLUME_MUTE}') \\ ==&gt;&nbsp;It works! Toggled as anticipated.<br>&nbsp;&nbsp; [x] au3 :: Shutdown(32) it works! 32 is standby.<br>&nbsp;&nbsp; [x] improve hibernation.f , done. It standby now instead of hibernation.<br><br>[x] 進 editbox 順便要&nbsp;disable outputbox 的 contentEditable 否則會干擾 editbox 的使用。<br>&nbsp;&nbsp;&nbsp; --&gt; 現在發現進 editbox 時 outputbox 不一定要 contentEditable&nbsp;了 click 也可以(上面有提到)<br>&nbsp;&nbsp;&nbsp; --&gt; Double click == Ctrl-F2<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>[ ] Open/Save 之後，即有東西在 editing 時，在 inputbox 下面列出該檔案的 pathname 以資提示。<br>[ ] env@ 只有 3hta 能用, 致使 editor.f 在 3nw 暫時還不能用。<br>&nbsp;&nbsp;&nbsp; 其實 3nw 也可以 access environment variables.</p><div>[ ] 這行會觸動 ce@ 的防錯機制, ce@ 該擴充了。</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; article :&gt; currentStyle ce!<br>[ ]&nbsp;這個好用! <strong>article :&gt; style :: backgroundColor=\"white\"</strong>&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;[ ]&nbsp;Canvas.f 裡面我為了改 style 所用的方法很笨。<br>&nbsp;&nbsp;&nbsp; [ ]&nbsp;index.html, jeforth.htm,&nbsp;jeforth.3nw.html 好像都很笨。<br>&nbsp;&nbsp;&nbsp; [ ] &lt;div style=\"margin-left: 2em;\"&gt;OK&lt;/div&gt; \\ em 是當時 font-size 的倍數，可正負&amp;小數。</div><div><table class=\"commandline\" style=\"margin-left: 2em;\"><tbody><tr><td><pre><code class=\"source\">&lt;font size=\"2\"&gt;&gt; ce@ :&gt; style :&gt; fontSize . \\ ==&gt; 10px OK&lt;br&gt;&lt;/font&gt;</code><code class=\"source\">&lt;font size=\"2\"&gt;&gt; ce@ :&gt; style :&gt; getPropertyValue(\"font-size\") . \\ ==&gt; 10px OK &lt;br&gt;&gt; ce@ :&gt; style :&gt; fontSize=\"\"&lt;br&gt;&gt; ce@ :&gt; style :&gt; getPropertyValue(\"font-size\") . \\ ==&gt; \"\"&lt;/font&gt;</code></pre></td></tr></tbody></table></div><div>[ ] 先插入一個&nbsp;anchor node 到所在處之 node 的前面 &lt;a id=editee&gt;&lt;/a&gt;. <br>&nbsp;&nbsp;&nbsp; 用來從 outputbox 中的 editor 跳回來。#text 有 insertBefore 嗎?怪就怪在它有，但是不能<br>&nbsp;&nbsp;&nbsp; 用，必須鑽到&nbsp;parent 下 insertBefore(newNode,me) 才行。答案是——可以。試試看：....<br>[ ] 不如直接把 editbox 就放到 target 下面<br>&nbsp;&nbsp;&nbsp;-- <br><table class=\"commandline\" style=\"margin-left: 2em;\"><tbody><tr><td><pre><code class=\"source\">&lt;font size=\"2\"&gt;&lt;/font&gt;</code>hhkhkhkh \nj gjkgkjgkjg \njkg</pre></td></tr></tbody></table><p>&nbsp;&nbsp;&nbsp;--<br>\n\n[ ] editbox&nbsp;以及 Ctrl-F2/Double-click 要多一個 button [jump] 並且在 [save]、[close] 之後都自動跳回來。<br>&nbsp;&nbsp;&nbsp; [ ] evernote 上剛才蒐集到一些 How to jump or scroll on a HTML page. .... see my Evernote.<br>1. 取得 target node&nbsp;的 offset.top,&nbsp;#text 也有 offset. 其實就是 top 跟 left 之 integer 值。<br>&nbsp;&nbsp;&nbsp; ce@ js&gt; $(pop()).offset() ( objOffset={top:int,left:int} )&nbsp;<br>2. 用 window.scrollTo(offset.left, offset.top) 即可, 其中 left 固定用 0, top 是個 integer <br>&nbsp;&nbsp; 即 target node 的位置。 早就可以把它存起來。因為重點是 editbox 只出現在 outputbox 最下面所以不會<br>&nbsp;&nbsp; 自己去干擾這個 top 值，重要！&lt;---- 好像相反了, top 似乎是從底下往上算的。觀察某個 element.offset().top 之值<br>&nbsp;&nbsp; 的變化....果然是這樣。<br>3. 實驗時 ce@ 指在 target node (用 double click 取得) 然後：<br>&nbsp;&nbsp;&nbsp;ce@ js&gt; $(pop()).offset() ( offset ) 1000 nap js: window.scrollTo(tos().left,tos().top) 10000 nap<br>&nbsp;&nbsp;&nbsp;這是因為從 inputbox 下令&nbsp;focus 會一直回到 inputbox 來而看不到 scroll 過去的效果，必續用時間延遲來克服。&nbsp;<br><br>[ ] Outputbox log 的 &lt;div&gt; 越套越多層,如果要解決可以考慮從裡面加套一個有 id 的 &lt;div&gt; 然後只 log.push 這個 &lt;div&gt;。</p></div><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p></div></div></div></div></div></div><br>&gt; save<br> OK <br>&gt; save<br> OK <br>&gt; ce@ :&gt; offset .<br>undefined OK <br>&gt; ce@ obj&gt;keys .<br>wholeText,removeNode,replaceNode,swapNode,replaceWholeText,splitText,data,length,appendData,deleteData,insertData,replaceData,substringData,attributes,childNodes,firstChild,lastChild,localName,namespaceURI,nextSibling,nodeName,nodeType,nodeValue,ownerDocument,parentNode,prefix,previousSibling,textContent,addEventListener,dispatchEvent,removeEventListener,appendChild,cloneNode,compareDocumentPosition,hasAttributes,hasChildNodes,insertBefore,isDefaultNamespace,isEqualNode,isSameNode,isSupported,lookupNamespaceURI,lookupPrefix,normalize,removeChild,replaceChild,ATTRIBUTE_NODE,CDATA_SECTION_NODE,COMMENT_NODE,DOCUMENT_FRAGMENT_NODE,DOCUMENT_NODE,DOCUMENT_POSITION_CONTAINED_BY,DOCUMENT_POSITION_CONTAINS,DOCUMENT_POSITION_DISCONNECTED,DOCUMENT_POSITION_FOLLOWING,DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC,DOCUMENT_POSITION_PRECEDING,DOCUMENT_TYPE_NODE,ELEMENT_NODE,ENTITY_NODE,ENTITY_REFERENCE_NODE,NOTATION_NODE,PROCESSING_INSTRUCTION_NODE,TEXT_NODE OK <br>&gt; ce@ obj&gt;keys .<br>clear,align,currentStyle,runtimeStyle,accessKey,all,behaviorUrns,canHaveChildren,canHaveHTML,children,className,contentEditable,dir,disabled,document,filters,hideFocus,id,innerHTML,innerText,isContentEditable,isDisabled,isMultiLine,isTextEdit,lang,language,offsetHeight,offsetLeft,offsetParent,offsetTop,offsetWidth,onabort,onactivate,onafterupdate,onbeforeactivate,onbeforecopy,onbeforecut,onbeforedeactivate,onbeforeeditfocus,onbeforepaste,onbeforeupdate,onblur,oncanplay,oncanplaythrough,oncellchange,onchange,onclick,oncontextmenu,oncontrolselect,oncopy,oncut,ondataavailable,ondatasetchanged,ondatasetcomplete,ondblclick,ondeactivate,ondrag,ondragend,ondragenter,ondragleave,ondragover,ondragstart,ondrop,ondurationchange,onemptied,onended,onerror,onerrorupdate,onfilterchange,onfocus,onfocusin,onfocusout,onhelp,oninput,onkeydown,onkeypress,onkeyup,onlayoutcomplete,onload,onloadeddata,onloadedmetadata,onloadstart,onlosecapture,onmousedown,onmouseenter,onmouseleave,onmousemove,onmouseout,onmouseover,onmouseup,onmousewheel,onmove,onmoveend,onmovestart,onpaste,onpause,onplay,onplaying,onprogress,onpropertychange,onratechange,onreadystatechange,onreset,onresize,onresizeend,onresizestart,onrowenter,onrowexit,onrowsdelete,onrowsinserted,onscroll,onseeked,onseeking,onselect,onselectstart,onstalled,onsubmit,onsuspend,ontimeupdate,onvolumechange,onwaiting,outerHTML,outerText,parentElement,parentTextEdit,readyState,recordNumber,scopeName,sourceIndex,style,tabIndex,tagUrn,title,uniqueID,uniqueNumber,componentFromPoint,doScroll,addBehavior,addFilter,applyElement,blur,clearAttributes,click,contains,createControlRange,dragDrop,focus,getAdjacentText,getElementsByClassName,insertAdjacentElement,insertAdjacentHTML,insertAdjacentText,mergeAttributes,releaseCapture,removeBehavior,removeFilter,replaceAdjacentText,scrollIntoView,setActive,setCapture,attachEvent,detachEvent,removeNode,replaceNode,swapNode,clientHeight,clientLeft,clientTop,clientWidth,scrollHeight,scrollLeft,scrollTop,scrollWidth,tagName,childElementCount,firstElementChild,lastElementChild,nextElementSibling,previousElementSibling,fireEvent,getAttribute,getAttributeNS,getAttributeNode,getAttributeNodeNS,getBoundingClientRect,getClientRects,getElementsByTagName,getElementsByTagNameNS,hasAttribute,hasAttributeNS,msMatchesSelector,removeAttribute,removeAttributeNS,removeAttributeNode,setAttribute,setAttributeNS,setAttributeNode,setAttributeNodeNS,querySelector,querySelectorAll,attributes,childNodes,firstChild,lastChild,localName,namespaceURI,nextSibling,nodeName,nodeType,nodeValue,ownerDocument,parentNode,prefix,previousSibling,textContent,addEventListener,dispatchEvent,removeEventListener,appendChild,cloneNode,compareDocumentPosition,hasAttributes,hasChildNodes,insertBefore,isDefaultNamespace,isEqualNode,isSameNode,isSupported,lookupNamespaceURI,lookupPrefix,normalize,removeChild,replaceChild,ATTRIBUTE_NODE,CDATA_SECTION_NODE,COMMENT_NODE,DOCUMENT_FRAGMENT_NODE,DOCUMENT_NODE,DOCUMENT_POSITION_CONTAINED_BY,DOCUMENT_POSITION_CONTAINS,DOCUMENT_POSITION_DISCONNECTED,DOCUMENT_POSITION_FOLLOWING,DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC,DOCUMENT_POSITION_PRECEDING,DOCUMENT_TYPE_NODE,ELEMENT_NODE,ENTITY_NODE,ENTITY_REFERENCE_NODE,NOTATION_NODE,PROCESSING_INSTRUCTION_NODE,TEXT_NODE OK <br>&gt; ce@ js&gt; $(pop()).offset() .<br>[object Object] OK <br>&gt; ce@ js&gt; $(pop())[0] .<br>[object HTMLHeadingElement] OK <br>&gt; ce@ js&gt; $(pop()).offset() ( offset )<br> OK <br>&gt; js: window.scrollTo(tos().left,tos().top)<br> OK <br>&gt; js: window.scrollTo(tos().left,tos().top) 50000 nap<br> OK  OK <br>&gt; <strong>1000 nap js: window. 觀察這個 element.offset().top 的變化 scrollTo(tos().</strong>left,tos().top)<br><br>&gt; 1000 nap js: window.scrollTo(tos().left,tos().top)<br> OK <br><br>&gt; save<br> OK <br>&gt; ce@ js&gt; $(pop()).offset().top .<br>7647<br>&gt; ce@ js&gt; $(pop()).offset().top .<br>6469 OK <br>&gt; save<br>"]