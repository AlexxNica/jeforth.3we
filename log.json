["<div><div><br><div><div><div><div>[x] 需要&nbsp;push outputbox 進 log.json [&lt;div&gt;,&lt;div&gt;,&lt;div&gt;...] 的機制. log.push, log.pop, log 看全部。取代現有的 log.txt。<div>&nbsp;&nbsp;&nbsp; 已經完成!&nbsp;---&gt; editor.f<br>[x] 用得很多 js&gt; outputbox 何不把它變成一個 forth word? 因為本來有 outputbox 不必再浪費。<br>[x] 目前 edit open 是把文章放到 inputbox 下面，試改成放到 output box 上面。<blockquote><pre><code class=\"source\">: open ( \"path-name\" -- ) \\ Read the file to edit\n  article if article :: innerHTML=\"\" ( 有的話清除現有頁面 ) else \n  &lt;o&gt; &lt;div style=\"background-color:white\"&gt;&lt;/div&gt;&lt;/o&gt; to article ( 沒現成就新建頁面 )\n  article js&gt; outputbox insertBefore ( 放在 outputbox 之前 )\n  then pathname readTextFile article :: innerHTML=pop() ;</code></pre></blockquote>[ ] 把 ctrl-F2 改成直接 edit 所在處的 node. 本來只是取得所在處的 node 進 ce@.&nbsp;<br>[ ] 先插入一個&nbsp;anchor node 到所在處之 node 的前面 &lt;a id=editee&gt;&lt;/a&gt;. 用來從 outputbox 中的 editor 跳回來。<br>[ ] editor 要多一個 button [jump] 並且在 [save]、[close] 之後都自動跳回來。<br>[x] editbox 也要有 id=editboxtextarea。<br>[x] 進 editbox 順便要&nbsp;disable outputbox 的 contentEditable 否則會干擾 editbox 的使用。<br>[ ] Open/Save 之後，即有東西在 editing 時，在 inputbox 下面列出該檔案的 pathname 以資提示。<br>[ ] env@ 只有 3hta 能用, 致使 editor.f 在 3nw 暫時還不能用。其實 3nw 也可以 access environment variables.</div></div><div>[ ] 這行會觸動 ce@ 的防錯機制, ce@ 該擴充了。</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; article :&gt; currentStyle ce!<br>[ ]&nbsp;這個好用! article :&gt; style :: backgroundColor=\"white\". <br>&nbsp;&nbsp;&nbsp;&nbsp;[ ]&nbsp;&nbsp; Canvas.f 裡面我為了改 style 所用的方法很笨。<br>&nbsp;&nbsp;&nbsp; [ ]&nbsp;&nbsp; index.html, jeforth.htm,&nbsp;jeforth.3nw.html 好像都很笨。</div></div></div></div><p>[x] 先實驗 #text <strong>能</strong>不能用 editbox 編輯？outputbox 裡都是：<br>&nbsp;&nbsp;&nbsp; [x] so far, editbox does not correctly handle #text. The 'node-source' command is not mature enough.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; --&gt; 直接測試 node-source when ce@ is a #text --&gt; bug found!<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; --&gt; ce@ node-source \\ ==&gt; 0: [object Text] (object) &lt;-- 果然不如預期，有 bug。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;<em>: node-source ( node -- \"source\" ) \\ Get outerHTML or node.toString()<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;dup :&gt; outerHTML ?dup if ( node outerHTML ) nip <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;else ( node ) dup :&gt; toString() char /* swap + js&gt; \"*/\\n\" + <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;<strong>swap ( /*...*/ node )</strong> :&gt; nodeValue ?dup if + then then ;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; --&gt; Ok now.<br></em><br>[x] editbox-save 把所有東西都當 outerHTML 回存也不對, 至少就沒有照顧到 #text 假設可以。&nbsp;<br>&nbsp;&nbsp;&nbsp; : &nbsp;editbox-save ( -- ) \\ ce@ is the target element.<br>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;js&gt; editboxtextarea.value /*remove*/ &lt;code&gt;escape&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;<strong>ce@ dup :&gt; nodeValue if :: nodeValue=pop() else :: outerHTML=pop() then</strong> ;<br>&nbsp;&nbsp;&nbsp; --&gt; Yes, this way works. But we then can't change a #text to an element and vise versa. <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Because we are 沿用本來的 node or element.<br>&nbsp;&nbsp;&nbsp; --&gt; 所以要改成用替換的方式才行。</p></div><br><br></div><br>&gt; log.save<br> OK <br>&gt; log.save<br> OK <br>&gt; open<br> OK <br>&gt; save<br> OK <br>&gt; &lt;o&gt; &lt;strike&gt;abc&lt;/strike&gt;&lt;/o&gt;<br><strike>abc</strike> OK [object Text] 改變一個 node 的方法除了上例——(A)法，先在旁邊做好這個 node 再 replaceNode 過去——也可以用(B)法，直接去改變 target node 的 o...<br><br>&gt; edit<br> OK <br>Output box EditMode = false<br>[object Text] &nbsp;改變一個 node 的方法除了上例——(A)法，先在旁邊做好這個 node 再 replaceNode 過去——也可以用(B)法，直接去改變 target node 的 ...<br><br>&gt; edit<br> OK <br>&gt; log.length .<br>1 OK <br>Output box EditMode = true<br><br>&gt; js&gt; outputbox.contentEditable .<br>true OK <br>&gt; log.save<br>"]