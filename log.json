["<div style=\"border: thin solid black;\"><span>[x]&nbsp;這台電腦入睡之後會被無故喚醒，用 jeforth.3hta 來簡單解決。</span><br><span>&nbsp;&nbsp;&nbsp;&nbsp;馬上去睡, 萬一被無故喚醒之後 count down 30 秒後繼續睡，讓 user 有機會下 stop 停止。\n</span><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><blockquote><table class=\"commandline\"><tbody><tr><td><pre><code class=\"source\">[begin]<br>run shutdown /h<br>&lt;o&gt; &lt;h1&gt;Bringing the system into hibernate&lt;/h1&gt;&lt;/o&gt; drop cr<br>&lt;o&gt; &lt;h3&gt;3 wait 10 seconds .... \"stop\" me?&lt;/h3&gt;&lt;/o&gt; drop cr 10000 nap<br>&lt;o&gt; &lt;h3&gt;2 wait 10 seconds .... \"stop\" me?&lt;/h3&gt;&lt;/o&gt; drop cr 10000 nap<br>&lt;o&gt; &lt;h3&gt;1 wait 10 seconds .... \"stop\" me?&lt;/h3&gt;&lt;/o&gt; drop cr 10000 nap<br>[again]</code></pre></td></tr></tbody></table></blockquote>\n[x] 需要&nbsp;push outputbox 進 log.json [&lt;div&gt;,&lt;div&gt;,&lt;div&gt;...] 的機制. <br>&nbsp;&nbsp;&nbsp; log.push, log.pop, log 看全部。取代現有的 log.txt。<div>&nbsp;&nbsp;&nbsp; 已經完成!&nbsp;---&gt; editor.f<br>[x] 用得很多 js&gt; outputbox 何不把它變成一個 forth word? 因為本來有 outputbox 不必再浪費。<br>&nbsp;&nbsp;&nbsp; [ ] 既然如此 eleBody eleHead eleDisplay(shit! it IS outputbox) 都應該取消。一個<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 東西有兩個參考果然連自己都忘了，用最根本的就好了。<br>[x] 目前 edit open 是把文章放到 inputbox 下面，試改成放到 output box 上面。<br><div><table class=\"commandline\" style=\"margin-left: 2em;\"><tbody><tr><td><pre><code class=\"source\">&lt;font size=\"2\"&gt;: open ( \"path-name\" -- ) \\ Read the file to edit\n  article if article :: innerHTML=\"\" ( 有的話清除現有頁面 ) else \n  &lt;o&gt; &lt;div style=\"background-color:white\"&gt;&lt;/div&gt;&lt;/o&gt; to article ( 沒現成就新建頁面 )\n  article js&gt; outputbox insertBefore ( 放在 outputbox 之前 )\n  then pathname readTextFile article :: innerHTML=pop() ;&lt;/font&gt;</code></pre></td></tr></tbody></table><br>[x] editbox 也要有 id=editboxtextarea。<br>[x] 先實驗 #text <strong>能</strong>不能用 editbox 編輯？outputbox 裡都是：<br>&nbsp;&nbsp;&nbsp; [x] so far, editbox does not correctly handle #text. <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; The 'node-source' command is not mature enough.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; --&gt; 直接測試 node-source when ce@ is a #text --&gt; bug found!<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; --&gt; ce@ node-source \\ ==&gt; 0: [object Text] (object) &lt;-- 果然不如預期，有 bug。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</div></div></div></div></div></div><div><blockquote><table class=\"commandline\"><tbody><tr><td><pre><code class=\"source\">&lt;em&gt;: node-source ( node -- \"source\" ) \\ Get outerHTML or node.toString()<br>&nbsp;&nbsp;&nbsp; dup :&gt; outerHTML ?dup if ( node outerHTML ) nip <br>&nbsp;&nbsp;&nbsp; else ( node ) dup :&gt; toString() char \\n\" + <br>&nbsp;&nbsp;&nbsp; &lt;strong&gt;swap (&nbsp; node )&lt;/strong&gt; :&gt; nodeValue ?dup if + then then ;&lt;/em&gt;</code></pre></td></tr></tbody></table>\n&nbsp;&nbsp;&nbsp; --&gt; Ok now.</blockquote></div><p>[x] editbox-save 把所有東西都當 outerHTML 回存也不對, 至少就沒有照顧到 #text 假設可以。&nbsp;<br>&nbsp;&nbsp;&nbsp; : &nbsp;editbox-save ( -- ) \\ ce@ is the target element.<br>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;js&gt; editboxtextarea.value  &lt;code&gt;escape&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;<strong>ce@ dup :&gt; nodeValue if :: nodeValue=pop() else :: outerHTML=pop() then</strong> ;<br>&nbsp;&nbsp;&nbsp; --&gt; Yes, this way works. But we then can't change a #text to an <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; element neither&nbsp;vise versa. Because we are 沿用本來的 node or element.<br>&nbsp;&nbsp;&nbsp; --&gt; 所以要改成用替換的方式才行。</p></div></div></div><p>[x]&nbsp;save 應自動包括 log.save <br>[x] html5.f 裡的 replaceNode 用來把 #text 改成 &lt;p&gt; 有問題。<br>&nbsp;&nbsp;&nbsp; #text 本身就有 .replaceNode(newElement) 可用。<br>&nbsp;&nbsp;&nbsp; [x] 查一般 &lt;p&gt; &lt;table&gt; 等是否<strong>都有 .replaceNode()</strong> <strong>是</strong>的話 html5.f 要修正。<br>&nbsp;&nbsp;&nbsp; [x] html5.f 本來的 replaceNode 寫法用 replaceChild 有它的道理。一律都用 replaceNode 之後<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 只有 #text 正常，其他原來的 element 被 replaceNode 之後都跑到 newElement<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 所在之處的 outputbox 最下面來了。兩個方法要合併起來才對。當 target 有 outerHTML<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 時用原來的方法，沒有才直接用 replaceNode。<br>&nbsp;&nbsp;&nbsp; [x] 依上法恐怕 #text replace 成 element 還是會跑到 outputbox 最下面。哈! 不會, 成功了！<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 想必是因為 replaceNode 沒有把其他相關因素都 replace 過去。replaceNode 的資料有提到這點。<br>[x] 把 ctrl-F2 改成直接 edit 所在處的 node. 本來只是取得所在處的 node 進 ce@.&nbsp;<br>[x] 目前 editbox-save 會自動加 &lt;div&gt;...&lt;/div&gt; 為了保證所有的 editbox 內容都 replaceNode<br>&nbsp;&nbsp;&nbsp;&nbsp;原來的 node, but then there will be many redundent &lt;div&gt; ! So, don't do that.<br>&nbsp;&nbsp;&nbsp; It's user's responsibility to add their own &lt;div&gt;。<br>[x] Add border to outputbox when in contentEditable mode.<br>&nbsp;&nbsp;&nbsp; js&gt; outputbox :&gt; style &lt;js&gt; pop().border=\"thin solid red\"&lt;/js&gt;<br>&nbsp;&nbsp;&nbsp; js&gt; outputbox :&gt; style &lt;js&gt; pop().border=\"thin solid white\"&lt;/js&gt;<br>[x] Source code box 很難搞，應該是做出一個空的，讓 user 自己任意 copy-paste 東西進去。<br>&nbsp;&nbsp;&nbsp; ==&gt; 加強 [Example] 裡面多放點例子。<br>[x] 以下這個方法，後來發現不好。應該直接從 outputbox 往下 top-down 下來全部打框即可。<br>&nbsp;&nbsp;&nbsp; 【看清楚 outputbox 以下第一層 element 的範圍以免刪除時發生意外。】<br>&nbsp;&nbsp;&nbsp; 讓 double-click track back 到 outputbox 然後倒回來加上紅框，。<br>&nbsp;&nbsp;&nbsp; 手動做做看：</p></div></div></div></div></div><div> </div><div><table class=\"commandline\" style=\"margin-left: 2em;\"><tbody><tr><td><pre><br>js: body.ondblclick=function(){push(window.getSelection().anchorNode)}</pre></td></tr></tbody></table></div><p>&nbsp;&nbsp; 這樣一行就成功了!而且直接 push()——不必用 kvm.push()。<br>&nbsp;&nbsp;&nbsp;#text 沒有 style 考慮把整段文字都用&nbsp;&lt;span style=\"border:thin solid red&gt; <br>&nbsp;&nbsp; 加框即可。有 style 的就用 border 本來有 border 的改過去不管它，因為是在 outputbox <br>&nbsp;&nbsp; 裡面無所謂。Released version should check if the forth handler&nbsp;existance<br>&nbsp;&nbsp; before&nbsp;hooking the event handler. So this is done after the definition of<br>&nbsp;&nbsp; the forth word.</p><div><table class=\"commandline\" style=\"margin-left: 2em;\"><tbody><tr><td><pre>&nbsp;\\ 被 outputbox-high-light-toggle 取代了。這個 word 很有趣, double click 一個地方就會<br>&nbsp;\\ 在 outputbox 之下把所屬的整個 element 用紅框圈起來。避免 {backSpace} 殺錯一整塊。<br>&nbsp;\\ : mark-block ( node -- ) \\ Add red border to the double clicked block under outputbox<br>&nbsp;\\ &nbsp;begin ( node' )<br>&nbsp;\\ &nbsp;&nbsp;dup :&gt; parentNode dup ( node' parent parent ) <br>&nbsp;\\ &nbsp;&nbsp;js&gt; outputbox &lt;&gt; ( node' parent ? ) <br>&nbsp;\\ &nbsp;while ( node' parent ) \\ 不是 outputbox 還要再上升<br>&nbsp;\\ &nbsp;&nbsp;nip ( parent )<br>&nbsp;\\ &nbsp;( parent ) repeat ( node' parent )<br>&nbsp;\\ &nbsp;drop ( node )<br>&nbsp;\\ &nbsp;js&gt; tos().style if ( node )<br>&nbsp;\\ &nbsp;&nbsp;&lt;js&gt; <br>&nbsp;\\ &nbsp;&nbsp;if (tos().style.border==\"thin solid red\") pop().style.border=\"\";<br>&nbsp;\\ &nbsp;&nbsp;else pop().style.border=\"thin solid red\";<br>&nbsp;\\ &nbsp;&nbsp;&lt;/js&gt;<br>&nbsp;\\ &nbsp;else ( node ) \\ 沒有 style 的打賭是 #text <br>&nbsp;\\ &nbsp;&nbsp;s' &lt;span style=\"border:thin solid red\"&gt;' <br>&nbsp;\\ &nbsp;&nbsp;js&gt; tos(1).nodeValue +<br>&nbsp;\\ &nbsp;&nbsp;s' &lt;/span&gt;' + &lt;/o&gt; swap ( span node ) replaceNode<br>&nbsp;\\ &nbsp;then ;</pre></td></tr></tbody></table></div><p>&nbsp;&nbsp;&nbsp; <span style=\"font: 0.8em/normal courier; font-size-adjust: none; font-stretch: normal;\">js: body.ondblclick=function(){push(window.getSelection().anchorNode);execute(\"mark-block\")} &lt;--- Bingo!!!</span><br>&nbsp;&nbsp;&nbsp; [x]&nbsp;這下麻煩了, 加了一堆紅框, 怎麼去除?&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;==&gt; 當初打紅框上去時可以把原來的 .style.border 存在 ce@ 自己身上。</p><div><table class=\"commandline\" style=\"margin-left: 2em;\"><tbody><tr><td><pre><code class=\"source\">&lt;font size=\"2\"&gt;&lt;/font&gt;</code>( node ) &lt;js&gt; <br>tos().old_border = tos().style.border;<br>tos().style.border=\"thin solid red\";<br>&lt;/js&gt;&nbsp;</pre></td></tr></tbody></table></div><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ==&gt; Trace back to outputbox ... 方法有趣，但是不好。同樣目的應該 top-down 打框。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 清不掉的紅框，用 jquery 來清一次就算了。</p><div><table class=\"commandline\" style=\"margin-left: 2em;\"><tbody><tr><td><pre>js&gt; $(\"*\").toArray()&nbsp;constant a \\ 取得整個網頁的東西<br>true value debug \\ debug 開關<br>&lt;text&gt;<br>a :&gt; length 1- for \\ 不要忘記 1- !!!!<br>&nbsp; r@ <br>&nbsp; debug if *debug* 111&gt;&gt;&gt; then<br>&nbsp; a :&gt; [pop()] :&gt; style if<br>&nbsp;&nbsp;&nbsp; debug if *debug* 222&gt;&gt;&gt; then<br>&nbsp;&nbsp;&nbsp; r@ a :&gt; [pop()] &lt;js&gt; pop().style.border==\"thin solid red\"&lt;/jsV&gt; if<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; debug if *debug* 333&gt;&gt;&gt; then<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; r@ a :&gt; [pop()] :&gt; style.border=\"\"<br>&nbsp;&nbsp;&nbsp; then<br>&nbsp; then<br>next<br>&lt;/text&gt; (run:)</pre></td></tr></tbody></table></div><p>&nbsp; &nbsp;[x] 【看清楚 outputbox 以下第一層 element 的範圍以免刪除時發生意外。】改用 top-down 方式。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; outputbox-high-light-toggle ok now.</p><p>[x] Autoit has {SLEE} key! Try it.<br>&nbsp;&nbsp;&nbsp; [x] Autoit has Sleep(mS) actually, it&nbsp;pauses Autoit script for mS of time, not<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bringing the system into sleep mode.&nbsp; </p><div><table class=\"commandline\" style=\"margin-left: 2em;\"><tbody><tr><td><pre>&gt; include autoit.f<br>&gt; au3 :: Sleep(500) \\ ==&gt; No work!<br>&gt; au3 :: Sleepp(500)<br>JavaScript error : Object doesn't support property or method 'Sleepp'<br>&gt; au3 :: Sleep(5000) \\ ==&gt; No work!</pre></td></tr></tbody></table></div><p>&nbsp;&nbsp;&nbsp;[x] au3 :: send('{!}') \\ ==&gt; really sended a '1' right to the inputbox.<br>&nbsp;&nbsp;&nbsp;[!] au3 :: send('{SLEEP}') \\ ==&gt;&nbsp;No work at all<br>&nbsp;&nbsp;&nbsp;[!] au3 :: send('{SLEEP}',1000) \\ ==&gt; sended '{SLEEP}' to inputbox after 1 sec! 開玩笑嗎?<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 以上用&nbsp;autoit 自己的 SciTE-lite 實驗也是同樣的結果。<br>&nbsp;&nbsp;&nbsp;[x] au3 :: send('{VOLUME_MUTE}') \\ ==&gt;&nbsp;It works! Toggled as anticipated.<br>&nbsp;&nbsp; [x] au3 :: Shutdown(32) it works! 32 is standby.<br>&nbsp;&nbsp; [x] improve hibernation.f , done. It standby now instead of hibernation.<br><br>[x] 進 editbox 順便要&nbsp;disable outputbox 的 contentEditable 否則會干擾 editbox 的使用。<br>&nbsp;&nbsp;&nbsp; --&gt; 現在發現進 editbox 時 outputbox 不一定要 contentEditable&nbsp;了 click 也可以(上面有提到)<br>&nbsp;&nbsp;&nbsp; --&gt; Double click == Ctrl-F2<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>[/] 這行會觸動 ce@ 的防錯機制, ce@ 該擴充了。<br>&nbsp;&nbsp;&nbsp; article :&gt; currentStyle ce! ---&gt; 算了。<br>[x] 先插入一個&nbsp;anchor node 到所在處之 node 的前面 &lt;a id=editee&gt;&lt;/a&gt;. <br>&nbsp;&nbsp;&nbsp; 用來從 outputbox 中的 editor 跳回來。#text 有 insertBefore 嗎?怪就怪在它有，但是不能<br>&nbsp;&nbsp;&nbsp; 用，必須鑽到&nbsp;parent 下 insertBefore(newNode,me) 才行。答案是——可以。後來用 scrollTo() 不用 &lt;a&gt; 了。<br>[x] 不如直接把 editbox 就放到 target 下面 &lt;=== 餿主意,這樣會干擾原文,平添問題。還是放到 outputbox 最下面。<br>&nbsp;&nbsp;&nbsp;&nbsp;用 scrollTo() 來回 jump 只好如此。<br>\n\n[x] editbox&nbsp;以及 Ctrl-F2/Double-click 要多一個 button [jump] 並且在 [save]、[close] 之後都自動跳回來。<br>&nbsp;&nbsp;&nbsp; [x] evernote 上剛才蒐集到一些 How to jump or scroll on a HTML page. .... see my Evernote.<br>&nbsp;&nbsp;&nbsp; 1. 取得 target node&nbsp;的 offset.top,&nbsp;#text 也有 offset. 其實就是 top 跟 left 之 integer 值。<br>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; ce@ js&gt; $(pop()).offset() ( objOffset={top:int,left:int} )&nbsp;<br>&nbsp;&nbsp;&nbsp; 2. 用 window.scrollTo(offset.left, offset.top) 即可, 其中 left 固定用 0, top 是個 integer <br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; 即 target node 的位置。 早就可以把它存起來。因為重點是 editbox 只出現在 outputbox 最下面所以不會<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; 自己去干擾這個 top 值，重要！&lt;---- 好像相反了, <strong>top</strong> 似乎<strong>是從底下往上算的</strong>。觀察某個 element.offset().top 之值<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; 的變化....<strong>果然是這樣</strong>。&nbsp;--&gt; 研究 jQuery&nbsp;除了 offset() 有沒有別的 option?&nbsp;因為是 window.scrollTo() 的 arg<br>&nbsp;&nbsp; 　　 所以沒轍。事先存好（絕對）位置不可行，只好在要 scrollTo 時臨時算出來，也就是事先存好該 node 的 object。<br>&nbsp;&nbsp;&nbsp; 3. 實驗時 ce@ 指在 target node (用 double click 取得) 然後：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;ce@ js&gt; $(pop()).offset() ( offset ) 1000 nap js: window.scrollTo(tos().left,tos().top) 10000 nap<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;這是因為從 inputbox 下令&nbsp;focus 會一直回到 inputbox 來而看不到 scroll 過去的效果，必續用時間延遲來克服。&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;[x] 從 target 跳回 editbox 可以用 id editboxeditarea 或 div-editbox 做到。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &gt; 5000 nap js&gt; $(editboxtextarea).offset().top js: window.scrollTo(0,pop())<br>&nbsp;&nbsp;&nbsp; [x] 當然跳回 target 就是:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &gt; 5000 nap ce@ js&gt; $(pop()).offset().top js: window.scrollTo(0,pop())<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 但是跳不回 #text 只有&nbsp;element 可以。<br>&nbsp;&nbsp;&nbsp; [x] jump-to-ce@ defined in element.f 暫用 &lt;span&gt; 改裝 #text 終於成功了, <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; editbox-save and -close are jumping back to ce@ now.<br>[ ] Outputbox log 的 &lt;div&gt; 越套越多層,如果要解決可以考慮從裡面加套一個有 id 的 &lt;div&gt; 然後只 log.push 這個 &lt;div&gt;。<br>[ ] Open/Save 之後，即有東西在 editing 時，在 inputbox 下面列出該檔案的 pathname 以資提示。<br>[ ] env@ 只有 3hta 能用, 致使 editor.f 在 3nw 暫時還不能用。<br>&nbsp;&nbsp;&nbsp; 其實 3nw 也可以 access environment variables.[ ]&nbsp;這個好用! <strong>article :&gt; style :: backgroundColor=\"white\"</strong>&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;[ ]&nbsp;Canvas.f 裡面我為了改 style 所用的方法很笨。<br>&nbsp;&nbsp;&nbsp; [ ]&nbsp;index.html, jeforth.htm,&nbsp;jeforth.3nw.html 好像都很笨。<br>&nbsp;&nbsp;&nbsp; [ ] &lt;div style=\"margin-left: 2em;\"&gt;OK&lt;/div&gt; \\ em 是當時 font-size 的倍數，可正負&amp;小數。</p><div><table class=\"commandline\" style=\"margin-left: 2em;\"><tbody><tr><td><pre><code class=\"source\">&gt; ce@ :&gt; style :&gt; fontSize . \\ ==&gt; 10px OK<br>&gt; ce@ :&gt; style :&gt; getPropertyValue(\"font-size\") . \\ ==&gt; 10px OK <br>&gt; ce@ :&gt; style :&gt; fontSize=\"\"<br>&gt; ce@ :&gt; style :&gt; getPropertyValue(\"font-size\") . \\ ==&gt; \"\"</code></pre></td></tr></tbody></table></div></div><div><div>&nbsp;</div><div>[x] editbox 還有問題。整個結果必須是 one new node replace the old node. 事實上連我都會忘記, 而弄成 multiple node</div><div>&nbsp;&nbsp;&nbsp; 要去 replace the old node. 結果只有 last new node replace 過去, 其他的都掉到 outputbox 最底下。解法是：</div><div>&nbsp;&nbsp;&nbsp; ---&gt; make an enveloped group of nodes &lt;o&gt; &lt;span&gt; aa &lt;b&gt;bb&lt;/b&gt; &lt;i&gt;cc&lt;/i&gt; dd&lt;/span&gt;&lt;/o&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; The outer &lt;span&gt; is intentionally added by editbox. Can't be &lt;div&gt;, it breaks an unexpected&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new line in browser.<br><table class=\"commandline\" style=\"margin-left: 2em;\">\n    <tbody><tr><td><pre><code class=\"source\"><div>: unenvelope ( element -- ) \\ Break&nbsp;an enveloping element into its children nodes</div><div><div>&nbsp;&nbsp;&nbsp; (&nbsp;ele ) js&gt; tos().childNodes.length for </div><div>&nbsp;&nbsp;&nbsp; ( ele ) js&gt; tos().firstChild over ( ele first ele ) insertBefore ( ele )</div><div>&nbsp;&nbsp;&nbsp; next removeElement ;</div></div></code><div>---</div></pre></td></tr></tbody></table></div><div>&nbsp;&nbsp;&nbsp;先包成 &lt;span&gt;editboxtextarea&lt;/span&gt; 完成 one new node replace the old node 然後把 new node unenvelope 即可。<br>&nbsp;&nbsp; 修改 editor.f ... 成功了!!!!</div><div>--</div><div>--</div><div>--</div><div>--</div><div>--</div><div>--</div><div>--</div><div>--</div><div>--</div><div>--</div><div>--</div><div>--</div><div>--</div><div>--</div><div>--</div><div>--</div><div>--</div><div>--</div><div>--</div><div>--</div><div>--</div><div>--</div><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p></div></div></div></div></div><br><br>&gt; save<br>","<div style=\"border: thin solid black;\"><span>[x]&nbsp;這台電腦入睡之後會被無故喚醒，用 jeforth.3hta 來簡單解決。</span><br><span>&nbsp;&nbsp;&nbsp;&nbsp;馬上去睡, 萬一被無故喚醒之後 count down 30 秒後繼續睡，讓 user 有機會下 stop 停止。\n</span><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><blockquote><table class=\"commandline\"><tbody><tr><td><pre><code class=\"source\">[begin]<br>run shutdown /h<br>&lt;o&gt; &lt;h1&gt;Bringing the system into hibernate&lt;/h1&gt;&lt;/o&gt; drop cr<br>&lt;o&gt; &lt;h3&gt;3 wait 10 seconds .... \"stop\" me?&lt;/h3&gt;&lt;/o&gt; drop cr 10000 nap<br>&lt;o&gt; &lt;h3&gt;2 wait 10 seconds .... \"stop\" me?&lt;/h3&gt;&lt;/o&gt; drop cr 10000 nap<br>&lt;o&gt; &lt;h3&gt;1 wait 10 seconds .... \"stop\" me?&lt;/h3&gt;&lt;/o&gt; drop cr 10000 nap<br>[again]</code></pre></td></tr></tbody></table></blockquote>\n[x] 需要&nbsp;push outputbox 進 log.json [&lt;div&gt;,&lt;div&gt;,&lt;div&gt;...] 的機制. <br>&nbsp;&nbsp;&nbsp; log.push, log.pop, log 看全部。取代現有的 log.txt。<div>&nbsp;&nbsp;&nbsp; 已經完成!&nbsp;---&gt; editor.f<br>[x] 用得很多 js&gt; outputbox 何不把它變成一個 forth word? 因為本來有 outputbox 不必再浪費。<br>&nbsp;&nbsp;&nbsp; [ ] 既然如此 eleBody eleHead eleDisplay(shit! it IS outputbox) 都應該取消。一個<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 東西有兩個參考果然連自己都忘了，用最根本的就好了。<br>[x] 目前 edit open 是把文章放到 inputbox 下面，試改成放到 output box 上面。<br><div><table class=\"commandline\" style=\"margin-left: 2em;\"><tbody><tr><td><pre><code class=\"source\">&lt;font size=\"2\"&gt;: open ( \"path-name\" -- ) \\ Read the file to edit\n  article if article :: innerHTML=\"\" ( 有的話清除現有頁面 ) else \n  &lt;o&gt; &lt;div style=\"background-color:white\"&gt;&lt;/div&gt;&lt;/o&gt; to article ( 沒現成就新建頁面 )\n  article js&gt; outputbox insertBefore ( 放在 outputbox 之前 )\n  then pathname readTextFile article :: innerHTML=pop() ;&lt;/font&gt;</code></pre></td></tr></tbody></table><br>[x] editbox 也要有 id=editboxtextarea。<br>[x] 先實驗 #text <strong>能</strong>不能用 editbox 編輯？outputbox 裡都是：<br>&nbsp;&nbsp;&nbsp; [x] so far, editbox does not correctly handle #text. <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; The 'node-source' command is not mature enough.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; --&gt; 直接測試 node-source when ce@ is a #text --&gt; bug found!<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; --&gt; ce@ node-source \\ ==&gt; 0: [object Text] (object) &lt;-- 果然不如預期，有 bug。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</div></div></div></div></div></div><div><blockquote><table class=\"commandline\"><tbody><tr><td><pre><code class=\"source\">&lt;em&gt;: node-source ( node -- \"source\" ) \\ Get outerHTML or node.toString()<br>&nbsp;&nbsp;&nbsp; dup :&gt; outerHTML ?dup if ( node outerHTML ) nip <br>&nbsp;&nbsp;&nbsp; else ( node ) dup :&gt; toString() char \\n\" + <br>&nbsp;&nbsp;&nbsp; &lt;strong&gt;swap (&nbsp; node )&lt;/strong&gt; :&gt; nodeValue ?dup if + then then ;&lt;/em&gt;</code></pre></td></tr></tbody></table>\n&nbsp;&nbsp;&nbsp; --&gt; Ok now.</blockquote></div><p>[x] editbox-save 把所有東西都當 outerHTML 回存也不對, 至少就沒有照顧到 #text 假設可以。&nbsp;<br>&nbsp;&nbsp;&nbsp; : &nbsp;editbox-save ( -- ) \\ ce@ is the target element.<br>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;js&gt; editboxtextarea.value  &lt;code&gt;escape&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;<strong>ce@ dup :&gt; nodeValue if :: nodeValue=pop() else :: outerHTML=pop() then</strong> ;<br>&nbsp;&nbsp;&nbsp; --&gt; Yes, this way works. But we then can't change a #text to an <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; element neither&nbsp;vise versa. Because we are 沿用本來的 node or element.<br>&nbsp;&nbsp;&nbsp; --&gt; 所以要改成用替換的方式才行。</p></div></div></div><p>[x]&nbsp;save 應自動包括 log.save <br>[x] html5.f 裡的 replaceNode 用來把 #text 改成 &lt;p&gt; 有問題。<br>&nbsp;&nbsp;&nbsp; #text 本身就有 .replaceNode(newElement) 可用。<br>&nbsp;&nbsp;&nbsp; [x] 查一般 &lt;p&gt; &lt;table&gt; 等是否<strong>都有 .replaceNode()</strong> <strong>是</strong>的話 html5.f 要修正。<br>&nbsp;&nbsp;&nbsp; [x] html5.f 本來的 replaceNode 寫法用 replaceChild 有它的道理。一律都用 replaceNode 之後<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 只有 #text 正常，其他原來的 element 被 replaceNode 之後都跑到 newElement<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 所在之處的 outputbox 最下面來了。兩個方法要合併起來才對。當 target 有 outerHTML<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 時用原來的方法，沒有才直接用 replaceNode。<br>&nbsp;&nbsp;&nbsp; [x] 依上法恐怕 #text replace 成 element 還是會跑到 outputbox 最下面。哈! 不會, 成功了！<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 想必是因為 replaceNode 沒有把其他相關因素都 replace 過去。replaceNode 的資料有提到這點。<br>[x] 把 ctrl-F2 改成直接 edit 所在處的 node. 本來只是取得所在處的 node 進 ce@.&nbsp;<br>[x] 目前 editbox-save 會自動加 &lt;div&gt;...&lt;/div&gt; 為了保證所有的 editbox 內容都 replaceNode<br>&nbsp;&nbsp;&nbsp;&nbsp;原來的 node, but then there will be many redundent &lt;div&gt; ! So, don't do that.<br>&nbsp;&nbsp;&nbsp; It's user's responsibility to add their own &lt;div&gt;。<br>[x] Add border to outputbox when in contentEditable mode.<br>&nbsp;&nbsp;&nbsp; js&gt; outputbox :&gt; style &lt;js&gt; pop().border=\"thin solid red\"&lt;/js&gt;<br>&nbsp;&nbsp;&nbsp; js&gt; outputbox :&gt; style &lt;js&gt; pop().border=\"thin solid white\"&lt;/js&gt;<br>[x] Source code box 很難搞，應該是做出一個空的，讓 user 自己任意 copy-paste 東西進去。<br>&nbsp;&nbsp;&nbsp; ==&gt; 加強 [Example] 裡面多放點例子。<br>[x] 以下這個方法，後來發現不好。應該直接從 outputbox 往下 top-down 下來全部打框即可。<br>&nbsp;&nbsp;&nbsp; 【看清楚 outputbox 以下第一層 element 的範圍以免刪除時發生意外。】<br>&nbsp;&nbsp;&nbsp; 讓 double-click track back 到 outputbox 然後倒回來加上紅框，。<br>&nbsp;&nbsp;&nbsp; 手動做做看：</p></div></div></div></div></div><div> </div><div><table class=\"commandline\" style=\"margin-left: 2em;\"><tbody><tr><td><pre><br>js: body.ondblclick=function(){push(window.getSelection().anchorNode)}</pre></td></tr></tbody></table></div><p>&nbsp;&nbsp; 這樣一行就成功了!而且直接 push()——不必用 kvm.push()。<br>&nbsp;&nbsp;&nbsp;#text 沒有 style 考慮把整段文字都用&nbsp;&lt;span style=\"border:thin solid red&gt; <br>&nbsp;&nbsp; 加框即可。有 style 的就用 border 本來有 border 的改過去不管它，因為是在 outputbox <br>&nbsp;&nbsp; 裡面無所謂。Released version should check if the forth handler&nbsp;existance<br>&nbsp;&nbsp; before&nbsp;hooking the event handler. So this is done after the definition of<br>&nbsp;&nbsp; the forth word.</p><div><table class=\"commandline\" style=\"margin-left: 2em;\"><tbody><tr><td><pre>&nbsp;\\ 被 outputbox-high-light-toggle 取代了。這個 word 很有趣, double click 一個地方就會<br>&nbsp;\\ 在 outputbox 之下把所屬的整個 element 用紅框圈起來。避免 {backSpace} 殺錯一整塊。<br>&nbsp;\\ : mark-block ( node -- ) \\ Add red border to the double clicked block under outputbox<br>&nbsp;\\ &nbsp;begin ( node' )<br>&nbsp;\\ &nbsp;&nbsp;dup :&gt; parentNode dup ( node' parent parent ) <br>&nbsp;\\ &nbsp;&nbsp;js&gt; outputbox &lt;&gt; ( node' parent ? ) <br>&nbsp;\\ &nbsp;while ( node' parent ) \\ 不是 outputbox 還要再上升<br>&nbsp;\\ &nbsp;&nbsp;nip ( parent )<br>&nbsp;\\ &nbsp;( parent ) repeat ( node' parent )<br>&nbsp;\\ &nbsp;drop ( node )<br>&nbsp;\\ &nbsp;js&gt; tos().style if ( node )<br>&nbsp;\\ &nbsp;&nbsp;&lt;js&gt; <br>&nbsp;\\ &nbsp;&nbsp;if (tos().style.border==\"thin solid red\") pop().style.border=\"\";<br>&nbsp;\\ &nbsp;&nbsp;else pop().style.border=\"thin solid red\";<br>&nbsp;\\ &nbsp;&nbsp;&lt;/js&gt;<br>&nbsp;\\ &nbsp;else ( node ) \\ 沒有 style 的打賭是 #text <br>&nbsp;\\ &nbsp;&nbsp;s' &lt;span style=\"border:thin solid red\"&gt;' <br>&nbsp;\\ &nbsp;&nbsp;js&gt; tos(1).nodeValue +<br>&nbsp;\\ &nbsp;&nbsp;s' &lt;/span&gt;' + &lt;/o&gt; swap ( span node ) replaceNode<br>&nbsp;\\ &nbsp;then ;</pre></td></tr></tbody></table></div><p>&nbsp;&nbsp;&nbsp; <span style=\"font: 0.8em/normal courier; font-size-adjust: none; font-stretch: normal;\">js: body.ondblclick=function(){push(window.getSelection().anchorNode);execute(\"mark-block\")} &lt;--- Bingo!!!</span><br>&nbsp;&nbsp;&nbsp; [x]&nbsp;這下麻煩了, 加了一堆紅框, 怎麼去除?&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;==&gt; 當初打紅框上去時可以把原來的 .style.border 存在 ce@ 自己身上。</p><div><table class=\"commandline\" style=\"margin-left: 2em;\"><tbody><tr><td><pre><code class=\"source\">&lt;font size=\"2\"&gt;&lt;/font&gt;</code>( node ) &lt;js&gt; <br>tos().old_border = tos().style.border;<br>tos().style.border=\"thin solid red\";<br>&lt;/js&gt;&nbsp;</pre></td></tr></tbody></table></div><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ==&gt; Trace back to outputbox ... 方法有趣，但是不好。同樣目的應該 top-down 打框。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 清不掉的紅框，用 jquery 來清一次就算了。</p><div><table class=\"commandline\" style=\"margin-left: 2em;\"><tbody><tr><td><pre>js&gt; $(\"*\").toArray()&nbsp;constant a \\ 取得整個網頁的東西<br>true value debug \\ debug 開關<br>&lt;text&gt;<br>a :&gt; length 1- for \\ 不要忘記 1- !!!!<br>&nbsp; r@ <br>&nbsp; debug if *debug* 111&gt;&gt;&gt; then<br>&nbsp; a :&gt; [pop()] :&gt; style if<br>&nbsp;&nbsp;&nbsp; debug if *debug* 222&gt;&gt;&gt; then<br>&nbsp;&nbsp;&nbsp; r@ a :&gt; [pop()] &lt;js&gt; pop().style.border==\"thin solid red\"&lt;/jsV&gt; if<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; debug if *debug* 333&gt;&gt;&gt; then<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; r@ a :&gt; [pop()] :&gt; style.border=\"\"<br>&nbsp;&nbsp;&nbsp; then<br>&nbsp; then<br>next<br>&lt;/text&gt; (run:)</pre></td></tr></tbody></table></div><p>&nbsp; &nbsp;[x] 【看清楚 outputbox 以下第一層 element 的範圍以免刪除時發生意外。】改用 top-down 方式。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; outputbox-high-light-toggle ok now.</p><p>[x] Autoit has {SLEE} key! Try it.<br>&nbsp;&nbsp;&nbsp; [x] Autoit has Sleep(mS) actually, it&nbsp;pauses Autoit script for mS of time, not<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bringing the system into sleep mode.&nbsp; </p><div><table class=\"commandline\" style=\"margin-left: 2em;\"><tbody><tr><td><pre>&gt; include autoit.f<br>&gt; au3 :: Sleep(500) \\ ==&gt; No work!<br>&gt; au3 :: Sleepp(500)<br>JavaScript error : Object doesn't support property or method 'Sleepp'<br>&gt; au3 :: Sleep(5000) \\ ==&gt; No work!</pre></td></tr></tbody></table></div><p>&nbsp;&nbsp;&nbsp;[x] au3 :: send('{!}') \\ ==&gt; really sended a '1' right to the inputbox.<br>&nbsp;&nbsp;&nbsp;[!] au3 :: send('{SLEEP}') \\ ==&gt;&nbsp;No work at all<br>&nbsp;&nbsp;&nbsp;[!] au3 :: send('{SLEEP}',1000) \\ ==&gt; sended '{SLEEP}' to inputbox after 1 sec! 開玩笑嗎?<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 以上用&nbsp;autoit 自己的 SciTE-lite 實驗也是同樣的結果。<br>&nbsp;&nbsp;&nbsp;[x] au3 :: send('{VOLUME_MUTE}') \\ ==&gt;&nbsp;It works! Toggled as anticipated.<br>&nbsp;&nbsp; [x] au3 :: Shutdown(32) it works! 32 is standby.<br>&nbsp;&nbsp; [x] improve hibernation.f , done. It standby now instead of hibernation.<br><br>[x] 進 editbox 順便要&nbsp;disable outputbox 的 contentEditable 否則會干擾 editbox 的使用。<br>&nbsp;&nbsp;&nbsp; --&gt; 現在發現進 editbox 時 outputbox 不一定要 contentEditable&nbsp;了 click 也可以(上面有提到)<br>&nbsp;&nbsp;&nbsp; --&gt; Double click == Ctrl-F2<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>[/] 這行會觸動 ce@ 的防錯機制, ce@ 該擴充了。<br>&nbsp;&nbsp;&nbsp; article :&gt; currentStyle ce! ---&gt; 算了。<br>[x] 先插入一個&nbsp;anchor node 到所在處之 node 的前面 &lt;a id=editee&gt;&lt;/a&gt;. <br>&nbsp;&nbsp;&nbsp; 用來從 outputbox 中的 editor 跳回來。#text 有 insertBefore 嗎?怪就怪在它有，但是不能<br>&nbsp;&nbsp;&nbsp; 用，必須鑽到&nbsp;parent 下 insertBefore(newNode,me) 才行。答案是——可以。後來用 scrollTo() 不用 &lt;a&gt; 了。<br>[x] 不如直接把 editbox 就放到 target 下面 &lt;=== 餿主意,這樣會干擾原文,平添問題。還是放到 outputbox 最下面。<br>&nbsp;&nbsp;&nbsp;&nbsp;用 scrollTo() 來回 jump 只好如此。<br>\n\n[x] editbox&nbsp;以及 Ctrl-F2/Double-click 要多一個 button [jump] 並且在 [save]、[close] 之後都自動跳回來。<br>&nbsp;&nbsp;&nbsp; [x] evernote 上剛才蒐集到一些 How to jump or scroll on a HTML page. .... see my Evernote.<br>&nbsp;&nbsp;&nbsp; 1. 取得 target node&nbsp;的 offset.top,&nbsp;#text 也有 offset. 其實就是 top 跟 left 之 integer 值。<br>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; ce@ js&gt; $(pop()).offset() ( objOffset={top:int,left:int} )&nbsp;<br>&nbsp;&nbsp;&nbsp; 2. 用 window.scrollTo(offset.left, offset.top) 即可, 其中 left 固定用 0, top 是個 integer <br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; 即 target node 的位置。 早就可以把它存起來。因為重點是 editbox 只出現在 outputbox 最下面所以不會<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; 自己去干擾這個 top 值，重要！&lt;---- 好像相反了, <strong>top</strong> 似乎<strong>是從底下往上算的</strong>。觀察某個 element.offset().top 之值<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; 的變化....<strong>果然是這樣</strong>。&nbsp;--&gt; 研究 jQuery&nbsp;除了 offset() 有沒有別的 option?&nbsp;因為是 window.scrollTo() 的 arg<br>&nbsp;&nbsp; 　　 所以沒轍。事先存好（絕對）位置不可行，只好在要 scrollTo 時臨時算出來，也就是事先存好該 node 的 object。<br>&nbsp;&nbsp;&nbsp; 3. 實驗時 ce@ 指在 target node (用 double click 取得) 然後：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;ce@ js&gt; $(pop()).offset() ( offset ) 1000 nap js: window.scrollTo(tos().left,tos().top) 10000 nap<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;這是因為從 inputbox 下令&nbsp;focus 會一直回到 inputbox 來而看不到 scroll 過去的效果，必續用時間延遲來克服。&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;[x] 從 target 跳回 editbox 可以用 id editboxeditarea 或 div-editbox 做到。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &gt; 5000 nap js&gt; $(editboxtextarea).offset().top js: window.scrollTo(0,pop())<br>&nbsp;&nbsp;&nbsp; [x] 當然跳回 target 就是:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &gt; 5000 nap ce@ js&gt; $(pop()).offset().top js: window.scrollTo(0,pop())<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 但是跳不回 #text 只有&nbsp;element 可以。<br>&nbsp;&nbsp;&nbsp; [x] jump-to-ce@ defined in element.f 暫用 &lt;span&gt; 改裝 #text 終於成功了, <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; editbox-save and -close are jumping back to ce@ now.<br>[ ] Outputbox log 的 &lt;div&gt; 越套越多層,如果要解決可以考慮從裡面加套一個有 id 的 &lt;div&gt; 然後只 log.push 這個 &lt;div&gt;。<br>[ ] Open/Save 之後，即有東西在 editing 時，在 inputbox 下面列出該檔案的 pathname 以資提示。<br>[ ] env@ 只有 3hta 能用, 致使 editor.f 在 3nw 暫時還不能用。<br>&nbsp;&nbsp;&nbsp; 其實 3nw 也可以 access environment variables.[ ]&nbsp;這個好用! <strong>article :&gt; style :: backgroundColor=\"white\"</strong>&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;[ ]&nbsp;Canvas.f 裡面我為了改 style 所用的方法很笨。<br>&nbsp;&nbsp;&nbsp; [ ]&nbsp;index.html, jeforth.htm,&nbsp;jeforth.3nw.html 好像都很笨。<br>&nbsp;&nbsp;&nbsp; [ ] &lt;div style=\"margin-left: 2em;\"&gt;OK&lt;/div&gt; \\ em 是當時 font-size 的倍數，可正負&amp;小數。</p><div><table class=\"commandline\" style=\"margin-left: 2em;\"><tbody><tr><td><pre><code class=\"source\">&gt; ce@ :&gt; style :&gt; fontSize . \\ ==&gt; 10px OK<br>&gt; ce@ :&gt; style :&gt; getPropertyValue(\"font-size\") . \\ ==&gt; 10px OK <br>&gt; ce@ :&gt; style :&gt; fontSize=\"\"<br>&gt; ce@ :&gt; style :&gt; getPropertyValue(\"font-size\") . \\ ==&gt; \"\"</code></pre></td></tr></tbody></table></div></div><div><div>&nbsp;</div><div>[x] editbox 還有問題。整個結果必須是 one new node replace the old node. 事實上連我都會忘記, 而弄成 multiple node</div><div>&nbsp;&nbsp;&nbsp; 要去 replace the old node. 結果只有 last new node replace 過去, 其他的都掉到 outputbox 最底下。解法是：</div><div>&nbsp;&nbsp;&nbsp; ---&gt; make an enveloped group of nodes &lt;o&gt; &lt;span&gt; aa &lt;b&gt;bb&lt;/b&gt; &lt;i&gt;cc&lt;/i&gt; dd&lt;/span&gt;&lt;/o&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; The outer &lt;span&gt; is intentionally added by editbox. Can't be &lt;div&gt;, it breaks an unexpected&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new line in browser.<br><table class=\"commandline\" style=\"margin-left: 2em;\">\n    <tbody><tr><td><pre><code class=\"source\"><div>: unenvelope ( element -- ) \\ Break&nbsp;an enveloping element into its children nodes</div><div><div>&nbsp;&nbsp;&nbsp; (&nbsp;ele ) js&gt; tos().childNodes.length for </div><div>&nbsp;&nbsp;&nbsp; ( ele ) js&gt; tos().firstChild over ( ele first ele ) insertBefore ( ele )</div><div>&nbsp;&nbsp;&nbsp; next removeElement ;</div></div></code><div>---</div></pre></td></tr></tbody></table></div><div>&nbsp;&nbsp;&nbsp;先包成 &lt;span&gt;editboxtextarea&lt;/span&gt; 完成 one new node replace the old node 然後把 new node unenvelope 即可。<br>&nbsp;&nbsp; 修改 editor.f ... 成功了!!!!</div><div>--<br><div>\\ Use iframe for article, log, and more separatedly<br>\\ Those iframes are as wide as the outputbox --&gt; &lt;iframe width=99%&gt; works in HTA.<br>幾乎所有的 iframe attributes do not work on HTA but work fine on Chrome.<br>&gt; &lt;o&gt; &lt;iframe framborder=1 width=98% marginwidth=10px scrolling=yes srcdoc=\"&lt;h1&gt;sfdsfds&lt;/h1&gt;\"&gt;&lt;/iframe&gt;&lt;/o&gt;<br>We can use some workarounds,<br>&lt;o&gt; &lt;div align=center&gt;&lt;iframe width=99%&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/o&gt; &lt;--- only width=n% works on HTA</div><div><span style='font: 20px/normal \"courier new\"; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; widows: 1; font-size-adjust: none; font-stretch: normal; background-color: rgb(240, 240, 240); -webkit-text-stroke-width: 0px;'></span>--&nbsp;</div><div style='font: 20px/normal \"courier new\"; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; widows: 1; font-size-adjust: none; font-stretch: normal; background-color: rgb(240, 240, 240); -webkit-text-stroke-width: 0px;'>&lt;o&gt; &lt;iframe src=\"playground/test.html\"&gt;這裡是給不認得 iframe 的 browser 用的替代文字,這是 HTML 的通例&lt;/iframe&gt;&lt;/o&gt; </div><div style='font: 20px/normal \"courier new\"; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; widows: 1; font-size-adjust: none; font-stretch: normal; background-color: rgb(240, 240, 240); -webkit-text-stroke-width: 0px;'>實驗看看：</div><div style='font: 20px/normal \"courier new\"; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; widows: 1; font-size-adjust: none; font-stretch: normal; background-color: rgb(240, 240, 240); -webkit-text-stroke-width: 0px;'>&gt; &lt;o&gt; &lt;abc&gt; what will me be?&lt;/abc&gt;&lt;/o&gt;<br>&nbsp;what will me be? OK <br>&gt; ce<br>[object HTMLUnknownElement] innerHTML= what will me be?...<br>&nbsp;&nbsp;&nbsp; 0 : [object Text]&nbsp; what will me be?...<br>&nbsp;OK </div><div style='font: 20px/normal \"courier new\"; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; widows: 1; font-size-adjust: none; font-stretch: normal; background-color: rgb(240, 240, 240); -webkit-text-stroke-width: 0px;'>&gt; obj&gt;keys . 連隨便亂寫的 [object HTMLUnknownElement] 都有這些 properties：<br>recordset,namedRecordset,currentStyle,runtimeStyle,accessKey,all,behaviorUrns,canHaveChildren,canHaveHTML,children,className,contentEditable,dir,disabled,document,filters,hideFocus,id,innerHTML,innerText,isContentEditable,isDisabled,isMultiLine,isTextEdit,lang,language,offsetHeight,offsetLeft,offsetParent,offsetTop,offsetWidth,onabort,onactivate,onafterupdate,onbeforeactivate,onbeforecopy,onbeforecut,onbeforedeactivate ... snip ...<br><span style=\"font: 12px/18px Verdana, Arial, 宋体; text-align: left; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; widows: 1; font-size-adjust: none; font-stretch: normal; background-color: rgb(249, 249, 249); -webkit-text-stroke-width: 0px;\"></span>--<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0:&nbsp;<b>[object&nbsp;HTMLIFrameElement]&nbsp;(object)</b><br>&gt;&nbsp;dup&nbsp;:&gt;&nbsp;contentEditable=\"true\" &lt;=== It does not work. Incorrect object for the purpose.<br>Possible useful properties of an iframe object:</div><div style='font: 20px/normal \"courier new\"; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; widows: 1; font-size-adjust: none; font-stretch: normal; background-color: rgb(240, 240, 240); -webkit-text-stroke-width: 0px;'>sandbox,allowFullscreen,<b>width</b>,<b>height</b>,<b>contentDocument</b>,contentWindow,<b>scrolling</b>,<b>frameBorder</b>,<b>title</b>,<b>contentEditable</b>,<b>onchange</b>,</div><div style='font: 20px/normal \"courier new\"; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; widows: 1; font-size-adjust: none; font-stretch: normal; background-color: rgb(240, 240, 240); -webkit-text-stroke-width: 0px;'>myiframe&nbsp;:&gt;&nbsp;contentDocument&nbsp;.<br>[object&nbsp;HTMLDocument]&nbsp;OK&nbsp;<br>&gt;&nbsp;myiframe&nbsp;:&gt;&nbsp;contentDocument.body.contentEditable=\"true\"&nbsp;.</div><p>--</p><p>照以下這樣取得的 iframe id 在 HTA, Chrome 意義不一樣。</p><p>&lt;o&gt; &lt;div align=center&gt;&lt;h1&gt;log.json&lt;/h1&gt;&lt;iframe id=outputboxlog width=100%&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/o&gt; <br>js&gt; outputbox insertBefore</p><p>--- HTA ---<br>&gt; js&gt; outputboxlog .&nbsp; <br>[object Window] OK&nbsp; &lt;------------------- HTA 認為 iframe 就是 window<br>&gt; js&gt; outputboxlog.document . &lt;--------- 故直接用 .document access<br>[object Document] OK <br>&gt; js&gt; outputboxlog.contentDocument .<br>undefined OK </p><p><span style='font: 20px/normal \"courier new\"; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; widows: 1; font-size-adjust: none; font-stretch: normal; background-color: rgb(240, 240, 240); -webkit-text-stroke-width: 0px;'>--- Chrome ---<br>&gt;&nbsp;js&gt;&nbsp;outputboxlog&nbsp;.</span><br style='font: 20px/normal \"courier new\"; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; widows: 1; font-size-adjust: none; font-stretch: normal; background-color: rgb(240, 240, 240); -webkit-text-stroke-width: 0px;'><span style='font: 20px/normal \"courier new\"; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; widows: 1; font-size-adjust: none; font-stretch: normal; background-color: rgb(240, 240, 240); -webkit-text-stroke-width: 0px;'>[object&nbsp;HTMLIFrameElement]</span><span style='font: 20px/normal \"courier new\"; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; widows: 1; font-size-adjust: none; font-stretch: normal; background-color: rgb(240, 240, 240); -webkit-text-stroke-width: 0px;'>&nbsp;OK&nbsp; &lt;------- Chrome 認為 iframe 就是 iframe</span><br style='font: 20px/normal \"courier new\"; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; widows: 1; font-size-adjust: none; font-stretch: normal; background-color: rgb(240, 240, 240); -webkit-text-stroke-width: 0px;'><span style='font: 20px/normal \"courier new\"; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; widows: 1; font-size-adjust: none; font-stretch: normal; background-color: rgb(240, 240, 240); -webkit-text-stroke-width: 0px;'>&gt;&nbsp;js&gt;&nbsp;outputboxlog.document&nbsp;.</span><br style='font: 20px/normal \"courier new\"; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; widows: 1; font-size-adjust: none; font-stretch: normal; background-color: rgb(240, 240, 240); -webkit-text-stroke-width: 0px;'><span style='font: 20px/normal \"courier new\"; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; widows: 1; font-size-adjust: none; font-stretch: normal; background-color: rgb(240, 240, 240); -webkit-text-stroke-width: 0px;'>undefined</span><span style='font: 20px/normal \"courier new\"; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; widows: 1; font-size-adjust: none; font-stretch: normal; background-color: rgb(240, 240, 240); -webkit-text-stroke-width: 0px;'>&nbsp;OK&nbsp;</span><br style='font: 20px/normal \"courier new\"; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; widows: 1; font-size-adjust: none; font-stretch: normal; background-color: rgb(240, 240, 240); -webkit-text-stroke-width: 0px;'><span style='font: 20px/normal \"courier new\"; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; widows: 1; font-size-adjust: none; font-stretch: normal; background-color: rgb(240, 240, 240); -webkit-text-stroke-width: 0px;'>&gt;&nbsp;js&gt;&nbsp;outputboxlog.contentDocument&nbsp;. &lt;--- 故另有 property access document</span><br style='font: 20px/normal \"courier new\"; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; widows: 1; font-size-adjust: none; font-stretch: normal; background-color: rgb(240, 240, 240); -webkit-text-stroke-width: 0px;'><span style='font: 20px/normal \"courier new\"; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; widows: 1; font-size-adjust: none; font-stretch: normal; background-color: rgb(240, 240, 240); -webkit-text-stroke-width: 0px;'>[object&nbsp;HTMLDocument]</span><span style='font: 20px/normal \"courier new\"; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; widows: 1; font-size-adjust: none; font-stretch: normal; background-color: rgb(240, 240, 240); -webkit-text-stroke-width: 0px;'>&nbsp;OK&nbsp;</span></p><p><span style='font: 20px/normal \"courier new\"; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; widows: 1; font-size-adjust: none; font-stretch: normal; background-color: rgb(240, 240, 240); -webkit-text-stroke-width: 0px;'>既然如此,只好祭出 jQuery 來統一用法。<br><a href=\"http://stackoverflow.com/questions/364952/jquery-javascript-accessing-contents-of-an-iframe\">http://stackoverflow.com/questions/364952/jquery-javascript-accessing-contents-of-an-iframe</a></span></p><p><span style='font: 20px/normal \"courier new\"; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; widows: 1; font-size-adjust: none; font-stretch: normal; background-color: rgb(240, 240, 240); -webkit-text-stroke-width: 0px;'>&gt; ce<br>[object HTMLDivElement] innerHTML=&lt;h1&gt;log.json&lt;/h1&gt;&lt;iframe width=\"100%\" id=\"outputboxlog\"&gt;&lt;/iframe&gt;...<br>&nbsp;&nbsp;&nbsp; 0 : [object HTMLHeadingElement] innerHTML=log.json...<br>&nbsp;&nbsp;&nbsp; 1 : [object HTMLIFrameElement] id='outputboxlog'; <br>&nbsp;OK <br>&gt; ce@ :&gt; lastChild /* iframe */ js&gt; $(pop()).contents() . &lt;=== get iframe's jQuery contents()<br>[object Object] OK <br>&gt; ce@ :&gt; lastChild js&gt; $(pop()).contents().length . &lt;=== iframe's conents() has only one thing<br>1 OK <br>&gt; ce@ :&gt; lastChild js&gt; $(pop()).contents()[0] . &lt;== which is its document object<br>[object Document] OK <br>So, through jQuery, this is the cross browser common way to get the document of the iframe.</span></p><p><span style='font: 20px/normal \"courier new\"; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; widows: 1; font-size-adjust: none; font-stretch: normal; background-color: rgb(240, 240, 240); -webkit-text-stroke-width: 0px;'></span>--</p><p>&lt;o&gt; <br>&lt;div align=center&gt;<br>&lt;h1&gt;log.json&lt;/h1&gt;<br>&lt;iframe width=100%&gt;&lt;/iframe&gt;&lt;/div&gt;<br>&lt;/o&gt; <br>value log-div // ( -- eleDiv ) The log editing area.<br>log-div ce! er ce@ js&gt; outputbox insertBefore&nbsp;<br> &gt; log-div :&gt; lastChild .<br>[object HTMLIFrameElement]<br>&gt; log-div :&gt; firstChild .<br>[object HTMLHeadingElement]</p></div><div>&nbsp;</div><div>--</div><div>log-div :&gt; lastChild js&gt; $(pop()).contents()[0] value log-document</div><div>--</div><div>&gt; log-document :&gt; body.innerHTML=\"&lt;h1&gt;hello&lt;/h1&gt;\"<br> OK <br>&gt; log-document :&gt; body .<br>[object HTMLBodyElement] OK <br>&gt; log-document :&gt; body ce!<br> OK <br>&gt; ce<br>[object HTMLBodyElement] innerHTML=&lt;h1&gt;hello&lt;/h1&gt;...<br> &nbsp; &nbsp;0 : [object HTMLHeadingElement] innerHTML=hello...<br> OK <br>&gt; ce@ :&gt; outerHTML .<br>&lt;body&gt;&lt;h1&gt;hello&lt;/h1&gt;&lt;/body&gt; OK </div><div>--</div><div>成攻讀進來了</div><div>char log.json readTextFile js&gt; JSON.parse(pop()) \\ 把整個 log.json 讀回來成一個 array。<br>:&gt; slice(-1) log-document :&gt; body.innerHTML=pop()</div><div>--<br>接下來要加上 style, </div><div>Pring mystyle see see</div><div>js&gt; mystyle :&gt; outerHTML .</div><div>&nbsp;</div><div>--<br>&lt;o&gt; <br>&lt;div align=center&gt;<br>&lt;h1&gt;log.json&lt;/h1&gt;<br>&lt;iframe width=100%&gt;&lt;/iframe&gt;&lt;/div&gt;<br>&lt;/o&gt; <br>value log-div // ( -- eleDiv ) The log editing area.<br>log-div ce! er ce@ js&gt; outputbox insertBefore&nbsp;<br>log-div :&gt; lastChild js&gt; $(pop()).contents()[0] value log-document<br>js&gt; mystyle :&gt; outerHTML</div><div><div>char log.json readTextFile js&gt; JSON.parse(pop()) \\ 把整個 log.json 讀回來成一個 array。<br>:&gt; slice(-1) + log-document :&gt; body.innerHTML=pop()</div></div><div>--</div><div>--<br>&lt;o&gt; <br>&lt;div align=center&gt;<br>&lt;h1&gt;log.json&lt;/h1&gt;<br>&lt;iframe width=100%&gt;&lt;/iframe&gt;&lt;/div&gt;<br>&lt;/o&gt; value log-div // ( -- eleDiv ) The log editing area.<br>log-div ce! er ce@ js&gt; outputbox insertBefore <br>log-div :&gt; lastChild js&gt; $(pop()).contents()[0] value log-document<br>&gt; \\ ---------------------------------------------------------------<br>js&gt; mystyle :&gt; outerHTML<br>char log.json readTextFile js&gt; JSON.parse(pop()) <br>:&gt; slice(-1) + log-document :&gt; body.innerHTML=pop()<br>log-document :&gt; body.outerHTML log.html writeTextFile<br>-- </div><div>\\ 設定讓 整個 &lt;body&gt; 的 double-click 都發動 content-handler 來<br>\\ 處理所在的 node 等同於 Ctrl-F2。<br>&lt;js&gt; <br>vm.g[\"log-document\"].body.ondblclick = function(){<br>push(vm.g[\"log-document\"].getSelection().anchorNode);<br>execute(\"content-handler\");<br>return(pop());<br>}<br>&lt;/js&gt;<br>--<br>&lt;o&gt; <br>&lt;div align=center&gt;<br>&lt;h1&gt;log.json&lt;/h1&gt;<br>&lt;iframe width=100% src=\"log.html\"&gt;&lt;/iframe&gt;&lt;/div&gt;<br>&lt;/o&gt; value log-div // ( -- eleDiv ) The log editing area &lt;DIV&gt; element.<br>log-div ce! er ce@ js&gt; outputbox insertBefore <br>log-div :&gt; lastChild js&gt; $(pop()).contents()[0] value log-document<br>log-document :&gt; body.contentEditable=true</div><div>--<br>&lt;o&gt;<br>&lt;div align=center&gt;<br>&lt;h1&gt;log.json&lt;/h1&gt;<br>&lt;iframe width=100% height=500 src=\"log.html\"&gt;&lt;/iframe&gt;&lt;/div&gt;<br>&lt;/o&gt; value log-div // ( -- eleDiv ) The log editing area &lt;DIV&gt; element.<br>log-div ce! er ce@ js&gt; outputbox insertBefore<br>log-div :&gt; lastChild js&gt; $(pop()).contents()[0] value log-document<br>\\ The below two lines are both failed. The page is not ready and the body is null.<br>\\ log-document :&gt; body.contentEditable=true<br>\\ js: jQuery(vm.g[\"log-document\"]).ready(function(){vm.g[\"log-document\"].body.contentEditable=true})<br><br>: log-content-handler ( -- ) \\ Launch the Editbox to edit log iframe node<br>&nbsp; &nbsp; &nbsp; &nbsp;&lt;js&gt; confirm(\"jeforth: You double-clicked at a node, want to Edit it?\")&lt;/jsV&gt; if<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;js&gt; vm.g[\"log-document\"].getSelection().anchorNode ce! edit <br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;false<br> &nbsp; &nbsp; &nbsp; &nbsp;else true then ;<br> &nbsp; &nbsp; &nbsp; &nbsp;/// Double-Click<br>&lt;js&gt; <br>vm.g[\"log-document\"].body.ondblclick = function(){<br>push(vm.g[\"log-document\"].getSelection().anchorNode);<br>execute(\"log-content-handler\");<br>return(pop());<br>}<br>&lt;/js&gt;<br><br>\\ <strong>Above works fine now. But the scrollTo needs corresponding change for log iframe.</strong><br></div><div>--</div><div>--</div><div>--</div><div>--</div><div>--</div><div>--</div><div>--</div><div>--</div><div>--</div><div>--</div><div>--</div><div>--</div><div>&nbsp;</div></div></div></div></div></div><br>&gt; save<br>","<br>&gt; save<br>"]